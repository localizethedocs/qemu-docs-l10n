# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../user/main.rst:4
msgid "QEMU User space emulator"
msgstr ""

#: ../../../user/main.rst:7
msgid "Supported Operating Systems"
msgstr ""

#: ../../../user/main.rst:9
msgid "The following OS are supported in user space emulation:"
msgstr ""

#: ../../../user/main.rst:11
msgid "Linux (referred as qemu-linux-user)"
msgstr ""

#: ../../../user/main.rst:13
msgid "BSD (referred as qemu-bsd-user)"
msgstr ""

#: ../../../user/main.rst:16
msgid "Features"
msgstr ""

#: ../../../user/main.rst:18
msgid "QEMU user space emulation has the following notable features:"
msgstr ""

#: ../../../user/main.rst:21
msgid "System call translation"
msgstr ""

#: ../../../user/main.rst:23
msgid ""
"System calls are the principle interface between user-space and the kernel. "
"Generally the same system calls exist on all versions of the kernel so QEMU "
"includes a generic system call translator. The translator takes care of "
"adjusting endianess, 32/64 bit parameter size and then calling the "
"equivalent host system call."
msgstr ""

#: ../../../user/main.rst:29
msgid ""
"QEMU can also adjust device specific ``ioctl()`` calls in a similar fashion."
msgstr ""

#: ../../../user/main.rst:33
msgid "POSIX signal handling"
msgstr ""

#: ../../../user/main.rst:35
msgid ""
"QEMU can redirect to the running program all signals coming from the host "
"(such as ``SIGALRM``), as well as synthesize signals from virtual CPU "
"exceptions (for example ``SIGFPE`` when the program executes a division by "
"zero)."
msgstr ""

#: ../../../user/main.rst:40
msgid ""
"QEMU relies on the host kernel to emulate most signal system calls, for "
"example to emulate the signal mask. On Linux, QEMU supports both normal and "
"real-time signals."
msgstr ""

#: ../../../user/main.rst:45
msgid "Threading"
msgstr ""

#: ../../../user/main.rst:47
msgid ""
"On Linux, QEMU can emulate the ``clone`` syscall and create a real host "
"thread (with a separate virtual CPU) for each emulated thread. However as "
"QEMU relies on the system libc to call ``clone`` on its behalf we limit the "
"flags accepted to those it uses. Specifically this means flags affecting "
"namespaces (e.g. container runtimes) are not supported. QEMU user-mode "
"processes can still be run inside containers though."
msgstr ""

#: ../../../user/main.rst:55
msgid ""
"While QEMU does its best to emulate atomic operations properly differences "
"between the host and guest memory models can cause issues for software that "
"makes assumptions about the memory model."
msgstr ""

#: ../../../user/main.rst:59
msgid ""
"QEMU was conceived so that ultimately it can emulate itself. Although it is "
"not very useful, it is an important test to show the power of the emulator."
msgstr ""

#: ../../../user/main.rst:66
msgid "Linux User space emulator"
msgstr ""

#: ../../../user/main.rst:69 ../../../user/main.rst:230
msgid "Command line options"
msgstr ""

#: ../../../user/main.rst:73
msgid ""
"qemu-i386 [-h] [-d] [-L path] [-s size] [-cpu model] [-g endpoint] [-B "
"offset] [-R size] program [arguments...]"
msgstr ""

#: ../../../user/main.rst:75 ../../../user/main.rst:236
msgid "``-h``"
msgstr ""

#: ../../../user/main.rst:76 ../../../user/main.rst:237
msgid "Print the help"
msgstr ""

#: ../../../user/main.rst:78 ../../../user/main.rst:239
msgid "``-L path``"
msgstr ""

#: ../../../user/main.rst:79
msgid "Set the x86 elf interpreter prefix (default=/usr/local/qemu-i386)"
msgstr ""

#: ../../../user/main.rst:81 ../../../user/main.rst:242
msgid "``-s size``"
msgstr ""

#: ../../../user/main.rst:82
msgid "Set the x86 stack size in bytes (default=524288)"
msgstr ""

#: ../../../user/main.rst:84
msgid "``-cpu model``"
msgstr ""

#: ../../../user/main.rst:85
msgid "Select CPU model (-cpu help for list and additional feature selection)"
msgstr ""

#: ../../../user/main.rst:88 ../../../user/main.rst:249
msgid "``-E var=value``"
msgstr ""

#: ../../../user/main.rst:89 ../../../user/main.rst:250
msgid "Set environment var to value."
msgstr ""

#: ../../../user/main.rst:91 ../../../user/main.rst:252
msgid "``-U var``"
msgstr ""

#: ../../../user/main.rst:92 ../../../user/main.rst:253
msgid "Remove var from the environment."
msgstr ""

#: ../../../user/main.rst:94
msgid "``-B offset``"
msgstr ""

#: ../../../user/main.rst:95
msgid ""
"Offset guest address by the specified number of bytes. This is useful when "
"the address region required by guest applications is reserved on the host. "
"This option is currently only supported on some hosts."
msgstr ""

#: ../../../user/main.rst:99
msgid "``-R size``"
msgstr ""

#: ../../../user/main.rst:100
msgid ""
"Pre-allocate a guest virtual address space of the given size (in bytes). \\"
"\"G\\\", \\\"M\\\", and \\\"k\\\" suffixes may be used when specifying the "
"size."
msgstr ""

#: ../../../user/main.rst:104 ../../../user/main.rst:259
msgid "Debug options:"
msgstr ""

#: ../../../user/main.rst:106 ../../../user/main.rst:261
msgid "``-d item1,...``"
msgstr ""

#: ../../../user/main.rst:107 ../../../user/main.rst:262
msgid ""
"Activate logging of the specified items (use '-d help' for a list of log "
"items)"
msgstr ""

#: ../../../user/main.rst:110
msgid "``-g endpoint``"
msgstr ""

#: ../../../user/main.rst:111
msgid ""
"Wait gdb connection to a port (e.g., ``1234``) or a unix socket (e.g., ``/"
"tmp/qemu.sock``)."
msgstr ""

#: ../../../user/main.rst:114
msgid ""
"If a unix socket path contains single ``%d`` placeholder (e.g., ``/tmp/qemu-"
"%d.sock``), it is replaced by the emulator PID, which is useful when passing "
"this option via the ``QEMU_GDB`` environment variable to a multi-process "
"application."
msgstr ""

#: ../../../user/main.rst:119
msgid ""
"If the endpoint address is followed by ``,suspend=n`` (e.g., ``1234,"
"suspend=n``), then the emulated program starts without waiting for a "
"connection, which can be established at any later point in time."
msgstr ""

#: ../../../user/main.rst:123 ../../../user/main.rst:265
msgid "``-one-insn-per-tb``"
msgstr ""

#: ../../../user/main.rst:124 ../../../user/main.rst:266
msgid ""
"Run the emulation with one guest instruction per translation block. This "
"slows down emulation a lot, but can be useful in some situations, such as "
"when trying to analyse the logs produced by the ``-d`` option."
msgstr ""

#: ../../../user/main.rst:128
msgid "Environment variables:"
msgstr ""

#: ../../../user/main.rst:130
msgid "QEMU_STRACE"
msgstr ""

#: ../../../user/main.rst:131
msgid ""
"Print system calls and arguments similar to the 'strace' program (NOTE: the "
"actual 'strace' program will not work because the user space emulator hasn't "
"implemented ptrace). At the moment this is incomplete. All system calls that "
"don't have a specific argument format are printed with information for six "
"arguments. Many flag-style arguments don't have decoders and will show up as "
"numbers."
msgstr ""

#: ../../../user/main.rst:139
msgid "Other binaries"
msgstr ""

#: ../../../user/main.rst:141
msgid "user mode (Alpha)"
msgstr ""

#: ../../../user/main.rst:143
msgid "``qemu-alpha`` TODO."
msgstr ""

#: ../../../user/main.rst:145
msgid "user mode (Arm)"
msgstr ""

#: ../../../user/main.rst:147
msgid "``qemu-armeb`` TODO."
msgstr ""

#: ../../../user/main.rst:149
msgid ""
"``qemu-arm`` is also capable of running Arm \\\"Angel\\\" semihosted ELF "
"binaries (as implemented by the arm-elf and arm-eabi Newlib/GDB "
"configurations), and arm-uclinux bFLT format binaries."
msgstr ""

#: ../../../user/main.rst:153
msgid "user mode (ColdFire)"
msgstr ""

#: ../../../user/main.rst:155
msgid "user mode (M68K)"
msgstr ""

#: ../../../user/main.rst:157
msgid ""
"``qemu-m68k`` is capable of running semihosted binaries using the BDM (m5xxx-"
"ram-hosted.ld) or m68k-sim (sim.ld) syscall interfaces, and coldfire uClinux "
"bFLT format binaries."
msgstr ""

#: ../../../user/main.rst:161
msgid "The binary format is detected automatically."
msgstr ""

#: ../../../user/main.rst:163
msgid "user mode (i386)"
msgstr ""

#: ../../../user/main.rst:165
msgid "``qemu-i386`` TODO."
msgstr ""

#: ../../../user/main.rst:166
msgid "``qemu-x86_64`` TODO."
msgstr ""

#: ../../../user/main.rst:168
msgid "user mode (Microblaze)"
msgstr ""

#: ../../../user/main.rst:170
msgid "``qemu-microblaze`` TODO."
msgstr ""

#: ../../../user/main.rst:172
msgid "user mode (MIPS)"
msgstr ""

#: ../../../user/main.rst:174
msgid "``qemu-mips`` executes 32-bit big endian MIPS binaries (MIPS O32 ABI)."
msgstr ""

#: ../../../user/main.rst:176
msgid ""
"``qemu-mipsel`` executes 32-bit little endian MIPS binaries (MIPS O32 ABI)."
msgstr ""

#: ../../../user/main.rst:178
msgid ""
"``qemu-mips64`` executes 64-bit big endian MIPS binaries (MIPS N64 ABI)."
msgstr ""

#: ../../../user/main.rst:180
msgid ""
"``qemu-mips64el`` executes 64-bit little endian MIPS binaries (MIPS N64 ABI)."
msgstr ""

#: ../../../user/main.rst:183
msgid ""
"``qemu-mipsn32`` executes 32-bit big endian MIPS binaries (MIPS N32 ABI)."
msgstr ""

#: ../../../user/main.rst:185
msgid ""
"``qemu-mipsn32el`` executes 32-bit little endian MIPS binaries (MIPS N32 "
"ABI)."
msgstr ""

#: ../../../user/main.rst:188
msgid "user mode (PowerPC)"
msgstr ""

#: ../../../user/main.rst:190
msgid "``qemu-ppc64`` TODO."
msgstr ""

#: ../../../user/main.rst:191
msgid "``qemu-ppc`` TODO."
msgstr ""

#: ../../../user/main.rst:193
msgid "user mode (SH4)"
msgstr ""

#: ../../../user/main.rst:195
msgid "``qemu-sh4eb`` TODO."
msgstr ""

#: ../../../user/main.rst:196
msgid "``qemu-sh4`` TODO."
msgstr ""

#: ../../../user/main.rst:198
msgid "user mode (SPARC)"
msgstr ""

#: ../../../user/main.rst:200
msgid "``qemu-sparc`` can execute Sparc32 binaries (Sparc32 CPU, 32 bit ABI)."
msgstr ""

#: ../../../user/main.rst:202
msgid ""
"``qemu-sparc32plus`` can execute Sparc32 and SPARC32PLUS binaries (Sparc64 "
"CPU, 32 bit ABI)."
msgstr ""

#: ../../../user/main.rst:205
msgid ""
"``qemu-sparc64`` can execute some Sparc64 (Sparc64 CPU, 64 bit ABI) and "
"SPARC32PLUS binaries (Sparc64 CPU, 32 bit ABI)."
msgstr ""

#: ../../../user/main.rst:211
msgid "BSD User space emulator"
msgstr ""

#: ../../../user/main.rst:214
msgid "BSD Status"
msgstr ""

#: ../../../user/main.rst:216
msgid "target Sparc64 on Sparc64: Some trivial programs work."
msgstr ""

#: ../../../user/main.rst:219
msgid "Quick Start"
msgstr ""

#: ../../../user/main.rst:221
msgid ""
"In order to launch a BSD process, QEMU needs the process executable itself "
"and all the target dynamic libraries used by it."
msgstr ""

#: ../../../user/main.rst:224
msgid ""
"On Sparc64, you can just try to launch any process by using the native "
"libraries::"
msgstr ""

#: ../../../user/main.rst:227
msgid "qemu-sparc64 /bin/ls"
msgstr ""

#: ../../../user/main.rst:234
msgid ""
"qemu-sparc64 [-h] [-d] [-L path] [-s size] [-bsd type] program [arguments...]"
msgstr ""

#: ../../../user/main.rst:240
msgid "Set the library root path (default=/)"
msgstr ""

#: ../../../user/main.rst:243
msgid "Set the stack size in bytes (default=524288)"
msgstr ""

#: ../../../user/main.rst:245
msgid "``-ignore-environment``"
msgstr ""

#: ../../../user/main.rst:246
msgid ""
"Start with an empty environment. Without this option, the initial "
"environment is a copy of the caller's environment."
msgstr ""

#: ../../../user/main.rst:255
msgid "``-bsd type``"
msgstr ""

#: ../../../user/main.rst:256
msgid ""
"Set the type of the emulated BSD Operating system. Valid values are FreeBSD, "
"NetBSD and OpenBSD (default)."
msgstr ""
