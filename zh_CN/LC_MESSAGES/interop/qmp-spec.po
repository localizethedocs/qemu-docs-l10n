# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../interop/qmp-spec.rst:10
msgid "QEMU Machine Protocol Specification"
msgstr ""

#: ../../../interop/qmp-spec.rst:12
msgid ""
"The QEMU Machine Protocol (QMP) is a JSON-based protocol which is available "
"for applications to operate QEMU at the machine-level.  It is also in use by "
"the QEMU Guest Agent (QGA), which is available for host applications to "
"interact with the guest operating system. This page specifies the general "
"format of the protocol; details of the commands and data structures can be "
"found in the :doc:`qemu-qmp-ref` and the :doc:`qemu-ga-ref`."
msgstr ""

#: ../../../interop/qmp-spec.rst:20
msgid "Contents"
msgstr ""

#: ../../../interop/qmp-spec.rst:23
msgid "Protocol Specification"
msgstr ""

#: ../../../interop/qmp-spec.rst:25
msgid ""
"This section details the protocol format. For the purpose of this document, "
"\"Server\" is either QEMU or the QEMU Guest Agent, and \"Client\" is any "
"application communicating with it via QMP."
msgstr ""

#: ../../../interop/qmp-spec.rst:29
msgid ""
"JSON data structures, when mentioned in this document, are always in the "
"following format:"
msgstr ""

#: ../../../interop/qmp-spec.rst:32
msgid "json-DATA-STRUCTURE-NAME"
msgstr ""

#: ../../../interop/qmp-spec.rst:34
msgid ""
"Where DATA-STRUCTURE-NAME is any valid JSON data structure, as defined by "
"the `JSON standard <http://www.ietf.org/rfc/rfc8259.txt>`_."
msgstr ""

#: ../../../interop/qmp-spec.rst:37
msgid ""
"The server expects its input to be encoded in UTF-8, and sends its output "
"encoded in ASCII."
msgstr ""

#: ../../../interop/qmp-spec.rst:40
msgid ""
"For convenience, json-object members mentioned in this document will be in a "
"certain order. However, in real protocol usage they can be in ANY order, "
"thus no particular order should be assumed. On the other hand, use of json-"
"array elements presumes that preserving order is important unless "
"specifically documented otherwise.  Repeating a key within a json-object "
"gives unpredictable results."
msgstr ""

#: ../../../interop/qmp-spec.rst:47
msgid ""
"Also for convenience, the server will accept an extension of ``'single-"
"quoted'`` strings in place of the usual ``\"double-quoted\"`` json-string, "
"and both input forms of strings understand an additional escape sequence of "
"``\\'`` for a single quote. The server will only use double quoting on "
"output."
msgstr ""

#: ../../../interop/qmp-spec.rst:54
msgid "General Definitions"
msgstr ""

#: ../../../interop/qmp-spec.rst:56
msgid ""
"All interactions transmitted by the Server are json-objects, always "
"terminating with CRLF."
msgstr ""

#: ../../../interop/qmp-spec.rst:59
msgid "All json-objects members are mandatory when not specified otherwise."
msgstr ""

#: ../../../interop/qmp-spec.rst:62
msgid "Server Greeting"
msgstr ""

#: ../../../interop/qmp-spec.rst:64
msgid ""
"Right when connected the Server will issue a greeting message, which signals "
"that the connection has been successfully established and that the Server is "
"ready for capabilities negotiation (for more information refer to section "
"`Capabilities Negotiation`_)."
msgstr ""

#: ../../../interop/qmp-spec.rst:69
msgid "The greeting message format is:"
msgstr ""

#: ../../../interop/qmp-spec.rst:73
msgid "{ \"QMP\": { \"version\": json-object, \"capabilities\": json-array } }"
msgstr ""

#: ../../../interop/qmp-spec.rst:75 ../../../interop/qmp-spec.rst:107
#: ../../../interop/qmp-spec.rst:171 ../../../interop/qmp-spec.rst:190
#: ../../../interop/qmp-spec.rst:216
msgid "Where:"
msgstr ""

#: ../../../interop/qmp-spec.rst:77
msgid ""
"The ``version`` member contains the Server's version information (the format "
"is the same as for the query-version command)."
msgstr ""

#: ../../../interop/qmp-spec.rst:79
msgid ""
"The ``capabilities`` member specifies the availability of features beyond "
"the baseline specification; the order of elements in this array has no "
"particular significance."
msgstr ""

#: ../../../interop/qmp-spec.rst:84
msgid "Capabilities"
msgstr ""

#: ../../../interop/qmp-spec.rst:86
msgid "Currently supported capabilities are:"
msgstr ""

#: ../../../interop/qmp-spec.rst:88
msgid "``oob``"
msgstr ""

#: ../../../interop/qmp-spec.rst:89
msgid ""
"the QMP server supports \"out-of-band\" (OOB) command execution, as "
"described in section `Out-of-band execution`_."
msgstr ""

#: ../../../interop/qmp-spec.rst:93
msgid "Issuing Commands"
msgstr ""

#: ../../../interop/qmp-spec.rst:95
msgid "The format for command execution is:"
msgstr ""

#: ../../../interop/qmp-spec.rst:99
msgid ""
"{ \"execute\": json-string, \"arguments\": json-object, \"id\": json-value }"
msgstr ""

#: ../../../interop/qmp-spec.rst:101
msgid "or"
msgstr ""

#: ../../../interop/qmp-spec.rst:105
msgid ""
"{ \"exec-oob\": json-string, \"arguments\": json-object, \"id\": json-value }"
msgstr ""

#: ../../../interop/qmp-spec.rst:109
msgid ""
"The ``execute`` or ``exec-oob`` member identifies the command to be executed "
"by the server.  The latter requests out-of-band execution."
msgstr ""

#: ../../../interop/qmp-spec.rst:111
msgid ""
"The ``arguments`` member is used to pass any arguments required for the "
"execution of the command, it is optional when no arguments are required. "
"Each command documents what contents will be considered valid when handling "
"the json-argument."
msgstr ""

#: ../../../interop/qmp-spec.rst:115
msgid ""
"The ``id`` member is a transaction identification associated with the "
"command execution, it is optional and will be part of the response if "
"provided.  The ``id`` member can be any json-value.  A json-number "
"incremented for each successive command works fine."
msgstr ""

#: ../../../interop/qmp-spec.rst:120
msgid "The actual commands are documented in the :doc:`qemu-qmp-ref`."
msgstr ""

#: ../../../interop/qmp-spec.rst:123 ../../../interop/qmp-spec.rst:323
msgid "Out-of-band execution"
msgstr ""

#: ../../../interop/qmp-spec.rst:125
msgid ""
"The server normally reads, executes and responds to one command after the "
"other.  The client therefore receives command responses in issue order."
msgstr ""

#: ../../../interop/qmp-spec.rst:129
msgid ""
"With out-of-band execution enabled via `capabilities negotiation`_, the "
"server reads and queues commands as they arrive.  It executes commands from "
"the queue one after the other.  Commands executed out-of-band jump the "
"queue: the command get executed right away, possibly overtaking prior in-"
"band commands.  The client may therefore receive such a command's response "
"before responses from prior in-band commands."
msgstr ""

#: ../../../interop/qmp-spec.rst:137
msgid ""
"To be able to match responses back to their commands, the client needs to "
"pass ``id`` with out-of-band commands.  Passing it with all commands is "
"recommended for clients that accept capability ``oob``."
msgstr ""

#: ../../../interop/qmp-spec.rst:141
msgid ""
"If the client sends in-band commands faster than the server can execute "
"them, the server will stop reading requests until the request queue length "
"is reduced to an acceptable range."
msgstr ""

#: ../../../interop/qmp-spec.rst:145
msgid ""
"To ensure commands to be executed out-of-band get read and executed, the "
"client should have at most eight in-band commands in flight."
msgstr ""

#: ../../../interop/qmp-spec.rst:148
msgid ""
"Only a few commands support out-of-band execution.  The ones that do have "
"``\"allow-oob\": true`` in the output of ``query-qmp-schema``."
msgstr ""

#: ../../../interop/qmp-spec.rst:152
msgid "Commands Responses"
msgstr ""

#: ../../../interop/qmp-spec.rst:154
msgid ""
"There are two possible responses which the Server will issue as the result "
"of a command execution: success or error."
msgstr ""

#: ../../../interop/qmp-spec.rst:157
msgid ""
"As long as the commands were issued with a proper ``id`` field, then the "
"same ``id`` field will be attached in the corresponding response message so "
"that requests and responses can match.  Clients should drop all the "
"responses that have an unknown ``id`` field."
msgstr ""

#: ../../../interop/qmp-spec.rst:163
msgid "Success"
msgstr ""

#: ../../../interop/qmp-spec.rst:165
msgid "The format of a success response is:"
msgstr ""

#: ../../../interop/qmp-spec.rst:169
msgid "{ \"return\": json-value, \"id\": json-value }"
msgstr ""

#: ../../../interop/qmp-spec.rst:173
msgid ""
"The ``return`` member contains the data returned by the command, which is "
"defined on a per-command basis (usually a json-object or json-array of json-"
"objects, but sometimes a json-number, json-string, or json-array of json-"
"strings); it is an empty json-object if the command does not return data."
msgstr ""

#: ../../../interop/qmp-spec.rst:178 ../../../interop/qmp-spec.rst:195
msgid ""
"The ``id`` member contains the transaction identification associated with "
"the command execution if issued by the Client."
msgstr ""

#: ../../../interop/qmp-spec.rst:182
msgid "Error"
msgstr ""

#: ../../../interop/qmp-spec.rst:184
msgid "The format of an error response is:"
msgstr ""

#: ../../../interop/qmp-spec.rst:188
msgid ""
"{ \"error\": { \"class\": json-string, \"desc\": json-string }, \"id\": json-"
"value }"
msgstr ""

#: ../../../interop/qmp-spec.rst:192
msgid ""
"The ``class`` member contains the error class name (eg. "
"``\"GenericError\"``)."
msgstr ""

#: ../../../interop/qmp-spec.rst:193
msgid ""
"The ``desc`` member is a human-readable error message. Clients should not "
"attempt to parse this message."
msgstr ""

#: ../../../interop/qmp-spec.rst:198
msgid ""
"NOTE: Some errors can occur before the Server is able to read the ``id`` "
"member; in these cases the ``id`` member will not be part of the error "
"response, even if provided by the client."
msgstr ""

#: ../../../interop/qmp-spec.rst:203
msgid "Asynchronous events"
msgstr ""

#: ../../../interop/qmp-spec.rst:205
msgid ""
"As a result of state changes, the Server may send messages unilaterally to "
"the Client at any time, when not in the middle of any other response. They "
"are called \"asynchronous events\"."
msgstr ""

#: ../../../interop/qmp-spec.rst:209
msgid "The format of asynchronous events is:"
msgstr ""

#: ../../../interop/qmp-spec.rst:213
msgid ""
"{ \"event\": json-string, \"data\": json-object,\n"
"  \"timestamp\": { \"seconds\": json-number, \"microseconds\": json-"
"number } }"
msgstr ""

#: ../../../interop/qmp-spec.rst:218
msgid "The ``event`` member contains the event's name."
msgstr ""

#: ../../../interop/qmp-spec.rst:219
msgid ""
"The ``data`` member contains event specific data, which is defined in a per-"
"event basis. It is optional."
msgstr ""

#: ../../../interop/qmp-spec.rst:221
msgid ""
"The ``timestamp`` member contains the exact time of when the event occurred "
"in the Server. It is a fixed json-object with time in seconds and "
"microseconds relative to the Unix Epoch (1 Jan 1970); if there is a failure "
"to retrieve host time, both members of the timestamp will be set to -1."
msgstr ""

#: ../../../interop/qmp-spec.rst:227
msgid ""
"The actual asynchronous events are documented in the :doc:`qemu-qmp-ref`."
msgstr ""

#: ../../../interop/qmp-spec.rst:229
msgid ""
"Some events are rate-limited to at most one per second.  If additional "
"\"similar\" events arrive within one second, all but the last one are "
"dropped, and the last one is delayed.  \"Similar\" normally means same event "
"type."
msgstr ""

#: ../../../interop/qmp-spec.rst:235
msgid "Forcing the JSON parser into known-good state"
msgstr ""

#: ../../../interop/qmp-spec.rst:237
msgid ""
"Incomplete or invalid input can leave the server's JSON parser in a state "
"where it can't parse additional commands.  To get it back into known-good "
"state, the client should provoke a lexical error."
msgstr ""

#: ../../../interop/qmp-spec.rst:241
msgid ""
"The cleanest way to do that is sending an ASCII control character other than "
"``\\t`` (horizontal tab), ``\\r`` (carriage return), or ``\\n`` (new line)."
msgstr ""

#: ../../../interop/qmp-spec.rst:245
msgid ""
"Sadly, older versions of QEMU can fail to flag this as an error.  If a "
"client needs to deal with them, it should send a 0xFF byte."
msgstr ""

#: ../../../interop/qmp-spec.rst:249
msgid "QGA Synchronization"
msgstr ""

#: ../../../interop/qmp-spec.rst:251
msgid ""
"When a client connects to QGA over a transport lacking proper connection "
"semantics such as virtio-serial, QGA may have read partial input from a "
"previous client.  The client needs to force QGA's parser into known-good "
"state using the previous section's technique. Moreover, the client may "
"receive output a previous client didn't read. To help with skipping that "
"output, QGA provides the ``guest-sync-delimited`` command.  Refer to its "
"documentation for details."
msgstr ""

#: ../../../interop/qmp-spec.rst:262
msgid "QMP Examples"
msgstr ""

#: ../../../interop/qmp-spec.rst:264
msgid ""
"This section provides some examples of real QMP usage, in all of them ``->`` "
"marks text sent by the Client and ``<-`` marks replies by the Server."
msgstr ""

#: ../../../interop/qmp-spec.rst:267 ../../../interop/qmp-spec.rst:276
#: ../../../interop/qmp-spec.rst:285 ../../../interop/qmp-spec.rst:294
#: ../../../interop/qmp-spec.rst:303 ../../../interop/qmp-spec.rst:312
#: ../../../interop/qmp-spec.rst:321
msgid "Example"
msgstr ""

#: ../../../interop/qmp-spec.rst:269
msgid "Server greeting"
msgstr ""

#: ../../../interop/qmp-spec.rst:271
msgid ""
"<- { \"QMP\": {\"version\": {\"qemu\": {\"micro\": 0, \"minor\": 0, "
"\"major\": 3},\n"
"     \"package\": \"v3.0.0\"}, \"capabilities\": [\"oob\"] } }"
msgstr ""

#: ../../../interop/qmp-spec.rst:278
msgid "Capabilities negotiation"
msgstr ""

#: ../../../interop/qmp-spec.rst:280
msgid ""
"-> { \"execute\": \"qmp_capabilities\", \"arguments\": { \"enable\": "
"[\"oob\"] } }\n"
"<- { \"return\": {}}"
msgstr ""

#: ../../../interop/qmp-spec.rst:287
msgid "Simple 'stop' execution"
msgstr ""

#: ../../../interop/qmp-spec.rst:289
msgid ""
"-> { \"execute\": \"stop\" }\n"
"<- { \"return\": {} }"
msgstr ""

#: ../../../interop/qmp-spec.rst:296
msgid "KVM information"
msgstr ""

#: ../../../interop/qmp-spec.rst:298
msgid ""
"-> { \"execute\": \"query-kvm\", \"id\": \"example\" }\n"
"<- { \"return\": { \"enabled\": true, \"present\": true }, \"id\": "
"\"example\"}"
msgstr ""

#: ../../../interop/qmp-spec.rst:305
msgid "Parsing error"
msgstr ""

#: ../../../interop/qmp-spec.rst:307
msgid ""
"-> { \"execute\": }\n"
"<- { \"error\": { \"class\": \"GenericError\", \"desc\": \"JSON parse error, "
"expecting value\" } }"
msgstr ""

#: ../../../interop/qmp-spec.rst:314
msgid "Powerdown event"
msgstr ""

#: ../../../interop/qmp-spec.rst:316
msgid ""
"<- { \"timestamp\": { \"seconds\": 1258551470, \"microseconds\": 802384 },\n"
"    \"event\": \"POWERDOWN\" }"
msgstr ""

#: ../../../interop/qmp-spec.rst:325
msgid ""
"-> { \"exec-oob\": \"migrate-pause\", \"id\": 42 }\n"
"<- { \"id\": 42,\n"
"     \"error\": { \"class\": \"GenericError\",\n"
"      \"desc\": \"migrate-pause is currently only supported during postcopy-"
"active state\" } }"
msgstr ""

#: ../../../interop/qmp-spec.rst:334
msgid "Capabilities Negotiation"
msgstr ""

#: ../../../interop/qmp-spec.rst:336
msgid ""
"When a Client successfully establishes a connection, the Server is in "
"Capabilities Negotiation mode."
msgstr ""

#: ../../../interop/qmp-spec.rst:339
msgid ""
"In this mode only the ``qmp_capabilities`` command is allowed to run; all "
"other commands will return the ``CommandNotFound`` error. Asynchronous "
"messages are not delivered either."
msgstr ""

#: ../../../interop/qmp-spec.rst:343
msgid ""
"Clients should use the ``qmp_capabilities`` command to enable capabilities "
"advertised in the `Server Greeting`_ which they support."
msgstr ""

#: ../../../interop/qmp-spec.rst:346
msgid ""
"When the ``qmp_capabilities`` command is issued, and if it does not return "
"an error, the Server enters Command mode where capabilities changes take "
"effect, all commands (except ``qmp_capabilities``) are allowed and "
"asynchronous messages are delivered."
msgstr ""

#: ../../../interop/qmp-spec.rst:352
msgid "Compatibility Considerations"
msgstr ""

#: ../../../interop/qmp-spec.rst:354
msgid ""
"All protocol changes or new features which modify the protocol format in an "
"incompatible way are disabled by default and will be advertised by the "
"capabilities array (in the `Server Greeting`_). Thus, Clients can check that "
"array and enable the capabilities they support."
msgstr ""

#: ../../../interop/qmp-spec.rst:359
msgid ""
"The QMP Server performs a type check on the arguments to a command.  It "
"generates an error if a value does not have the expected type for its key, "
"or if it does not understand a key that the Client included.  The strictness "
"of the Server catches wrong assumptions of Clients about the Server's "
"schema.  Clients can assume that, when such validation errors occur, they "
"will be reported before the command generated any side effect."
msgstr ""

#: ../../../interop/qmp-spec.rst:367
msgid "However, Clients must not assume any particular:"
msgstr ""

#: ../../../interop/qmp-spec.rst:369
msgid "Length of json-arrays"
msgstr ""

#: ../../../interop/qmp-spec.rst:370
msgid ""
"Size of json-objects; in particular, future versions of QEMU may add new "
"keys and Clients should be able to ignore them"
msgstr ""

#: ../../../interop/qmp-spec.rst:372
msgid "Order of json-object members or json-array elements"
msgstr ""

#: ../../../interop/qmp-spec.rst:373
msgid ""
"Amount of errors generated by a command, that is, new errors can be added to "
"any existing command in newer versions of the Server"
msgstr ""

#: ../../../interop/qmp-spec.rst:376
msgid ""
"Any command or member name beginning with ``x-`` is deemed experimental, and "
"may be withdrawn or changed in an incompatible manner in a future release."
msgstr ""

#: ../../../interop/qmp-spec.rst:380
msgid ""
"Of course, the Server does guarantee to send valid JSON.  But apart from "
"this, a Client should be \"conservative in what they send, and liberal in "
"what they accept\"."
msgstr ""

#: ../../../interop/qmp-spec.rst:385
msgid "Downstream extension of QMP"
msgstr ""

#: ../../../interop/qmp-spec.rst:387
msgid ""
"We recommend that downstream consumers of QEMU do *not* modify QMP. "
"Management tools should be able to support both upstream and downstream "
"versions of QMP without special logic, and downstream extensions are "
"inherently at odds with that."
msgstr ""

#: ../../../interop/qmp-spec.rst:392
msgid ""
"However, we recognize that it is sometimes impossible for downstreams to "
"avoid modifying QMP.  Both upstream and downstream need to take care to "
"preserve long-term compatibility and interoperability."
msgstr ""

#: ../../../interop/qmp-spec.rst:396
msgid ""
"To help with that, QMP reserves JSON object member names beginning with "
"``__`` (double underscore) for downstream use (\"downstream names\").  This "
"means upstream will never use any downstream names for its commands, "
"arguments, errors, asynchronous events, and so forth."
msgstr ""

#: ../../../interop/qmp-spec.rst:401
msgid ""
"Any new names downstream wishes to add must begin with ``__``.  To ensure "
"compatibility with other downstreams, it is strongly recommended that you "
"prefix your downstream names with ``__RFQDN_`` where RFQDN is a valid, "
"reverse fully qualified domain name which you control.  For example, a qemu-"
"kvm specific monitor command would be:"
msgstr ""

#: ../../../interop/qmp-spec.rst:409
msgid "(qemu) __org.linux-kvm_enable_irqchip"
msgstr ""

#: ../../../interop/qmp-spec.rst:411
msgid ""
"Downstream must not change the `server greeting`_ other than to offer "
"additional capabilities.  But see below for why even that is discouraged."
msgstr ""

#: ../../../interop/qmp-spec.rst:415
msgid ""
"The section `Compatibility Considerations`_ applies to downstream as well as "
"to upstream, obviously.  It follows that downstream must behave exactly like "
"upstream for any input not containing members with downstream names "
"(\"downstream members\"), except it may add members with downstream names to "
"its output."
msgstr ""

#: ../../../interop/qmp-spec.rst:421
msgid ""
"Thus, a client should not be able to distinguish downstream from upstream as "
"long as it doesn't send input with downstream members, and properly ignores "
"any downstream members in the output it receives."
msgstr ""

#: ../../../interop/qmp-spec.rst:425
msgid "Advice on downstream modifications:"
msgstr ""

#: ../../../interop/qmp-spec.rst:427
msgid ""
"Introducing new commands is okay.  If you want to extend an existing "
"command, consider introducing a new one with the new behaviour instead."
msgstr ""

#: ../../../interop/qmp-spec.rst:431
msgid ""
"Introducing new asynchronous messages is okay.  If you want to extend an "
"existing message, consider adding a new one instead."
msgstr ""

#: ../../../interop/qmp-spec.rst:434
msgid ""
"Introducing new errors for use in new commands is okay.  Adding new errors "
"to existing commands counts as extension, so 1. applies."
msgstr ""

#: ../../../interop/qmp-spec.rst:437
msgid ""
"New capabilities are strongly discouraged.  Capabilities are for evolving "
"the basic protocol, and multiple diverging basic protocol dialects are most "
"undesirable."
msgstr ""
