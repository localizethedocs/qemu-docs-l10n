# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/kconfig.rst:5
msgid "QEMU and Kconfig"
msgstr ""

#: ../../../devel/kconfig.rst:7
msgid ""
"QEMU is a very versatile emulator; it can be built for a variety of targets, "
"where each target can emulate various boards and at the same time different "
"targets can share large amounts of code.  For example, a POWER and an x86 "
"board can run the same code to emulate a PCI network card, even though the "
"boards use different PCI host bridges, and they can run the same code to "
"emulate a SCSI disk while using different SCSI adapters.  Arm, s390 and x86 "
"boards can all present a virtio-blk disk to their guests, but with three "
"different virtio guest interfaces."
msgstr ""

#: ../../../devel/kconfig.rst:16
msgid ""
"Each QEMU target enables a subset of the boards, devices and buses that are "
"included in QEMU's source code.  As a result, each QEMU executable only "
"links a small subset of the files that form QEMU's source code; anything "
"that is not needed to support a particular target is culled."
msgstr ""

#: ../../../devel/kconfig.rst:21
msgid ""
"QEMU uses a simple domain-specific language to describe the dependencies "
"between components.  This is useful for two reasons:"
msgstr ""

#: ../../../devel/kconfig.rst:24
msgid ""
"new targets and boards can be added without knowing in detail the "
"architecture of the hardware emulation subsystems.  Boards only have to list "
"the components they need, and the compiled executable will include all the "
"required dependencies and all the devices that the user can add to that "
"board;"
msgstr ""

#: ../../../devel/kconfig.rst:30
msgid ""
"users can easily build reduced versions of QEMU that support only a subset "
"of boards or devices.  For example, by default most targets will include all "
"emulated PCI devices that QEMU supports, but the build process is "
"configurable and it is easy to drop unnecessary (or otherwise unwanted) code "
"to make a leaner binary."
msgstr ""

#: ../../../devel/kconfig.rst:36
msgid ""
"This domain-specific language is based on the Kconfig language that "
"originated in the Linux kernel, though it was heavily simplified and the "
"handling of dependencies is stricter in QEMU."
msgstr ""

#: ../../../devel/kconfig.rst:40
msgid ""
"Unlike Linux, there is no user interface to edit the configuration, which is "
"instead specified in per-target files under the ``configs/`` directory of "
"the QEMU source tree.  This is because, unlike Linux, configuration and "
"dependencies can be treated as a black box when building QEMU; the default "
"configuration that QEMU ships with should be okay in almost all cases."
msgstr ""

#: ../../../devel/kconfig.rst:48
msgid "The Kconfig language"
msgstr ""

#: ../../../devel/kconfig.rst:50
msgid ""
"Kconfig defines configurable components in files named ``hw/*/Kconfig``. "
"Note that configurable components are _not_ visible in C code as "
"preprocessor symbols; they are only visible in the Makefile.  Each "
"configurable component defines a Makefile variable whose name starts with "
"``CONFIG_``."
msgstr ""

#: ../../../devel/kconfig.rst:55
msgid ""
"All elements have boolean (true/false) type; truth is written as ``y``, "
"while falsehood is written ``n``.  They are defined in a Kconfig stanza like "
"the following::"
msgstr ""

#: ../../../devel/kconfig.rst:59
msgid ""
"config ARM_VIRT\n"
"   bool\n"
"   imply PCI_DEVICES\n"
"   imply VFIO_AMD_XGBE\n"
"   imply VFIO_XGMAC\n"
"   select A15MPCORE\n"
"   select ACPI\n"
"   select ARM_SMMUV3"
msgstr ""

#: ../../../devel/kconfig.rst:68
msgid ""
"The ``config`` keyword introduces a new configuration element.  In the "
"example above, Makefiles will have access to a variable named "
"``CONFIG_ARM_VIRT``, with value ``y`` or ``n`` (respectively for boolean "
"true and false)."
msgstr ""

#: ../../../devel/kconfig.rst:72
msgid ""
"Boolean expressions can be used within the language, whenever ``<expr>`` is "
"written in the remainder of this section.  The ``&&``, ``||`` and ``!`` "
"operators respectively denote conjunction (AND), disjunction (OR) and "
"negation (NOT)."
msgstr ""

#: ../../../devel/kconfig.rst:77
msgid ""
"The ``bool`` data type declaration is optional, but it is suggested to "
"include it for clarity and future-proofing.  After ``bool`` the following "
"directives can be included:"
msgstr ""

#: ../../../devel/kconfig.rst:81
msgid "**dependencies**: ``depends on <expr>``"
msgstr ""

#: ../../../devel/kconfig.rst:83
msgid ""
"This defines a dependency for this configurable element. Dependencies "
"evaluate an expression and force the value of the variable to false if the "
"expression is false."
msgstr ""

#: ../../../devel/kconfig.rst:87
msgid "**reverse dependencies**: ``select <symbol> [if <expr>]``"
msgstr ""

#: ../../../devel/kconfig.rst:89
msgid ""
"While ``depends on`` can force a symbol to false, reverse dependencies can "
"be used to force another symbol to true.  In the following example, "
"``CONFIG_BAZ`` will be true whenever ``CONFIG_FOO`` is true::"
msgstr ""

#: ../../../devel/kconfig.rst:93
msgid ""
"config FOO\n"
"  select BAZ"
msgstr ""

#: ../../../devel/kconfig.rst:96
msgid ""
"The optional expression will prevent ``select`` from having any effect "
"unless it is true."
msgstr ""

#: ../../../devel/kconfig.rst:99
msgid ""
"Note that unlike Linux's Kconfig implementation, QEMU will detect "
"contradictions between ``depends on`` and ``select`` statements and prevent "
"you from building such a configuration."
msgstr ""

#: ../../../devel/kconfig.rst:103
msgid "**default value**: ``default <value> [if <expr>]``"
msgstr ""

#: ../../../devel/kconfig.rst:105
msgid ""
"Default values are assigned to the config symbol if no other value was set "
"by the user via ``configs/*.mak`` files, and only if ``select`` or ``depends "
"on`` directives do not force the value to true or false respectively.  "
"``<value>`` can be ``y`` or ``n``; it cannot be an arbitrary Boolean "
"expression.  However, a condition for applying the default value can be "
"added with ``if``."
msgstr ""

#: ../../../devel/kconfig.rst:112
msgid ""
"A configuration element can have any number of default values (usually, if "
"more than one default is present, they will have different conditions). If "
"multiple default values satisfy their condition, only the first defined one "
"is active."
msgstr ""

#: ../../../devel/kconfig.rst:117
msgid ""
"**reverse default** (weak reverse dependency): ``imply <symbol> [if <expr>]``"
msgstr ""

#: ../../../devel/kconfig.rst:119
msgid ""
"This is similar to ``select`` as it applies a lower limit of ``y`` to "
"another symbol.  However, the lower limit is only a default and the "
"\"implied\" symbol's value may still be set to ``n`` from a ``configs/*."
"mak`` files.  The following two examples are equivalent::"
msgstr ""

#: ../../../devel/kconfig.rst:125
msgid ""
"config FOO\n"
"  bool\n"
"  imply BAZ\n"
"\n"
"config BAZ\n"
"  bool\n"
"  default y if FOO"
msgstr ""

#: ../../../devel/kconfig.rst:133
msgid "The next section explains where to use ``imply`` or ``default y``."
msgstr ""

#: ../../../devel/kconfig.rst:136
msgid "Guidelines for writing Kconfig files"
msgstr ""

#: ../../../devel/kconfig.rst:138
msgid ""
"Configurable elements in QEMU fall under five broad groups.  Each group "
"declares its dependencies in different ways:"
msgstr ""

#: ../../../devel/kconfig.rst:141
msgid "**subsystems**, of which **buses** are a special case"
msgstr ""

#: ../../../devel/kconfig.rst:143 ../../../devel/kconfig.rst:158
#: ../../../devel/kconfig.rst:184 ../../../devel/kconfig.rst:210
#: ../../../devel/kconfig.rst:246
msgid "Example::"
msgstr ""

#: ../../../devel/kconfig.rst:145
msgid ""
"config SCSI\n"
"  bool"
msgstr ""

#: ../../../devel/kconfig.rst:148
msgid ""
"Subsystems always default to false (they have no ``default`` directive) and "
"are never visible in ``configs/*.mak`` files.  It's up to other symbols to "
"``select`` whatever subsystems they require."
msgstr ""

#: ../../../devel/kconfig.rst:152
msgid ""
"They sometimes have ``select`` directives to bring in other required "
"subsystems or buses.  For example, ``AUX`` (the DisplayPort auxiliary "
"channel \"bus\") selects ``I2C`` because it can act as an I2C master too."
msgstr ""

#: ../../../devel/kconfig.rst:156
msgid "**devices**"
msgstr ""

#: ../../../devel/kconfig.rst:160
msgid ""
"config MEGASAS_SCSI_PCI\n"
"  bool\n"
"  default y if PCI_DEVICES\n"
"  depends on PCI\n"
"  select SCSI"
msgstr ""

#: ../../../devel/kconfig.rst:166
msgid ""
"Devices are the most complex of the five.  They can have a variety of "
"directives that cooperate so that a default configuration includes all the "
"devices that can be accessed from QEMU."
msgstr ""

#: ../../../devel/kconfig.rst:170
msgid ""
"Devices *depend on* the bus that they lie on, for example a PCI device would "
"specify ``depends on PCI``.  An MMIO device will likely have no ``depends "
"on`` directive.  Devices also *select* the buses that the device provides, "
"for example a SCSI adapter would specify ``select SCSI``.  Finally, devices "
"are usually ``default y`` if and only if they have at least one ``depends "
"on``; the default could be conditional on a device group."
msgstr ""

#: ../../../devel/kconfig.rst:178
msgid ""
"Devices also select any optional subsystem that they use; for example a "
"video card might specify ``select EDID`` if it needs to build EDID "
"information and publish it to the guest."
msgstr ""

#: ../../../devel/kconfig.rst:182
msgid "**device groups**"
msgstr ""

#: ../../../devel/kconfig.rst:186
msgid ""
"config PCI_DEVICES\n"
"  bool"
msgstr ""

#: ../../../devel/kconfig.rst:189
msgid ""
"Device groups provide a convenient mechanism to enable/disable many devices "
"in one go.  This is useful when a set of devices is likely to be enabled/"
"disabled by several targets.  Device groups usually need no directive and "
"are not used in the Makefile either; they only appear as conditions for "
"``default y`` directives."
msgstr ""

#: ../../../devel/kconfig.rst:195
msgid ""
"QEMU currently has three device groups, ``PCI_DEVICES``, ``I2C_DEVICES``, "
"and ``TEST_DEVICES``.  PCI devices usually have a ``default y if "
"PCI_DEVICES`` directive rather than just ``default y``.  This lets some "
"boards (notably s390) easily support a subset of PCI devices, for example "
"only VFIO (passthrough) and virtio-pci devices. ``I2C_DEVICES`` is similar "
"to ``PCI_DEVICES``. It contains i2c devices that users might reasonably want "
"to plug in to an i2c bus on any board (and not ones which are very board-"
"specific or that need to be wired up in a way that can't be done on the "
"command line). ``TEST_DEVICES`` instead is used for devices that are rarely "
"used on production virtual machines, but provide useful hooks to test QEMU "
"or KVM."
msgstr ""

#: ../../../devel/kconfig.rst:208
msgid "**boards**"
msgstr ""

#: ../../../devel/kconfig.rst:212
msgid ""
"config SUN4M\n"
"  bool\n"
"  default y\n"
"  depends on SPARC && !SPARC64\n"
"  imply TCX\n"
"  imply CG3\n"
"  select CS4231\n"
"  select ECCMEMCTL\n"
"  select EMPTY_SLOT\n"
"  select ESCC\n"
"  select ESP\n"
"  select FDC\n"
"  select SLAVIO\n"
"  select LANCE\n"
"  select M48T59\n"
"  select STP2000"
msgstr ""

#: ../../../devel/kconfig.rst:229
msgid ""
"Boards specify their constituent devices using ``imply`` and ``select`` "
"directives.  A device should be listed under ``select`` if the board cannot "
"be started at all without it.  It should be listed under ``imply`` if "
"(depending on the QEMU command line) the board may or may not be started "
"without it.  Boards default to true, but also have a ``depends on`` clause "
"to limit them to the appropriate targets. For some targets, not all boards "
"may be supported by hardware virtualization, in which case they also depend "
"on the ``TCG`` symbol, Other symbols that are commonly used as dependencies "
"for boards include libraries (such as ``FDT``) or ``TARGET_BIG_ENDIAN`` "
"(possibly negated)."
msgstr ""

#: ../../../devel/kconfig.rst:241
msgid ""
"Boards are listed for convenience in the ``configs/*.mak`` for the target "
"they apply to."
msgstr ""

#: ../../../devel/kconfig.rst:244
msgid "**internal elements**"
msgstr ""

#: ../../../devel/kconfig.rst:248
msgid ""
"config ECCMEMCTL\n"
"  bool\n"
"  select ECC"
msgstr ""

#: ../../../devel/kconfig.rst:252
msgid ""
"Internal elements group code that is useful in several boards or devices.  "
"They are usually enabled with ``select`` and in turn select other elements; "
"they are never visible in ``configs/*.mak`` files, and often not even in the "
"Makefile."
msgstr ""

#: ../../../devel/kconfig.rst:258
msgid "Writing and modifying default configurations"
msgstr ""

#: ../../../devel/kconfig.rst:260
msgid ""
"In addition to the Kconfig files under hw/, each target also includes a file "
"called ``configs/TARGETNAME-softmmu.mak``.  These files initialize some "
"Kconfig variables to non-default values and provide the starting point to "
"turn on devices and subsystems."
msgstr ""

#: ../../../devel/kconfig.rst:265
msgid "A file in ``configs/`` looks like the following example::"
msgstr ""

#: ../../../devel/kconfig.rst:267
msgid ""
"# Default configuration for alpha-softmmu\n"
"\n"
"# Uncomment the following lines to disable these optional devices:\n"
"#\n"
"#CONFIG_PCI_DEVICES=n\n"
"#CONFIG_TEST_DEVICES=n\n"
"\n"
"# Boards:\n"
"#\n"
"CONFIG_DP264=y"
msgstr ""

#: ../../../devel/kconfig.rst:278
msgid ""
"The first part, consisting of commented-out ``=n`` assignments, tells the "
"user which devices or device groups are implied by the boards. The second "
"part, consisting of ``=y`` assignments, tells the user which boards are "
"supported by the target.  The user will typically modify the default "
"configuration by uncommenting lines in the first group, or commenting out "
"lines in the second group."
msgstr ""

#: ../../../devel/kconfig.rst:285
msgid ""
"It is also possible to run QEMU's configure script with the ``--without-"
"default-devices`` option.  When this is done, everything defaults to ``n`` "
"unless it is ``select``\\ ed or explicitly switched on in the ``.mak`` "
"files.  In other words, ``default`` and ``imply`` directives are disabled.  "
"When QEMU is built with this option, the user will probably want to change "
"some lines in the first group, for example like this::"
msgstr ""

#: ../../../devel/kconfig.rst:292
msgid ""
"CONFIG_PCI_DEVICES=y\n"
"#CONFIG_TEST_DEVICES=n"
msgstr ""

#: ../../../devel/kconfig.rst:295
msgid ""
"and/or pick a subset of the devices in those device groups.  Without further "
"modifications to ``configs/devices/``, a system emulator built without "
"default devices might not do much more than start an empty machine, and even "
"then only if ``--nodefaults`` is specified on the command line.  Starting a "
"VM *without* ``--nodefaults`` is allowed to fail, but should never abort.  "
"Failures in ``make check`` with ``--without-default-devices`` are considered "
"bugs in the test code: the tests should either use ``--nodefaults``, and "
"should be skipped if a necessary device is not present in the build.  Such "
"failures should not be worked around with ``select`` directives."
msgstr ""

#: ../../../devel/kconfig.rst:306
msgid ""
"Right now there is no single place that lists all the optional devices for "
"``CONFIG_PCI_DEVICES`` and ``CONFIG_TEST_DEVICES``.  In the future, we "
"expect that ``.mak`` files will be automatically generated, so that they "
"will include all these symbols and some help text on what they do."
msgstr ""

#: ../../../devel/kconfig.rst:312
msgid "``Kconfig.host``"
msgstr ""

#: ../../../devel/kconfig.rst:314
msgid ""
"In some special cases, a configurable element depends on host features that "
"are detected by QEMU's configure or ``meson.build`` scripts; for example "
"some devices depend on the availability of KVM or on the presence of a "
"library on the host."
msgstr ""

#: ../../../devel/kconfig.rst:319
msgid "These symbols should be listed in ``Kconfig.host`` like this::"
msgstr ""

#: ../../../devel/kconfig.rst:321
msgid ""
"config TPM\n"
"  bool"
msgstr ""

#: ../../../devel/kconfig.rst:324
msgid ""
"and also listed as follows in the top-level meson.build's host_kconfig "
"variable::"
msgstr ""

#: ../../../devel/kconfig.rst:327
msgid ""
"host_kconfig = \\\n"
"  (have_tpm ? ['CONFIG_TPM=y'] : []) + \\\n"
"  (host_os == 'linux' ? ['CONFIG_LINUX=y'] : []) + \\\n"
"  (have_ivshmem ? ['CONFIG_IVSHMEM=y'] : []) + \\\n"
"  ..."
msgstr ""
