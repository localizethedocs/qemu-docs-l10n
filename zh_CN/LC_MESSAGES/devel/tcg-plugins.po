# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/tcg-plugins.rst:8
msgid "QEMU TCG Plugins"
msgstr ""

#: ../../../devel/tcg-plugins.rst:10
msgid ""
"QEMU TCG plugins provide a way for users to run experiments taking advantage "
"of the total system control emulation can have over a guest. It provides a "
"mechanism for plugins to subscribe to events during translation and "
"execution and optionally callback into the plugin during these events. TCG "
"plugins are unable to change the system state only monitor it passively. "
"However they can do this down to an individual instruction granularity "
"including potentially subscribing to all load and store operations."
msgstr ""

#: ../../../devel/tcg-plugins.rst:20
msgid "API Stability"
msgstr ""

#: ../../../devel/tcg-plugins.rst:22
msgid ""
"This is a new feature for QEMU and it does allow people to develop out-of-"
"tree plugins that can be dynamically linked into a running QEMU process. "
"However the project reserves the right to change or break the API should it "
"need to do so. The best way to avoid this is to submit your plugin upstream "
"so they can be updated if/when the API changes."
msgstr ""

#: ../../../devel/tcg-plugins.rst:29
msgid "API versioning"
msgstr ""

#: ../../../devel/tcg-plugins.rst:31
msgid ""
"All plugins need to declare a symbol which exports the plugin API version "
"they were built against. This can be done simply by::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:34
msgid "QEMU_PLUGIN_EXPORT int qemu_plugin_version = QEMU_PLUGIN_VERSION;"
msgstr ""

#: ../../../devel/tcg-plugins.rst:36
msgid ""
"The core code will refuse to load a plugin that doesn't export a "
"`qemu_plugin_version` symbol or if plugin version is outside of QEMU's "
"supported range of API versions."
msgstr ""

#: ../../../devel/tcg-plugins.rst:40
msgid ""
"Additionally the `qemu_info_t` structure which is passed to the "
"`qemu_plugin_install` method of a plugin will detail the minimum and current "
"API versions supported by QEMU. The API version will be incremented if new "
"APIs are added. The minimum API version will be incremented if existing APIs "
"are changed or removed."
msgstr ""

#: ../../../devel/tcg-plugins.rst:47
msgid "Exposure of QEMU internals"
msgstr ""

#: ../../../devel/tcg-plugins.rst:49
msgid ""
"The plugin architecture actively avoids leaking implementation details about "
"how QEMU's translation works to the plugins. While there are conceptions "
"such as translation time and translation blocks the details are opaque to "
"plugins. The plugin is able to query select details of instructions and "
"system configuration only through the exported *qemu_plugin* functions."
msgstr ""

#: ../../../devel/tcg-plugins.rst:57
msgid "Query Handle Lifetime"
msgstr ""

#: ../../../devel/tcg-plugins.rst:59
msgid ""
"Each callback provides an opaque anonymous information handle which can "
"usually be further queried to find out information about a translation, "
"instruction or operation. The handles themselves are only valid during the "
"lifetime of the callback so it is important that any information that is "
"needed is extracted during the callback and saved by the plugin."
msgstr ""

#: ../../../devel/tcg-plugins.rst:67
msgid "Usage"
msgstr ""

#: ../../../devel/tcg-plugins.rst:69
msgid "The QEMU binary needs to be compiled for plugin support::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:71
msgid "configure --enable-plugins"
msgstr ""

#: ../../../devel/tcg-plugins.rst:73
msgid ""
"Once built a program can be run with multiple plugins loaded each with their "
"own arguments::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:76
msgid ""
"$QEMU $OTHER_QEMU_ARGS \\\n"
"    -plugin tests/plugin/libhowvec.so,arg=inline,arg=hint \\\n"
"    -plugin tests/plugin/libhotblocks.so"
msgstr ""

#: ../../../devel/tcg-plugins.rst:80
msgid ""
"Arguments are plugin specific and can be used to modify their behaviour. In "
"this case the howvec plugin is being asked to use inline ops to count and "
"break down the hint instructions by type."
msgstr ""

#: ../../../devel/tcg-plugins.rst:85
msgid "Plugin Life cycle"
msgstr ""

#: ../../../devel/tcg-plugins.rst:87
msgid ""
"First the plugin is loaded and the public qemu_plugin_install function is "
"called. The plugin will then register callbacks for various plugin events. "
"Generally plugins will register a handler for the *atexit* if they want to "
"dump a summary of collected information once the program/system has finished "
"running."
msgstr ""

#: ../../../devel/tcg-plugins.rst:93
msgid ""
"When a registered event occurs the plugin callback is invoked. The callbacks "
"may provide additional information. In the case of a translation event the "
"plugin has an option to enumerate the instructions in a block of "
"instructions and optionally register callbacks to some or all instructions "
"when they are executed."
msgstr ""

#: ../../../devel/tcg-plugins.rst:99
msgid ""
"There is also a facility to add an inline event where code to increment a "
"counter can be directly inlined with the translation. Currently only a "
"simple increment is supported. This is not atomic so can miss counts. If you "
"want absolute precision you should use a callback which can then ensure "
"atomicity itself."
msgstr ""

#: ../../../devel/tcg-plugins.rst:105
msgid ""
"Finally when QEMU exits all the registered *atexit* callbacks are invoked."
msgstr ""

#: ../../../devel/tcg-plugins.rst:109
msgid "Internals"
msgstr ""

#: ../../../devel/tcg-plugins.rst:112
msgid "Locking"
msgstr ""

#: ../../../devel/tcg-plugins.rst:114
msgid ""
"We have to ensure we cannot deadlock, particularly under MTTCG. For this we "
"acquire a lock when called from plugin code. We also keep the list of "
"callbacks under RCU so that we do not have to hold the lock when calling the "
"callbacks. This is also for performance, since some callbacks (e.g. memory "
"access callbacks) might be called very frequently."
msgstr ""

#: ../../../devel/tcg-plugins.rst:121
msgid ""
"A consequence of this is that we keep our own list of CPUs, so that we do "
"not have to worry about locking order wrt cpu_list_lock."
msgstr ""

#: ../../../devel/tcg-plugins.rst:123
msgid ""
"Use a recursive lock, since we can get registration calls from callbacks."
msgstr ""

#: ../../../devel/tcg-plugins.rst:126
msgid ""
"As a result registering/unregistering callbacks is \"slow\", since it takes "
"a lock. But this is very infrequent; we want performance when calling (or "
"not calling) callbacks, not when registering them. Using RCU is great for "
"this."
msgstr ""

#: ../../../devel/tcg-plugins.rst:131
msgid ""
"We support the uninstallation of a plugin at any time (e.g. from plugin "
"callbacks). This allows plugins to remove themselves if they no longer want "
"to instrument the code. This operation is asynchronous which means callbacks "
"may still occur after the uninstall operation is requested. The plugin isn't "
"completely uninstalled until the safe work has executed while all vCPUs are "
"quiescent."
msgstr ""

#: ../../../devel/tcg-plugins.rst:139
msgid "Example Plugins"
msgstr ""

#: ../../../devel/tcg-plugins.rst:141
msgid ""
"There are a number of plugins included with QEMU and you are encouraged to "
"contribute your own plugins plugins upstream. There is a `contrib/plugins` "
"directory where they can go."
msgstr ""

#: ../../../devel/tcg-plugins.rst:145
msgid "tests/plugins"
msgstr ""

#: ../../../devel/tcg-plugins.rst:147
msgid ""
"These are some basic plugins that are used to test and exercise the API "
"during the `make check-tcg` target."
msgstr ""

#: ../../../devel/tcg-plugins.rst:150
msgid "contrib/plugins/hotblocks.c"
msgstr ""

#: ../../../devel/tcg-plugins.rst:152
msgid ""
"The hotblocks plugin allows you to examine the where hot paths of execution "
"are in your program. Once the program has finished you will get a sorted "
"list of blocks reporting the starting PC, translation count, number of "
"instructions and execution count. This will work best with linux-user "
"execution as system emulation tends to generate re-translations as blocks "
"from different programs get swapped in and out of system memory."
msgstr ""

#: ../../../devel/tcg-plugins.rst:160
msgid ""
"If your program is single-threaded you can use the `inline` option for "
"slightly faster (but not thread safe) counters."
msgstr ""

#: ../../../devel/tcg-plugins.rst:163
msgid "Example::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:165
msgid ""
"./aarch64-linux-user/qemu-aarch64 \\\n"
"  -plugin contrib/plugins/libhotblocks.so -d plugin \\\n"
"  ./tests/tcg/aarch64-linux-user/sha1\n"
"SHA1=15dd99a1991e0b3826fede3deffc1feba42278e6\n"
"collected 903 entries in the hash table\n"
"pc, tcount, icount, ecount\n"
"0x0000000041ed10, 1, 5, 66087\n"
"0x000000004002b0, 1, 4, 66087\n"
"..."
msgstr ""

#: ../../../devel/tcg-plugins.rst:175
msgid "contrib/plugins/hotpages.c"
msgstr ""

#: ../../../devel/tcg-plugins.rst:177
msgid "Similar to hotblocks but this time tracks memory accesses::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:179
msgid ""
"./aarch64-linux-user/qemu-aarch64 \\\n"
"  -plugin contrib/plugins/libhotpages.so -d plugin \\\n"
"  ./tests/tcg/aarch64-linux-user/sha1\n"
"SHA1=15dd99a1991e0b3826fede3deffc1feba42278e6\n"
"Addr, RCPUs, Reads, WCPUs, Writes\n"
"0x000055007fe000, 0x0001, 31747952, 0x0001, 8835161\n"
"0x000055007ff000, 0x0001, 29001054, 0x0001, 8780625\n"
"0x00005500800000, 0x0001, 687465, 0x0001, 335857\n"
"0x0000000048b000, 0x0001, 130594, 0x0001, 355\n"
"0x0000000048a000, 0x0001, 1826, 0x0001, 11"
msgstr ""

#: ../../../devel/tcg-plugins.rst:190
msgid "contrib/plugins/howvec.c"
msgstr ""

#: ../../../devel/tcg-plugins.rst:192
msgid ""
"This is an instruction classifier so can be used to count different types of "
"instructions. It has a number of options to refine which get counted. You "
"can give an argument for a class of instructions to break it down fully, so "
"for example to see all the system registers accesses::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:198
msgid ""
"./aarch64-softmmu/qemu-system-aarch64 $(QEMU_ARGS) \\\n"
"  -append \"root=/dev/sda2 systemd.unit=benchmark.service\" \\\n"
"  -smp 4 -plugin ./contrib/plugins/libhowvec.so,arg=sreg -d plugin"
msgstr ""

#: ../../../devel/tcg-plugins.rst:202
msgid "which will lead to a sorted list after the class breakdown::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:204
msgid ""
"Instruction Classes:\n"
"Class:   UDEF                   not counted\n"
"Class:   SVE                    (68 hits)\n"
"Class:   PCrel addr             (47789483 hits)\n"
"Class:   Add/Sub (imm)          (192817388 hits)\n"
"Class:   Logical (imm)          (93852565 hits)\n"
"Class:   Move Wide (imm)        (76398116 hits)\n"
"Class:   Bitfield               (44706084 hits)\n"
"Class:   Extract                (5499257 hits)\n"
"Class:   Cond Branch (imm)      (147202932 hits)\n"
"Class:   Exception Gen          (193581 hits)\n"
"Class:     NOP                  not counted\n"
"Class:   Hints                  (6652291 hits)\n"
"Class:   Barriers               (8001661 hits)\n"
"Class:   PSTATE                 (1801695 hits)\n"
"Class:   System Insn            (6385349 hits)\n"
"Class:   System Reg             counted individually\n"
"Class:   Branch (reg)           (69497127 hits)\n"
"Class:   Branch (imm)           (84393665 hits)\n"
"Class:   Cmp & Branch           (110929659 hits)\n"
"Class:   Tst & Branch           (44681442 hits)\n"
"Class:   AdvSimd ldstmult       (736 hits)\n"
"Class:   ldst excl              (9098783 hits)\n"
"Class:   Load Reg (lit)         (87189424 hits)\n"
"Class:   ldst noalloc pair      (3264433 hits)\n"
"Class:   ldst pair              (412526434 hits)\n"
"Class:   ldst reg (imm)         (314734576 hits)\n"
"Class: Loads & Stores           (2117774 hits)\n"
"Class: Data Proc Reg            (223519077 hits)\n"
"Class: Scalar FP                (31657954 hits)\n"
"Individual Instructions:\n"
"Instr: mrs x0, sp_el0           (2682661 hits)  (op=0xd5384100/  System "
"Reg)\n"
"Instr: mrs x1, tpidr_el2        (1789339 hits)  (op=0xd53cd041/  System "
"Reg)\n"
"Instr: mrs x2, tpidr_el2        (1513494 hits)  (op=0xd53cd042/  System "
"Reg)\n"
"Instr: mrs x0, tpidr_el2        (1490823 hits)  (op=0xd53cd040/  System "
"Reg)\n"
"Instr: mrs x1, sp_el0           (933793 hits)   (op=0xd5384101/  System "
"Reg)\n"
"Instr: mrs x2, sp_el0           (699516 hits)   (op=0xd5384102/  System "
"Reg)\n"
"Instr: mrs x4, tpidr_el2        (528437 hits)   (op=0xd53cd044/  System "
"Reg)\n"
"Instr: mrs x30, ttbr1_el1       (480776 hits)   (op=0xd538203e/  System "
"Reg)\n"
"Instr: msr ttbr1_el1, x30       (480713 hits)   (op=0xd518203e/  System "
"Reg)\n"
"Instr: msr vbar_el1, x30        (480671 hits)   (op=0xd518c01e/  System "
"Reg)\n"
"..."
msgstr ""

#: ../../../devel/tcg-plugins.rst:247
msgid ""
"To find the argument shorthand for the class you need to examine the source "
"code of the plugin at the moment, specifically the `*opt` argument in the "
"InsnClassExecCount tables."
msgstr ""

#: ../../../devel/tcg-plugins.rst:251
msgid "contrib/plugins/lockstep.c"
msgstr ""

#: ../../../devel/tcg-plugins.rst:253
msgid ""
"This is a debugging tool for developers who want to find out when and where "
"execution diverges after a subtle change to TCG code generation. It is not "
"an exact science and results are likely to be mixed once asynchronous events "
"are introduced. While the use of -icount can introduce determinism to the "
"execution flow it doesn't always follow the translation sequence will be "
"exactly the same. Typically this is caused by a timer firing to service the "
"GUI causing a block to end early. However in some cases it has proved to be "
"useful in pointing people at roughly where execution diverges. The only "
"argument you need for the plugin is a path for the socket the two instances "
"will communicate over::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:266
msgid ""
"./sparc-softmmu/qemu-system-sparc -monitor none -parallel none \\\n"
"  -net none -M SS-20 -m 256 -kernel day11/zImage.elf \\\n"
"  -plugin ./contrib/plugins/liblockstep.so,arg=lockstep-sparc.sock \\\n"
"-d plugin,nochain"
msgstr ""

#: ../../../devel/tcg-plugins.rst:271
msgid "which will eventually report::"
msgstr ""

#: ../../../devel/tcg-plugins.rst:273
msgid ""
"qemu-system-sparc: warning: nic lance.0 has no peer\n"
"@ 0x000000ffd06678 vs 0x000000ffd001e0 (2/1 since last)\n"
"@ 0x000000ffd07d9c vs 0x000000ffd06678 (3/1 since last)\n"
"Δ insn_count @ 0x000000ffd07d9c (809900609) vs 0x000000ffd06678 (809900612)\n"
"  previously @ 0x000000ffd06678/10 (809900609 insns)\n"
"  previously @ 0x000000ffd001e0/4 (809900599 insns)\n"
"  previously @ 0x000000ffd080ac/2 (809900595 insns)\n"
"  previously @ 0x000000ffd08098/5 (809900593 insns)\n"
"  previously @ 0x000000ffd080c0/1 (809900588 insns)"
msgstr ""
