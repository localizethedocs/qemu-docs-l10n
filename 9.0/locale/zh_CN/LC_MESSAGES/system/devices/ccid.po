# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/devices/ccid.rst:2
msgid "Chip Card Interface Device (CCID)"
msgstr ""

#: ../../../system/devices/ccid.rst:5
msgid "USB CCID device"
msgstr ""

#: ../../../system/devices/ccid.rst:6
msgid ""
"The USB CCID device is a USB device implementing the CCID specification, "
"which lets one connect smart card readers that implement the same spec. For "
"more information see the specification::"
msgstr ""

#: ../../../system/devices/ccid.rst:10
msgid ""
"Universal Serial Bus\n"
"Device Class: Smart Card\n"
"CCID\n"
"Specification for\n"
"Integrated Circuit(s) Cards Interface Devices\n"
"Revision 1.1\n"
"April 22rd, 2005"
msgstr ""

#: ../../../system/devices/ccid.rst:18
msgid ""
"Smartcards are used for authentication, single sign on, decryption in public/"
"private schemes and digital signatures. A smartcard reader on the client "
"cannot be used on a guest with simple usb passthrough since it will then not "
"be available on the client, possibly locking the computer when it is "
"\"removed\". On the other hand this device can let you use the smartcard on "
"both the client and the guest machine. It is also possible to have a "
"completely virtual smart card reader and smart card (i.e. not backed by a "
"physical device) using this device."
msgstr ""

#: ../../../system/devices/ccid.rst:27
msgid "Building"
msgstr ""

#: ../../../system/devices/ccid.rst:28
msgid ""
"The cryptographic functions and access to the physical card is done via the "
"libcacard library, whose development package must be installed prior to "
"building QEMU:"
msgstr ""

#: ../../../system/devices/ccid.rst:32
msgid "In redhat/fedora::"
msgstr ""

#: ../../../system/devices/ccid.rst:34
msgid "yum install libcacard-devel"
msgstr ""

#: ../../../system/devices/ccid.rst:36
msgid "In ubuntu::"
msgstr ""

#: ../../../system/devices/ccid.rst:38
msgid "apt-get install libcacard-dev"
msgstr ""

#: ../../../system/devices/ccid.rst:40
msgid "Configuring and building::"
msgstr ""

#: ../../../system/devices/ccid.rst:42
msgid "./configure --enable-smartcard && make"
msgstr ""

#: ../../../system/devices/ccid.rst:45
msgid "Using ccid-card-emulated with hardware"
msgstr ""

#: ../../../system/devices/ccid.rst:46
msgid ""
"Assuming you have a working smartcard on the host with the current user, "
"using libcacard, QEMU acts as another client using ccid-card-emulated::"
msgstr ""

#: ../../../system/devices/ccid.rst:49
msgid "qemu -usb -device usb-ccid -device ccid-card-emulated"
msgstr ""

#: ../../../system/devices/ccid.rst:52
msgid "Using ccid-card-emulated with certificates stored in files"
msgstr ""

#: ../../../system/devices/ccid.rst:53
msgid ""
"You must create the CA and card certificates. This is a one time process. We "
"use NSS certificates::"
msgstr ""

#: ../../../system/devices/ccid.rst:56
msgid ""
"mkdir fake-smartcard\n"
"cd fake-smartcard\n"
"certutil -N -d sql:$PWD\n"
"certutil -S -d sql:$PWD -s \"CN=Fake Smart Card CA\" -x -t TC,TC,TC -n fake-"
"smartcard-ca\n"
"certutil -S -d sql:$PWD -t ,, -s \"CN=John Doe\" -n id-cert -c fake-"
"smartcard-ca\n"
"certutil -S -d sql:$PWD -t ,, -s \"CN=John Doe (signing)\" --nsCertType "
"smime -n signing-cert -c fake-smartcard-ca\n"
"certutil -S -d sql:$PWD -t ,, -s \"CN=John Doe (encryption)\" --nsCertType "
"sslClient -n encryption-cert -c fake-smartcard-ca"
msgstr ""

#: ../../../system/devices/ccid.rst:64
msgid "Note: you must have exactly three certificates."
msgstr ""

#: ../../../system/devices/ccid.rst:66
msgid "You can use the emulated card type with the certificates backend::"
msgstr ""

#: ../../../system/devices/ccid.rst:68
msgid ""
"qemu -usb -device usb-ccid -device ccid-card-emulated,backend=certificates,"
"db=sql:$PWD,cert1=id-cert,cert2=signing-cert,cert3=encryption-cert"
msgstr ""

#: ../../../system/devices/ccid.rst:70
msgid "To use the certificates in the guest, export the CA certificate::"
msgstr ""

#: ../../../system/devices/ccid.rst:72
msgid ""
"certutil -L -r -d sql:$PWD -o fake-smartcard-ca.cer -n fake-smartcard-ca"
msgstr ""

#: ../../../system/devices/ccid.rst:74
msgid "and import it in the guest::"
msgstr ""

#: ../../../system/devices/ccid.rst:76
msgid ""
"certutil -A -d /etc/pki/nssdb -i fake-smartcard-ca.cer -t TC,TC,TC -n fake-"
"smartcard-ca"
msgstr ""

#: ../../../system/devices/ccid.rst:78
msgid ""
"In a Linux guest you can then use the CoolKey PKCS #11 module to access the "
"card::"
msgstr ""

#: ../../../system/devices/ccid.rst:81
msgid "certutil -d /etc/pki/nssdb -L -h all"
msgstr ""

#: ../../../system/devices/ccid.rst:83
msgid ""
"It will prompt you for the PIN (which is the password you assigned to the "
"certificate database early on), and then show you all three certificates "
"together with the manually imported CA cert::"
msgstr ""

#: ../../../system/devices/ccid.rst:87
msgid ""
"Certificate Nickname                        Trust Attributes\n"
"fake-smartcard-ca                           CT,C,C\n"
"John Doe:CAC ID Certificate                 u,u,u\n"
"John Doe:CAC Email Signature Certificate    u,u,u\n"
"John Doe:CAC Email Encryption Certificate   u,u,u"
msgstr ""

#: ../../../system/devices/ccid.rst:93
msgid ""
"If this does not happen, CoolKey is not installed or not registered with "
"NSS. Registration can be done from Firefox or the command line::"
msgstr ""

#: ../../../system/devices/ccid.rst:96
msgid ""
"modutil -dbdir /etc/pki/nssdb -add \"CAC Module\" -libfile /usr/lib64/pkcs11/"
"libcoolkeypk11.so\n"
"modutil -dbdir /etc/pki/nssdb -list"
msgstr ""

#: ../../../system/devices/ccid.rst:100
msgid "Using ccid-card-passthru with client side hardware"
msgstr ""

#: ../../../system/devices/ccid.rst:101
msgid ""
"On the host specify the ccid-card-passthru device with a suitable chardev::"
msgstr ""

#: ../../../system/devices/ccid.rst:103
msgid ""
"qemu -chardev socket,server=on,host=0.0.0.0,port=2001,id=ccid,wait=off \\\n"
"     -usb -device usb-ccid -device ccid-card-passthru,chardev=ccid"
msgstr ""

#: ../../../system/devices/ccid.rst:106
msgid "On the client run vscclient, built when you built QEMU::"
msgstr ""

#: ../../../system/devices/ccid.rst:108
msgid "vscclient <qemu-host> 2001"
msgstr ""

#: ../../../system/devices/ccid.rst:111
msgid "Using ccid-card-passthru with client side certificates"
msgstr ""

#: ../../../system/devices/ccid.rst:112
msgid ""
"This case is not particularly useful, but you can use it to debug your setup."
msgstr ""

#: ../../../system/devices/ccid.rst:115
msgid "Follow instructions above, except run QEMU and vscclient as follows."
msgstr ""

#: ../../../system/devices/ccid.rst:117
msgid ""
"Run qemu as per above, and run vscclient from the \"fake-smartcard\" "
"directory as follows::"
msgstr ""

#: ../../../system/devices/ccid.rst:120
msgid ""
"qemu -chardev socket,server=on,host=0.0.0.0,port=2001,id=ccid,wait=off \\\n"
"     -usb -device usb-ccid -device ccid-card-passthru,chardev=ccid\n"
"vscclient -e \"db=\\\"sql:$PWD\\\" use_hw=no soft=(,Test,CAC,,id-cert,"
"signing-cert,encryption-cert)\" <qemu-host> 2001"
msgstr ""

#: ../../../system/devices/ccid.rst:126
msgid "Passthrough protocol scenario"
msgstr ""

#: ../../../system/devices/ccid.rst:127
msgid ""
"This is a typical interchange of messages when using the passthru card "
"device. usb-ccid is a usb device. It defaults to an unattached usb device on "
"startup. usb-ccid expects a chardev and expects the protocol defined in "
"cac_card/vscard_common.h to be passed over that. The usb-ccid device can be "
"in one of three modes:"
msgstr ""

#: ../../../system/devices/ccid.rst:133
msgid "detached"
msgstr ""

#: ../../../system/devices/ccid.rst:134
msgid "attached with no card"
msgstr ""

#: ../../../system/devices/ccid.rst:135
msgid "attached with card"
msgstr ""

#: ../../../system/devices/ccid.rst:137
msgid ""
"A typical interchange is (the arrow shows who started each exchange, it can "
"be client originated or guest originated)::"
msgstr ""

#: ../../../system/devices/ccid.rst:140
msgid ""
"client event        |    vscclient           |    passthru    |    usb-ccid  "
"|  guest event\n"
"------------------------------------------------------------------------------------------------\n"
"                    |    VSC_Init            |                |              "
"|\n"
"                    |    VSC_ReaderAdd       |                |    attach    "
"|\n"
"                    |                        |                |              "
"|  sees new usb device.\n"
"  card inserted ->  |                        |                |              "
"|\n"
"                    |    VSC_ATR             |   insert       |    insert    "
"|  see new card\n"
"                    |                        |                |              "
"|\n"
"                    |    VSC_APDU            |   VSC_APDU     |              "
"| <- guest sends APDU\n"
"client <-> physical |                        |                |              "
"|\n"
" card APDU exchange |                        |                |              "
"|\n"
" client response -> |    VSC_APDU            |   VSC_APDU     |              "
"|  receive APDU response\n"
"                                                    ...\n"
"                                    [APDU<->APDU repeats several times]\n"
"                                                    ...\n"
"   card removed  -> |                        |                |              "
"|\n"
"                    |    VSC_CardRemove      |   remove       |   remove     "
"|   card removed\n"
"                                                    ...\n"
"                                    [(card insert, apdu's, card remove) "
"repeat]\n"
"                                                    ...\n"
"  kill/quit         |                        |                |              "
"|\n"
"    vscclient       |                        |                |              "
"|\n"
"                    |    VSC_ReaderRemove    |                |   detach     "
"|\n"
"                    |                        |                |              "
"|   usb device removed."
msgstr ""

#: ../../../system/devices/ccid.rst:166
msgid "libcacard"
msgstr ""

#: ../../../system/devices/ccid.rst:167
msgid ""
"Both ccid-card-emulated and vscclient use libcacard as the card emulator. "
"libcacard implements a completely virtual CAC (DoD standard for smart cards) "
"compliant card and uses NSS to retrieve certificates and do any encryption. "
"The backend can then be a real reader and card, or certificates stored in "
"files."
msgstr ""
