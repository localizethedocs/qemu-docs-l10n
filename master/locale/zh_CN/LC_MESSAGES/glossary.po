# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../glossary.rst:5
msgid "Glossary"
msgstr ""

#: ../../../glossary.rst:7
msgid ""
"This section of the manual presents brief definitions of acronyms and terms "
"used by QEMU developers."
msgstr ""

#: ../../../glossary.rst:11
msgid "Accelerator"
msgstr ""

#: ../../../glossary.rst:13
msgid ""
"A specific API used to accelerate execution of guest instructions. It can be "
"hardware-based, through a virtualization API provided by the host OS (kvm, "
"hvf, whpx, mshv, ...), or software-based (tcg). See this description of "
"`supported accelerators<Accelerators>`."
msgstr ""

#: ../../../glossary.rst:19
msgid "Board"
msgstr ""

#: ../../../glossary.rst:21
msgid "Another name for :ref:`machine`."
msgstr ""

#: ../../../glossary.rst:24
msgid "Block"
msgstr ""

#: ../../../glossary.rst:26
msgid ""
"Block drivers are the available `disk formats and front-ends <block-"
"drivers>` available, and block devices `(see Block device section on options "
"page)<sec_005finvocation>` are using them to implement disks for a virtual "
"machine."
msgstr ""

#: ../../../glossary.rst:32
msgid "CFI"
msgstr ""

#: ../../../glossary.rst:34
msgid ""
"Control Flow Integrity is a hardening technique used to prevent exploits "
"targeting QEMU by detecting unexpected branches during execution. QEMU "
"`actively supports<cfi>` being compiled with CFI enabled."
msgstr ""

#: ../../../glossary.rst:39
msgid "Device"
msgstr ""

#: ../../../glossary.rst:41
msgid ""
"In QEMU, a device is a piece of hardware visible to the guest. Examples "
"include UARTs, PCI controllers, PCI cards, VGA controllers, and many more."
msgstr ""

#: ../../../glossary.rst:44
msgid ""
"QEMU is able to emulate a CPU, and all the hardware interacting with it, "
"including `many devices<device-emulation>`. When QEMU runs a virtual machine "
"using a hardware-based accelerator, it is responsible for emulating, using "
"software, all devices."
msgstr ""

#: ../../../glossary.rst:50
msgid "EDK2"
msgstr ""

#: ../../../glossary.rst:52
msgid ""
"EDK2, as known as `TianoCore <https://www.tianocore.org/>`_, is an open "
"source implementation of UEFI standard. QEMU virtual machines that boot a "
"UEFI firmware usually use EDK2."
msgstr ""

#: ../../../glossary.rst:57
msgid "gdbstub"
msgstr ""

#: ../../../glossary.rst:59
msgid ""
"QEMU implements a `gdb server <GDB usage>`, allowing gdb to attach to it and "
"debug a running virtual machine, or a program in user-mode. This allows "
"debugging the guest code that is running inside QEMU."
msgstr ""

#: ../../../glossary.rst:64
msgid "glib2"
msgstr ""

#: ../../../glossary.rst:66
msgid ""
"`GLib2 <https://docs.gtk.org/glib/>`_ is one of the most important libraries "
"we are using through the codebase. It provides many data structures, macros, "
"string and thread utilities and portable functions across different OS. It's "
"required to build QEMU."
msgstr ""

#: ../../../glossary.rst:72
msgid "Guest agent"
msgstr ""

#: ../../../glossary.rst:74
msgid ""
"The `QEMU Guest Agent <qemu-ga>` is a daemon intended to be run within "
"virtual machines. It provides various services to help QEMU to interact with "
"it."
msgstr ""

#: ../../../glossary.rst:80
msgid "Guest"
msgstr ""

#: ../../../glossary.rst:82
msgid ""
"Guest is the architecture of the virtual machine, which is emulated. See "
"also :ref:`host`."
msgstr ""

#: ../../../glossary.rst:85
msgid ""
"Sometimes this is called the :ref:`target` architecture, but that term can "
"be ambiguous."
msgstr ""

#: ../../../glossary.rst:91
msgid "Host"
msgstr ""

#: ../../../glossary.rst:93
msgid ""
"Host is the architecture on which QEMU is running on, which is native. See "
"also :ref:`guest`."
msgstr ""

#: ../../../glossary.rst:97
msgid "Hypervisor"
msgstr ""

#: ../../../glossary.rst:99
msgid ""
"The formal definition of an hypervisor is a program or API than can be used "
"to manage a virtual machine. QEMU is a virtualizer, that interacts with "
"various hypervisors."
msgstr ""

#: ../../../glossary.rst:103
msgid ""
"In the context of QEMU, an hypervisor is an API, provided by the Host OS, "
"allowing to execute virtual machines.  Linux provides a choice of KVM, Xen "
"or MSHV; MacOS provides HVF; Windows provides WHPX; NetBSD provides NVMM."
msgstr ""

#: ../../../glossary.rst:110
msgid "Machine"
msgstr ""

#: ../../../glossary.rst:112
msgid ""
"QEMU's system emulation models many different types of hardware. A machine "
"model (sometimes called a board model) is the model of a complete virtual "
"system with RAM, one or more CPUs, and various devices. It can be selected "
"with the option ``-machine`` of qemu-system. Our machine models can be found "
"on this `page <system-targets-ref>`."
msgstr ""

#: ../../../glossary.rst:119
msgid "Migration"
msgstr ""

#: ../../../glossary.rst:121
msgid ""
"QEMU can save and restore the execution of a virtual machine between "
"different host systems. This is provided by the :ref:`Migration "
"framework<migration>`."
msgstr ""

#: ../../../glossary.rst:125
msgid "NBD"
msgstr ""

#: ../../../glossary.rst:127
msgid ""
"The `QEMU Network Block Device server <qemu-nbd>` is a tool that can be used "
"to mount and access QEMU images, providing functionality similar to a loop "
"device."
msgstr ""

#: ../../../glossary.rst:131
msgid "Mailing List"
msgstr ""

#: ../../../glossary.rst:133
msgid ""
"This is `where <https://wiki.qemu.org/Contribute/MailingLists>`_ all the "
"development happens! Changes are posted as series, that all developers can "
"review and share feedback for."
msgstr ""

#: ../../../glossary.rst:137
msgid ""
"For reporting issues, our `GitLab <https://gitlab.com/qemu-project/qemu/-/"
"issues>`_ tracker is the best place."
msgstr ""

#: ../../../glossary.rst:143
msgid "MMU / softmmu"
msgstr ""

#: ../../../glossary.rst:145
msgid ""
"The Memory Management Unit is responsible for translating virtual addresses "
"to physical addresses and managing memory protection. QEMU system mode is "
"named \"softmmu\" precisely because it implements this in software, "
"including a TLB (Translation lookaside buffer), for the guest virtual "
"machine."
msgstr ""

#: ../../../glossary.rst:150
msgid ""
"QEMU user-mode does not implement a full software MMU, but \"simply\" "
"translates virtual addresses by adding a specific offset, and relying on "
"host MMU/OS instead."
msgstr ""

#: ../../../glossary.rst:155
msgid "Monitor / QMP / HMP"
msgstr ""

#: ../../../glossary.rst:157
msgid ""
"The `QEMU Monitor <QEMU monitor>` is a text interface which can be used to "
"interact with a running virtual machine."
msgstr ""

#: ../../../glossary.rst:160
msgid ""
"QMP stands for QEMU Monitor Protocol and is a json based interface. HMP "
"stands for Human Monitor Protocol and is a set of text commands available "
"for users who prefer natural language to json."
msgstr ""

#: ../../../glossary.rst:165
msgid "MTTCG"
msgstr ""

#: ../../../glossary.rst:167
msgid ""
"Multiple CPU support was first implemented using a round-robin algorithm "
"running on a single thread. Later on, `Multi-threaded TCG <mttcg>` was "
"developed to benefit from multiple cores to speed up execution."
msgstr ""

#: ../../../glossary.rst:172
msgid "Plugins"
msgstr ""

#: ../../../glossary.rst:174
msgid ""
"`TCG Plugins <TCG Plugins>` is an API used to instrument guest code, in "
"system and user mode. The end goal is to have a similar set of functionality "
"compared to `DynamoRIO <https://dynamorio.org/>`_ or `valgrind <https://"
"valgrind.org/>`_."
msgstr ""

#: ../../../glossary.rst:178
msgid ""
"One key advantage of QEMU plugins is that they can be used to perform "
"architecture agnostic instrumentation."
msgstr ""

#: ../../../glossary.rst:182
msgid "Patchew"
msgstr ""

#: ../../../glossary.rst:184
msgid ""
"`Patchew <https://patchew.org/QEMU/>`_ is a website that tracks patches on "
"the Mailing List."
msgstr ""

#: ../../../glossary.rst:188
msgid "PR"
msgstr ""

#: ../../../glossary.rst:190
msgid ""
"Once a series is reviewed and accepted by a subsystem maintainer, it will be "
"included in a PR (Pull Request) that the project maintainer will merge into "
"QEMU main branch, after running tests."
msgstr ""

#: ../../../glossary.rst:194
msgid ""
"The QEMU project doesn't currently expect most developers to directly submit "
"pull requests."
msgstr ""

#: ../../../glossary.rst:198
msgid "QCOW2"
msgstr ""

#: ../../../glossary.rst:200
msgid ""
"QEMU Copy On Write is a disk format developed by QEMU. It provides "
"transparent compression, automatic extension, and many other advantages over "
"a raw image."
msgstr ""

#: ../../../glossary.rst:203
msgid "qcow2 is the recommended format to use."
msgstr ""

#: ../../../glossary.rst:206
msgid "QEMU"
msgstr ""

#: ../../../glossary.rst:208
msgid ""
"`QEMU (Quick Emulator) <https://www.qemu.org/>`_ is a generic and open "
"source machine emulator and virtualizer."
msgstr ""

#: ../../../glossary.rst:212
msgid "QOM"
msgstr ""

#: ../../../glossary.rst:214
msgid ""
":ref:`QEMU Object Model <qom>` is an object oriented API used to define "
"various devices and hardware in the QEMU codebase."
msgstr ""

#: ../../../glossary.rst:218
msgid "Record/replay"
msgstr ""

#: ../../../glossary.rst:220
msgid ""
":ref:`Record/replay <replay>` is a feature of QEMU allowing to have a "
"deterministic and reproducible execution of a virtual machine."
msgstr ""

#: ../../../glossary.rst:224
msgid "Rust"
msgstr ""

#: ../../../glossary.rst:226
msgid ""
"`A new programming language <https://www.rust-lang.org/>`_, memory safe by "
"default. There is a work in progress to integrate it in QEMU codebase for "
"various subsystems."
msgstr ""

#: ../../../glossary.rst:231
msgid "System mode"
msgstr ""

#: ../../../glossary.rst:233
msgid ""
"QEMU System mode provides a virtual model of an entire machine (CPU, memory "
"and emulated devices) to run a guest OS. In this mode the CPU may be fully "
"emulated, or it may work with a hypervisor such as KVM, Xen or Hypervisor."
"Framework to allow the guest to run directly on the host CPU."
msgstr ""

#: ../../../glossary.rst:238
msgid "QEMU System mode is called :ref:`softmmu <softmmu>` as well."
msgstr ""

#: ../../../glossary.rst:243
msgid "Target"
msgstr ""

#: ../../../glossary.rst:245
msgid ""
"The term \"target\" can be ambiguous. In most places in QEMU it is used as a "
"synonym for :ref:`guest`. For example the code for emulating Arm CPUs is in "
"``target/arm/``. However in the :ref:`TCG subsystem <tcg>` \"target\" refers "
"to the architecture which QEMU is running on, i.e. the :ref:`host`."
msgstr ""

#: ../../../glossary.rst:251
msgid "TCG"
msgstr ""

#: ../../../glossary.rst:253
msgid ""
"TCG is the QEMU `Tiny Code Generator <tcg>`. It is the JIT (just-in-time) "
"compiler we use to emulate a guest CPU in software."
msgstr ""

#: ../../../glossary.rst:256
msgid ""
"It is one of the accelerators supported by QEMU, and supports a lot of guest/"
"host architectures."
msgstr ""

#: ../../../glossary.rst:260
msgid "User mode"
msgstr ""

#: ../../../glossary.rst:262
msgid ""
"QEMU User mode can launch processes compiled for one CPU on another CPU. In "
"this mode the CPU is always emulated. In this mode, QEMU translate system "
"calls from guest to host kernel. It is available for Linux and BSD."
msgstr ""

#: ../../../glossary.rst:267
msgid "VirtIO"
msgstr ""

#: ../../../glossary.rst:269
msgid ""
"VirtIO is an open standard used to define and implement virtual devices with "
"a minimal overhead, defining a set of data structures and hypercalls "
"(similar to system calls, but targeting an hypervisor, which happens to be "
"QEMU in our case). It's designed to be more efficient than emulating a real "
"device, by minimizing the amount of interactions between a guest VM and its "
"hypervisor."
msgstr ""

#: ../../../glossary.rst:276
msgid "vhost-user"
msgstr ""

#: ../../../glossary.rst:278
msgid ""
"`Vhost-user <vhost_user>` is an interface used to implement VirtIO devices "
"outside of QEMU itself."
msgstr ""
