# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/arm/aspeed.rst:2
msgid "Aspeed family boards (``*-bmc``, ``ast2500-evb``, ``ast2600-evb``)"
msgstr ""

#: ../../../system/arm/aspeed.rst:4
msgid ""
"The QEMU Aspeed machines model BMCs of various OpenPOWER systems and Aspeed "
"evaluation boards. They are based on different releases of the Aspeed SoC : "
"the AST2400 integrating an ARM926EJ-S CPU (400MHz), the AST2500 with an "
"ARM1176JZS CPU (800MHz) and more recently the AST2600 with dual cores ARM "
"Cortex-A7 CPUs (1.2GHz)."
msgstr ""

#: ../../../system/arm/aspeed.rst:10
msgid ""
"The SoC comes with RAM, Gigabit ethernet, USB, SD/MMC, USB, SPI, I2C, etc."
msgstr ""

#: ../../../system/arm/aspeed.rst:13
msgid "AST2400 SoC based machines :"
msgstr ""

#: ../../../system/arm/aspeed.rst:15
msgid "``palmetto-bmc``         OpenPOWER Palmetto POWER8 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:16
msgid "``quanta-q71l-bmc``      OpenBMC Quanta BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:17
msgid "``supermicrox11-bmc``    Supermicro X11 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:19
msgid "AST2500 SoC based machines :"
msgstr ""

#: ../../../system/arm/aspeed.rst:21
msgid "``ast2500-evb``          Aspeed AST2500 Evaluation board"
msgstr ""

#: ../../../system/arm/aspeed.rst:22
msgid "``romulus-bmc``          OpenPOWER Romulus POWER9 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:23
msgid "``witherspoon-bmc``      OpenPOWER Witherspoon POWER9 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:24
msgid "``sonorapass-bmc``       OCP SonoraPass BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:25
msgid "``fp5280g2-bmc``         Inspur FP5280G2 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:26
msgid "``g220a-bmc``            Bytedance G220A BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:27
msgid "``yosemitev2-bmc``       Facebook YosemiteV2 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:28
msgid "``tiogapass-bmc``        Facebook Tiogapass BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:30
msgid "AST2600 SoC based machines :"
msgstr ""

#: ../../../system/arm/aspeed.rst:32
msgid "``ast2600-evb``          Aspeed AST2600 Evaluation board (Cortex-A7)"
msgstr ""

#: ../../../system/arm/aspeed.rst:33
msgid "``tacoma-bmc``           OpenPOWER Witherspoon POWER9 AST2600 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:34
msgid "``rainier-bmc``          IBM Rainier POWER10 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:35
msgid "``fuji-bmc``             Facebook Fuji BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:36
msgid "``bletchley-bmc``        Facebook Bletchley BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:37
msgid "``fby35-bmc``            Facebook fby35 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:38
msgid "``qcom-dc-scm-v1-bmc``   Qualcomm DC-SCM V1 BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:39
msgid "``qcom-firework-bmc``    Qualcomm Firework BMC"
msgstr ""

#: ../../../system/arm/aspeed.rst:42 ../../../system/arm/aspeed.rst:181
msgid "Supported devices"
msgstr "支援的裝置"

#: ../../../system/arm/aspeed.rst:44
msgid "SMP (for the AST2600 Cortex-A7)"
msgstr ""

#: ../../../system/arm/aspeed.rst:45 ../../../system/arm/aspeed.rst:184
msgid "Interrupt Controller (VIC)"
msgstr ""

#: ../../../system/arm/aspeed.rst:46 ../../../system/arm/aspeed.rst:185
msgid "Timer Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:47
msgid "RTC Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:48
msgid "I2C Controller, including the new register interface of the AST2600"
msgstr ""

#: ../../../system/arm/aspeed.rst:49 ../../../system/arm/aspeed.rst:187
msgid "System Control Unit (SCU)"
msgstr ""

#: ../../../system/arm/aspeed.rst:50 ../../../system/arm/aspeed.rst:188
msgid "SRAM mapping"
msgstr ""

#: ../../../system/arm/aspeed.rst:51
msgid "X-DMA Controller (basic interface)"
msgstr ""

#: ../../../system/arm/aspeed.rst:52 ../../../system/arm/aspeed.rst:189
msgid "Static Memory Controller (SMC or FMC) - Only SPI Flash support"
msgstr ""

#: ../../../system/arm/aspeed.rst:53 ../../../system/arm/aspeed.rst:190
msgid "SPI Memory Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:54 ../../../system/arm/aspeed.rst:191
msgid "USB 2.0 Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:55
msgid "SD/MMC storage controllers"
msgstr ""

#: ../../../system/arm/aspeed.rst:56
msgid "SDRAM controller (dummy interface for basic settings and training)"
msgstr ""

#: ../../../system/arm/aspeed.rst:57 ../../../system/arm/aspeed.rst:192
msgid "Watchdog Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:58 ../../../system/arm/aspeed.rst:193
msgid "GPIO Controller (Master only)"
msgstr ""

#: ../../../system/arm/aspeed.rst:59 ../../../system/arm/aspeed.rst:194
msgid "UART"
msgstr ""

#: ../../../system/arm/aspeed.rst:60
msgid "Ethernet controllers"
msgstr ""

#: ../../../system/arm/aspeed.rst:61
msgid "Front LEDs (PCA9552 on I2C bus)"
msgstr ""

#: ../../../system/arm/aspeed.rst:62 ../../../system/arm/aspeed.rst:195
msgid "LPC Peripheral Controller (a subset of subdevices are supported)"
msgstr ""

#: ../../../system/arm/aspeed.rst:63 ../../../system/arm/aspeed.rst:196
msgid "Hash/Crypto Engine (HACE) - Hash support only. TODO: HMAC and RSA"
msgstr ""

#: ../../../system/arm/aspeed.rst:64 ../../../system/arm/aspeed.rst:197
msgid "ADC"
msgstr ""

#: ../../../system/arm/aspeed.rst:65
msgid "Secure Boot Controller (AST2600)"
msgstr ""

#: ../../../system/arm/aspeed.rst:66
msgid "eMMC Boot Controller (dummy)"
msgstr ""

#: ../../../system/arm/aspeed.rst:67 ../../../system/arm/aspeed.rst:199
msgid "PECI Controller (minimal)"
msgstr ""

#: ../../../system/arm/aspeed.rst:68 ../../../system/arm/aspeed.rst:210
msgid "I3C Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:72 ../../../system/arm/aspeed.rst:203
msgid "Missing devices"
msgstr ""

#: ../../../system/arm/aspeed.rst:74
msgid "Coprocessor support"
msgstr ""

#: ../../../system/arm/aspeed.rst:75 ../../../system/arm/aspeed.rst:205
msgid "PWM and Fan Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:76 ../../../system/arm/aspeed.rst:206
msgid "Slave GPIO Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:77
msgid "Super I/O Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:78
msgid "PCI-Express 1 Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:79
msgid "Graphic Display Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:80
msgid "MCTP Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:81 ../../../system/arm/aspeed.rst:207
msgid "Mailbox Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:82 ../../../system/arm/aspeed.rst:208
msgid "Virtual UART"
msgstr ""

#: ../../../system/arm/aspeed.rst:83 ../../../system/arm/aspeed.rst:209
msgid "eSPI Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:86 ../../../system/arm/aspeed.rst:213
msgid "Boot options"
msgstr "開機選項"

#: ../../../system/arm/aspeed.rst:88
msgid ""
"The Aspeed machines can be started using the ``-kernel`` and ``-dtb`` "
"options to load a Linux kernel or from a firmware. Images can be downloaded "
"from the OpenBMC jenkins :"
msgstr ""

#: ../../../system/arm/aspeed.rst:92
msgid "https://jenkins.openbmc.org/job/ci-openbmc/lastSuccessfulBuild/"
msgstr ""

#: ../../../system/arm/aspeed.rst:94
msgid "or directly from the OpenBMC GitHub release repository :"
msgstr ""

#: ../../../system/arm/aspeed.rst:96
msgid "https://github.com/openbmc/openbmc/releases"
msgstr ""

#: ../../../system/arm/aspeed.rst:98
msgid "To boot a kernel directly from a Linux build tree:"
msgstr ""

#: ../../../system/arm/aspeed.rst:100
msgid ""
"$ qemu-system-arm -M ast2600-evb -nographic \\\n"
"      -kernel arch/arm/boot/zImage \\\n"
"      -dtb arch/arm/boot/dts/aspeed-ast2600-evb.dtb \\\n"
"      -initrd rootfs.cpio"
msgstr ""

#: ../../../system/arm/aspeed.rst:107
msgid "To boot the machine from the flash image, use an MTD drive :"
msgstr ""

#: ../../../system/arm/aspeed.rst:109
msgid ""
"$ qemu-system-arm -M romulus-bmc -nic user \\\n"
"      -drive file=obmc-phosphor-image-romulus.static.mtd,format=raw,if=mtd -"
"nographic"
msgstr ""

#: ../../../system/arm/aspeed.rst:114
msgid "Options specific to Aspeed machines are :"
msgstr ""

#: ../../../system/arm/aspeed.rst:116
msgid ""
"``execute-in-place`` which emulates the boot from the CE0 flash device by "
"using the FMC controller to load the instructions, and not simply from RAM. "
"This takes a little longer."
msgstr ""

#: ../../../system/arm/aspeed.rst:120
msgid ""
"``fmc-model`` to change the default FMC Flash model. FW needs support for "
"the chip model to boot."
msgstr ""

#: ../../../system/arm/aspeed.rst:123
msgid "``spi-model`` to change the default SPI Flash model."
msgstr ""

#: ../../../system/arm/aspeed.rst:125
msgid ""
"``bmc-console`` to change the default console device. Most of the machines "
"use the ``UART5`` device for a boot console, which is mapped on ``/dev/"
"ttyS4`` under Linux, but it is not always the case."
msgstr ""

#: ../../../system/arm/aspeed.rst:130
msgid ""
"To use other flash models, for instance a different FMC chip and a bigger "
"(64M) SPI for the ``ast2500-evb`` machine, run :"
msgstr ""

#: ../../../system/arm/aspeed.rst:133
msgid "-M ast2500-evb,fmc-model=mx25l25635e,spi-model=mx66u51235f"
msgstr ""

#: ../../../system/arm/aspeed.rst:137
msgid ""
"When more flexibility is needed to define the flash devices, to use "
"different flash models or define all flash devices (up to 8), the ``-"
"nodefaults`` QEMU option can be used to avoid creating the default flash "
"devices."
msgstr ""

#: ../../../system/arm/aspeed.rst:142
msgid ""
"Flash devices should then be created from the command line and attached to a "
"block device :"
msgstr ""

#: ../../../system/arm/aspeed.rst:145
msgid ""
"$ qemu-system-arm -M ast2600-evb \\\n"
"      -blockdev node-name=fmc0,driver=file,filename=/path/to/fmc0.img \\\n"
"      -device mx66u51235f,bus=ssi.0,cs=0x0,drive=fmc0 \\\n"
"      -blockdev node-name=fmc1,driver=file,filename=/path/to/fmc1.img \\\n"
"      -device mx66u51235f,bus=ssi.0,cs=0x1,drive=fmc1 \\\n"
"      -blockdev node-name=spi1,driver=file,filename=/path/to/spi1.img \\\n"
"      -device mx66u51235f,cs=0x0,bus=ssi.1,drive=spi1 \\\n"
"      -nographic -nodefaults"
msgstr ""

#: ../../../system/arm/aspeed.rst:156
msgid ""
"In that case, the machine boots fetching instructions from the FMC0 device. "
"It is slower to start but closer to what HW does. Using the machine option "
"``execute-in-place`` has a similar effect."
msgstr ""

#: ../../../system/arm/aspeed.rst:160
msgid ""
"To change the boot console and use device ``UART3`` (``/dev/ttyS2`` under "
"Linux), use :"
msgstr ""

#: ../../../system/arm/aspeed.rst:163
msgid "-M ast2500-evb,bmc-console=uart3"
msgstr ""

#: ../../../system/arm/aspeed.rst:168
msgid "Aspeed minibmc family boards (``ast1030-evb``)"
msgstr ""

#: ../../../system/arm/aspeed.rst:170
msgid ""
"The QEMU Aspeed machines model mini BMCs of various Aspeed evaluation "
"boards. They are based on different releases of the Aspeed SoC : the AST1030 "
"integrating an ARM Cortex M4F CPU (200MHz)."
msgstr ""

#: ../../../system/arm/aspeed.rst:174
msgid "The SoC comes with SRAM, SPI, I2C, etc."
msgstr ""

#: ../../../system/arm/aspeed.rst:176
msgid "AST1030 SoC based machines :"
msgstr ""

#: ../../../system/arm/aspeed.rst:178
msgid "``ast1030-evb``          Aspeed AST1030 Evaluation board (Cortex-M4F)"
msgstr ""

#: ../../../system/arm/aspeed.rst:183
msgid "SMP (for the AST1030 Cortex-M4F)"
msgstr ""

#: ../../../system/arm/aspeed.rst:186
msgid "I2C Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:198
msgid "Secure Boot Controller"
msgstr ""

#: ../../../system/arm/aspeed.rst:215
msgid ""
"The Aspeed machines can be started using the ``-kernel`` to load a Zephyr OS "
"or from a firmware. Images can be downloaded from the ASPEED GitHub release "
"repository :"
msgstr ""

#: ../../../system/arm/aspeed.rst:219
msgid "https://github.com/AspeedTech-BMC/zephyr/releases"
msgstr ""

#: ../../../system/arm/aspeed.rst:221
msgid "To boot a kernel directly from a Zephyr build tree:"
msgstr ""

#: ../../../system/arm/aspeed.rst:223
msgid ""
"$ qemu-system-arm -M ast1030-evb -nographic \\\n"
"      -kernel zephyr.elf"
msgstr ""

#: ../../../system/arm/aspeed.rst:229
msgid "Facebook Yosemite v3.5 Platform and CraterLake Server (``fby35``)"
msgstr ""

#: ../../../system/arm/aspeed.rst:231
msgid ""
"Facebook has a series of multi-node compute server designs named Yosemite. "
"The most recent version released was `Yosemite v3 <https://www.opencompute."
"org/documents/ocp-yosemite-v3-platform-design-specification-1v16-pdf>`__."
msgstr ""

#: ../../../system/arm/aspeed.rst:235
msgid ""
"Yosemite v3.5 is an iteration on this design, and is very similar: there's a "
"baseboard with a BMC, and 4 server slots. The new server board design termed "
"\"CraterLake\" includes a Bridge IC (BIC), with room for expansion boards to "
"include various compute accelerators (video, inferencing, etc). At the "
"moment, only the first server slot's BIC is included."
msgstr ""

#: ../../../system/arm/aspeed.rst:241
msgid ""
"Yosemite v3.5 is itself a sled which fits into a 40U chassis, and 3 sleds "
"can be fit into a chassis. See `here <https://www.opencompute.org/"
"products/423/wiwynn-yosemite-v3-server>`__ for an example."
msgstr ""

#: ../../../system/arm/aspeed.rst:245
msgid ""
"In this generation, the BMC is an AST2600 and each BIC is an AST1030. The "
"BMC runs `OpenBMC <https://github.com/facebook/openbmc>`__, and the BIC runs "
"`OpenBIC <https://github.com/facebook/openbic>`__."
msgstr ""

#: ../../../system/arm/aspeed.rst:249
msgid ""
"Firmware images can be retrieved from the Github releases or built from the "
"source code, see the README's for instructions on that. This image uses the "
"\"fby35\" machine recipe from OpenBMC, and the \"yv35-cl\" target from "
"OpenBIC. Some reference images can also be found here:"
msgstr ""

#: ../../../system/arm/aspeed.rst:254
msgid ""
"$ wget https://github.com/facebook/openbmc/releases/download/openbmc-"
"e2294ff5d31d/fby35.mtd\n"
"$ wget https://github.com/peterdelevoryas/OpenBIC/releases/download/oby35-"
"cl-2022.13.01/Y35BCL.elf"
msgstr ""

#: ../../../system/arm/aspeed.rst:259
msgid ""
"Since this machine has multiple SoC's, each with their own serial console, "
"the recommended way to run it is to allocate a pseudoterminal for each "
"serial console and let the monitor use stdio. Also, starting in a paused "
"state is useful because it allows you to attach to the pseudoterminals "
"before the boot process starts."
msgstr ""

#: ../../../system/arm/aspeed.rst:265
msgid ""
"$ qemu-system-arm -machine fby35 \\\n"
"    -drive file=fby35.mtd,format=raw,if=mtd \\\n"
"    -device loader,file=Y35BCL.elf,addr=0,cpu-num=2 \\\n"
"    -serial pty -serial pty -serial mon:stdio \\\n"
"    -display none -S\n"
"$ screen /dev/tty0 # In a separate TMUX pane, terminal window, etc.\n"
"$ screen /dev/tty1\n"
"$ (qemu) c             # Start the boot process once screen is setup."
msgstr ""
