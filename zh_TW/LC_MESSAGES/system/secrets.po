# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/secrets.rst:4
msgid "Providing secret data to QEMU"
msgstr ""

#: ../../../system/secrets.rst:6
msgid ""
"There are a variety of objects in QEMU which require secret data to be "
"provided by the administrator or management application. For example, "
"network block devices often require a password, LUKS block devices require a "
"passphrase to unlock key material, remote desktop services require an access "
"password. QEMU has a general purpose mechanism for providing secret data to "
"QEMU in a secure manner, using the ``secret`` object type."
msgstr ""

#: ../../../system/secrets.rst:13
msgid ""
"At startup this can be done using the ``-object secret,...`` command line "
"argument. At runtime this can be done using the ``object_add`` QMP / HMP "
"monitor commands. The examples that follow will illustrate use of ``-"
"object`` command lines, but they all apply equivalentely in QMP / HMP. When "
"creating a ``secret`` object it must be given a unique ID string. This ID is "
"then used to identify the object when configuring the thing which need the "
"data."
msgstr ""

#: ../../../system/secrets.rst:22
msgid "INSECURE: Passing secrets as clear text inline"
msgstr ""

#: ../../../system/secrets.rst:24
msgid ""
"**The following should never be done in a production environment or on a "
"multi-user host. Command line arguments are usually visible in the process "
"listings and are often collected in log files by system monitoring agents or "
"bug reporting tools. QMP/HMP commands and their arguments are also often "
"logged and attached to bug reports. This all risks compromising secrets that "
"are passed inline.**"
msgstr ""

#: ../../../system/secrets.rst:31
msgid ""
"For the convenience of people debugging / developing with QEMU, it is "
"possible to pass secret data inline on the command line."
msgstr ""

#: ../../../system/secrets.rst:36
msgid "-object secret,id=secvnc0,data=87539319"
msgstr ""

#: ../../../system/secrets.rst:39
msgid ""
"Again it is possible to provide the data in base64 encoded format, which is "
"particularly useful if the data contains binary characters that would clash "
"with argument parsing."
msgstr ""

#: ../../../system/secrets.rst:45
msgid "-object secret,id=secvnc0,data=ODc1MzkzMTk=,format=base64"
msgstr ""

#: ../../../system/secrets.rst:48
msgid "**Note: base64 encoding does not provide any security benefit.**"
msgstr ""

#: ../../../system/secrets.rst:51
msgid "Passing secrets as clear text via a file"
msgstr ""

#: ../../../system/secrets.rst:53
msgid ""
"The simplest approach to providing data securely is to use a file to store "
"the secret:"
msgstr ""

#: ../../../system/secrets.rst:58
msgid "-object secret,id=secvnc0,file=vnc-password.txt"
msgstr ""

#: ../../../system/secrets.rst:61
msgid ""
"In this example the file ``vnc-password.txt`` contains the plain text secret "
"data. It is important to note that the contents of the file are treated as "
"an opaque blob. The entire raw file contents is used as the value, thus it "
"is important not to mistakenly add any trailing newline character in the "
"file if this newline is not intended to be part of the secret data."
msgstr ""

#: ../../../system/secrets.rst:67
msgid ""
"In some cases it might be more convenient to pass the secret data in base64 "
"format and have QEMU decode to get the raw bytes before use:"
msgstr ""

#: ../../../system/secrets.rst:72
msgid "-object secret,id=sec0,file=vnc-password.txt,format=base64"
msgstr ""

#: ../../../system/secrets.rst:75
msgid ""
"The file should generally be given mode ``0600`` or ``0400`` permissions, "
"and have its user/group ownership set to the same account that the QEMU "
"process will be launched under. If using mandatory access control such as "
"SELinux, then the file should be labelled to only grant access to the "
"specific QEMU process that needs access. This will prevent other processes/"
"users from compromising the secret data."
msgstr ""

#: ../../../system/secrets.rst:84
msgid "Passing secrets as cipher text inline"
msgstr ""

#: ../../../system/secrets.rst:86
msgid ""
"To address the insecurity of passing secrets inline as clear text, it is "
"possible to configure a second secret as an AES key to use for decrypting "
"the data."
msgstr ""

#: ../../../system/secrets.rst:90
msgid ""
"The secret used as the AES key must always be configured using the file "
"based storage mechanism:"
msgstr ""

#: ../../../system/secrets.rst:95
msgid "-object secret,id=secmaster,file=masterkey.data,format=base64"
msgstr ""

#: ../../../system/secrets.rst:98
msgid ""
"In this case the ``masterkey.data`` file would be initialized with 32 "
"cryptographically secure random bytes, which are then base64 encoded. The "
"contents of this file will by used as an AES-256 key to encrypt the real "
"secret that can now be safely passed to QEMU inline as cipher text"
msgstr ""

#: ../../../system/secrets.rst:105
msgid ""
"-object secret,id=secvnc0,keyid=secmaster,data=BASE64-CIPHERTEXT,iv=BASE64-"
"IV,format=base64"
msgstr ""

#: ../../../system/secrets.rst:108
msgid ""
"In this example ``BASE64-CIPHERTEXT`` is the result of AES-256-CBC "
"encrypting the secret with ``masterkey.data`` and then base64 encoding the "
"ciphertext. The ``BASE64-IV`` data is 16 random bytes which have been base64 "
"encrypted. These bytes are used as the initialization vector for the AES-256-"
"CBC value."
msgstr ""

#: ../../../system/secrets.rst:113
msgid ""
"A single master key can be used to encrypt all subsequent secrets, **but it "
"is critical that a different initialization vector is used for every "
"secret**."
msgstr ""

#: ../../../system/secrets.rst:117
msgid "Passing secrets via the Linux keyring"
msgstr ""

#: ../../../system/secrets.rst:119
msgid ""
"The earlier mechanisms described are platform agnostic. If using QEMU on a "
"Linux host, it is further possible to pass secrets to QEMU using the Linux "
"keyring:"
msgstr ""

#: ../../../system/secrets.rst:124
msgid "-object secret_keyring,id=secvnc0,serial=1729"
msgstr ""

#: ../../../system/secrets.rst:127
msgid ""
"This instructs QEMU to load data from the Linux keyring secret identified by "
"the serial number ``1729``. It is possible to combine use of the keyring "
"with other features mentioned earlier such as base64 encoding:"
msgstr ""

#: ../../../system/secrets.rst:133
msgid "-object secret_keyring,id=secvnc0,serial=1729,format=base64"
msgstr ""

#: ../../../system/secrets.rst:136
msgid "and also encryption with a master key:"
msgstr ""

#: ../../../system/secrets.rst:140
msgid ""
"-object secret_keyring,id=secvnc0,keyid=secmaster,serial=1729,iv=BASE64-IV"
msgstr ""

#: ../../../system/secrets.rst:144
msgid "Best practice"
msgstr ""

#: ../../../system/secrets.rst:146
msgid ""
"It is recommended for production deployments to use a master key secret, and "
"then pass all subsequent inline secrets encrypted with the master key."
msgstr ""

#: ../../../system/secrets.rst:149
msgid ""
"Each QEMU instance must have a distinct master key, and that must be "
"generated from a cryptographically secure random data source. The master key "
"should be deleted immediately upon QEMU shutdown. If passing the master key "
"as a file, the key file must have access control rules applied that restrict "
"access to just the one QEMU process that is intended to use it. "
"Alternatively the Linux keyring can be used to pass the master key to QEMU."
msgstr ""

#: ../../../system/secrets.rst:156
msgid ""
"The secrets for individual QEMU device backends must all then be encrypted "
"with this master key."
msgstr ""

#: ../../../system/secrets.rst:159
msgid ""
"This procedure helps ensure that the individual secrets for QEMU backends "
"will not be compromised, even if ``-object`` CLI args or ``object_add`` "
"monitor commands are collected in log files and attached to public bug "
"support tickets. The only item that needs strongly protecting is the master "
"key file."
msgstr ""
