# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/target-arm.rst:4
msgid "Arm System emulator"
msgstr ""

#: ../../../system/target-arm.rst:6
msgid ""
"QEMU can emulate both 32-bit and 64-bit Arm CPUs. Use the ``qemu-system-"
"aarch64`` executable to simulate a 64-bit Arm machine. You can use either "
"``qemu-system-arm`` or ``qemu-system-aarch64`` to simulate a 32-bit Arm "
"machine: in general, command lines that work for ``qemu-system-arm`` will "
"behave the same when used with ``qemu-system-aarch64``."
msgstr ""

#: ../../../system/target-arm.rst:13
msgid ""
"QEMU has generally good support for Arm guests. It has support for nearly "
"fifty different machines. The reason we support so many is that Arm hardware "
"is much more widely varying than x86 hardware. Arm CPUs are generally built "
"into \"system-on-chip\" (SoC) designs created by many different companies "
"with different devices, and these SoCs are then built into machines which "
"can vary still further even if they use the same SoC. Even with fifty boards "
"QEMU does not cover more than a small fraction of the Arm hardware ecosystem."
msgstr ""

#: ../../../system/target-arm.rst:22
msgid ""
"The situation for 64-bit Arm is fairly similar, except that we don't "
"implement so many different machines."
msgstr ""

#: ../../../system/target-arm.rst:25
msgid ""
"As well as the more common \"A-profile\" CPUs (which have MMUs and will run "
"Linux) QEMU also supports \"M-profile\" CPUs such as the Cortex-M0, Cortex-"
"M4 and Cortex-M33 (which are microcontrollers used in very embedded boards). "
"For most boards the CPU type is fixed (matching what the hardware has), so "
"typically you don't need to specify the CPU type by hand, except for special "
"cases like the ``virt`` board."
msgstr ""

#: ../../../system/target-arm.rst:33
msgid "Choosing a board model"
msgstr ""

#: ../../../system/target-arm.rst:35
msgid ""
"For QEMU's Arm system emulation, you must specify which board model you want "
"to use with the ``-M`` or ``--machine`` option; there is no default."
msgstr ""

#: ../../../system/target-arm.rst:39
msgid ""
"Because Arm systems differ so much and in fundamental ways, typically "
"operating system or firmware images intended to run on one machine will not "
"run at all on any other. This is often surprising for new users who are used "
"to the x86 world where every system looks like a standard PC. (Once the "
"kernel has booted, most userspace software cares much less about the detail "
"of the hardware.)"
msgstr ""

#: ../../../system/target-arm.rst:46
msgid ""
"If you already have a system image or a kernel that works on hardware and "
"you want to boot with QEMU, check whether QEMU lists that machine in its ``-"
"machine help`` output. If it is listed, then you can probably use that board "
"model. If it is not listed, then unfortunately your image will almost "
"certainly not boot on QEMU. (You might be able to extract the filesystem and "
"use that with a different kernel which boots on a system that QEMU does "
"emulate.)"
msgstr ""

#: ../../../system/target-arm.rst:54
msgid ""
"If you don't care about reproducing the idiosyncrasies of a particular bit "
"of hardware, such as small amount of RAM, no PCI or other hard disk, etc., "
"and just want to run Linux, the best option is to use the ``virt`` board. "
"This is a platform which doesn't correspond to any real hardware and is "
"designed for use in virtual machines. You'll need to compile Linux with a "
"suitable configuration for running on the ``virt`` board. ``virt`` supports "
"PCI, virtio, recent CPUs and large amounts of RAM. It also supports 64-bit "
"CPUs."
msgstr ""

#: ../../../system/target-arm.rst:64
msgid "Board-specific documentation"
msgstr ""

#: ../../../system/target-arm.rst:114
msgid "Emulated CPU architecture support"
msgstr ""

#: ../../../system/target-arm.rst:120
msgid "Arm CPU features"
msgstr ""
