# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../specs/vmcoreinfo.rst:3
msgid "VMCoreInfo device"
msgstr ""

#: ../../../specs/vmcoreinfo.rst:5
msgid ""
"The ``-device vmcoreinfo`` will create a ``fw_cfg`` entry for a guest to "
"store dump details."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:9
msgid "``etc/vmcoreinfo``"
msgstr ""

#: ../../../specs/vmcoreinfo.rst:11
msgid ""
"A guest may use this ``fw_cfg`` entry to add information details to QEMU "
"dumps."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:14
msgid "The entry of 16 bytes has the following layout, in little-endian::"
msgstr ""

#: ../../../specs/vmcoreinfo.rst:16
msgid ""
"#define VMCOREINFO_FORMAT_NONE 0x0\n"
"#define VMCOREINFO_FORMAT_ELF 0x1\n"
"\n"
"struct FWCfgVMCoreInfo {\n"
"    uint16_t host_format;  /* formats host supports */\n"
"    uint16_t guest_format; /* format guest supplies */\n"
"    uint32_t size;         /* size of vmcoreinfo region */\n"
"    uint64_t paddr;        /* physical address of vmcoreinfo region */\n"
"};"
msgstr ""

#: ../../../specs/vmcoreinfo.rst:26
msgid ""
"Only full write (of 16 bytes) are considered valid for further processing of "
"entry values."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:29
msgid ""
"A write of 0 in ``guest_format`` will disable further processing of "
"vmcoreinfo entry values & content."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:32
msgid ""
"You may write a ``guest_format`` that is not supported by the host, in which "
"case the entry data can be ignored by QEMU (but you may still access it "
"through a debugger, via ``vmcoreinfo_realize::vmcoreinfo_state``)."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:37
msgid "Format & content"
msgstr ""

#: ../../../specs/vmcoreinfo.rst:39
msgid "As of QEMU 2.11, only ``VMCOREINFO_FORMAT_ELF`` is supported."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:41
msgid ""
"The entry gives location and size of an ELF note that is appended in qemu "
"dumps."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:44
msgid ""
"The note format/class must be of the target bitness and the size must be "
"less than 1Mb."
msgstr ""

#: ../../../specs/vmcoreinfo.rst:47
msgid ""
"If the ELF note name is ``VMCOREINFO``, it is expected to be the Linux "
"vmcoreinfo note (see `the kernel documentation for its format <https://www."
"kernel.org/doc/Documentation/ABI/testing/sysfs-kernel-vmcoreinfo>`_). In "
"this case, qemu dump code will read the content as a key=value text file, "
"looking for ``NUMBER(phys_base)`` key value. The value is expected to be "
"more accurate than architecture guess of the value. This is useful for KASLR-"
"enabled guest with ancient tools not handling the ``VMCOREINFO`` note."
msgstr ""
