# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/ebpf_rss.rst:3
msgid "eBPF RSS virtio-net support"
msgstr ""

#: ../../../devel/ebpf_rss.rst:5
msgid ""
"RSS(Receive Side Scaling) is used to distribute network packets to guest "
"virtqueues by calculating packet hash. Usually every queue is processed then "
"by a specific guest CPU core."
msgstr ""

#: ../../../devel/ebpf_rss.rst:8
msgid ""
"For now there are 2 RSS implementations in qemu: - 'in-qemu' RSS (functions "
"if qemu receives network packets, i.e. vhost=off) - eBPF RSS (can function "
"with also with vhost=on)"
msgstr ""

#: ../../../devel/ebpf_rss.rst:12
msgid ""
"eBPF support (CONFIG_EBPF) is enabled by 'configure' script. To enable eBPF "
"RSS support use './configure --enable-bpf'."
msgstr ""

#: ../../../devel/ebpf_rss.rst:15
msgid ""
"If steering BPF is not set for kernel's TUN module, the TUN uses automatic "
"selection of rx virtqueue based on lookup table built according to "
"calculated symmetric hash of transmitted packets. If steering BPF is set for "
"TUN the BPF code calculates the hash of packet header and returns the "
"virtqueue number to place the packet to."
msgstr ""

#: ../../../devel/ebpf_rss.rst:21
msgid "Simplified decision formula:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:23
msgid ""
"queue_index = indirection_table[hash(<packet data>)%<indirection_table size>]"
msgstr ""

#: ../../../devel/ebpf_rss.rst:28
msgid "Not for all packets, the hash can/should be calculated."
msgstr ""

#: ../../../devel/ebpf_rss.rst:30
msgid "Note: currently, eBPF RSS does not support hash reporting."
msgstr ""

#: ../../../devel/ebpf_rss.rst:32
msgid ""
"eBPF RSS turned on by different combinations of vhost-net, vitrio-net and "
"tap configurations:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:34 ../../../devel/ebpf_rss.rst:38
msgid "eBPF is used:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:36
msgid "tap,vhost=off & virtio-net-pci,rss=on,hash=off"
msgstr ""

#: ../../../devel/ebpf_rss.rst:40
msgid "tap,vhost=on & virtio-net-pci,rss=on,hash=off"
msgstr ""

#: ../../../devel/ebpf_rss.rst:42
msgid "'in-qemu' RSS is used:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:44
msgid "tap,vhost=off & virtio-net-pci,rss=on,hash=on"
msgstr ""

#: ../../../devel/ebpf_rss.rst:46
msgid "eBPF is used, hash population feature is not reported to the guest:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:48
msgid "tap,vhost=on & virtio-net-pci,rss=on,hash=on"
msgstr ""

#: ../../../devel/ebpf_rss.rst:50
msgid ""
"If CONFIG_EBPF is not set then only 'in-qemu' RSS is supported. Also 'in-"
"qemu' RSS, as a fallback, is used if the eBPF program failed to load or set "
"to TUN."
msgstr ""

#: ../../../devel/ebpf_rss.rst:54
msgid "RSS eBPF program"
msgstr ""

#: ../../../devel/ebpf_rss.rst:56
msgid ""
"RSS program located in ebpf/rss.bpf.skeleton.h generated by bpftool. So the "
"program is part of the qemu binary. Initially, the eBPF program was compiled "
"by clang and source code located at tools/ebpf/rss.bpf.c. Prerequisites to "
"recompile the eBPF program (regenerate ebpf/rss.bpf.skeleton.h):"
msgstr ""

#: ../../../devel/ebpf_rss.rst:61
msgid ""
"llvm, clang, kernel source tree, bpftool Adjust Makefile.ebpf to reflect the "
"location of the kernel source tree"
msgstr ""

#: ../../../devel/ebpf_rss.rst:64
msgid "$ cd tools/ebpf $ make -f Makefile.ebpf"
msgstr ""

#: ../../../devel/ebpf_rss.rst:67
msgid ""
"Current eBPF RSS implementation uses 'bounded loops' with 'backward jump "
"instructions' which present in the last kernels. Overall eBPF RSS works on "
"kernels 5.8+."
msgstr ""

#: ../../../devel/ebpf_rss.rst:71
msgid "eBPF RSS implementation"
msgstr ""

#: ../../../devel/ebpf_rss.rst:73
msgid ""
"eBPF RSS loading functionality located in ebpf/ebpf_rss.c and ebpf/ebpf_rss."
"h."
msgstr ""

#: ../../../devel/ebpf_rss.rst:75
msgid "The ``struct EBPFRSSContext`` structure that holds 4 file descriptors:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:77
msgid "ctx - pointer of the libbpf context."
msgstr ""

#: ../../../devel/ebpf_rss.rst:78
msgid "program_fd - file descriptor of the eBPF RSS program."
msgstr ""

#: ../../../devel/ebpf_rss.rst:79
msgid ""
"map_configuration - file descriptor of the 'configuration' map. This map "
"contains one element of 'struct EBPFRSSConfig'. This configuration "
"determines eBPF program behavior."
msgstr ""

#: ../../../devel/ebpf_rss.rst:80
msgid ""
"map_toeplitz_key - file descriptor of the 'Toeplitz key' map. One element of "
"the 40byte key prepared for the hashing algorithm."
msgstr ""

#: ../../../devel/ebpf_rss.rst:81
msgid "map_indirections_table - 128 elements of queue indexes."
msgstr ""

#: ../../../devel/ebpf_rss.rst:83
msgid "``struct EBPFRSSConfig`` fields:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:85
msgid ""
"redirect - \"boolean\" value, should the hash be calculated, on false  - "
"``default_queue`` would be used as the final decision."
msgstr ""

#: ../../../devel/ebpf_rss.rst:86
msgid ""
"populate_hash - for now, not used. eBPF RSS doesn't support hash reporting."
msgstr ""

#: ../../../devel/ebpf_rss.rst:87
msgid ""
"hash_types - binary mask of different hash types. See "
"``VIRTIO_NET_RSS_HASH_TYPE_*`` defines. If for packet hash should not be "
"calculated - ``default_queue`` would be used."
msgstr ""

#: ../../../devel/ebpf_rss.rst:88
msgid "indirections_len - length of the indirections table, maximum 128."
msgstr ""

#: ../../../devel/ebpf_rss.rst:89
msgid ""
"default_queue - the queue index that used for packet that shouldn't be "
"hashed. For some packets, the hash can't be calculated(g.e ARP)."
msgstr ""

#: ../../../devel/ebpf_rss.rst:91
msgid "Functions:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:93
msgid ""
"``ebpf_rss_init()`` - sets ctx to NULL, which indicates that EBPFRSSContext "
"is not loaded."
msgstr ""

#: ../../../devel/ebpf_rss.rst:94
msgid ""
"``ebpf_rss_load()`` - creates 3 maps and loads eBPF program from the rss.bpf."
"skeleton.h. Returns 'true' on success. After that, program_fd can be used to "
"set steering for TAP."
msgstr ""

#: ../../../devel/ebpf_rss.rst:95
msgid ""
"``ebpf_rss_set_all()`` - sets values for eBPF maps. ``indirections_table`` "
"length is in EBPFRSSConfig. ``toeplitz_key`` is VIRTIO_NET_RSS_MAX_KEY_SIZE "
"aka 40 bytes array."
msgstr ""

#: ../../../devel/ebpf_rss.rst:96
msgid "``ebpf_rss_unload()`` - close all file descriptors and set ctx to NULL."
msgstr ""

#: ../../../devel/ebpf_rss.rst:98
msgid "Simplified eBPF RSS workflow:"
msgstr ""

#: ../../../devel/ebpf_rss.rst:100
msgid ""
"struct EBPFRSSConfig config;\n"
"config.redirect = 1;\n"
"config.hash_types = VIRTIO_NET_RSS_HASH_TYPE_UDPv4 | "
"VIRTIO_NET_RSS_HASH_TYPE_TCPv4;\n"
"config.indirections_len = VIRTIO_NET_RSS_MAX_TABLE_LEN;\n"
"config.default_queue = 0;\n"
"\n"
"uint16_t table[VIRTIO_NET_RSS_MAX_TABLE_LEN] = {...};\n"
"uint8_t key[VIRTIO_NET_RSS_MAX_KEY_SIZE] = {...};\n"
"\n"
"struct EBPFRSSContext ctx;\n"
"ebpf_rss_init(&ctx);\n"
"ebpf_rss_load(&ctx);\n"
"ebpf_rss_set_all(&ctx, &config, table, key);\n"
"if (net_client->info->set_steering_ebpf != NULL) {\n"
"    net_client->info->set_steering_ebpf(net_client, ctx->program_fd);\n"
"}\n"
"...\n"
"ebpf_unload(&ctx);"
msgstr ""

#: ../../../devel/ebpf_rss.rst:123
msgid "NetClientState SetSteeringEBPF()"
msgstr ""

#: ../../../devel/ebpf_rss.rst:125
msgid ""
"For now, ``set_steering_ebpf()`` method supported by Linux TAP "
"NetClientState. The method requires an eBPF program file descriptor as an "
"argument."
msgstr ""
