# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 05:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/riscv/virt.rst:2
msgid "'virt' Generic Virtual Platform (``virt``)"
msgstr ""

#: ../../../system/riscv/virt.rst:4
msgid ""
"The ``virt`` board is a platform which does not correspond to any real "
"hardware; it is designed for use in virtual machines. It is the recommended "
"board type if you simply want to run a guest such as Linux and do not care "
"about reproducing the idiosyncrasies and limitations of a particular bit of "
"real-world hardware."
msgstr ""

#: ../../../system/riscv/virt.rst:11
msgid "Supported devices"
msgstr ""

#: ../../../system/riscv/virt.rst:13
msgid "The ``virt`` machine supports the following devices:"
msgstr ""

#: ../../../system/riscv/virt.rst:15
msgid "Up to 8 generic RV32GC/RV64GC cores, with optional extensions"
msgstr ""

#: ../../../system/riscv/virt.rst:16
msgid "Core Local Interruptor (CLINT)"
msgstr ""

#: ../../../system/riscv/virt.rst:17
msgid "Platform-Level Interrupt Controller (PLIC)"
msgstr ""

#: ../../../system/riscv/virt.rst:18
msgid "CFI parallel NOR flash memory"
msgstr ""

#: ../../../system/riscv/virt.rst:19
msgid "1 NS16550 compatible UART"
msgstr ""

#: ../../../system/riscv/virt.rst:20
msgid "1 Google Goldfish RTC"
msgstr ""

#: ../../../system/riscv/virt.rst:21
msgid "1 SiFive Test device"
msgstr ""

#: ../../../system/riscv/virt.rst:22
msgid "8 virtio-mmio transport devices"
msgstr ""

#: ../../../system/riscv/virt.rst:23
msgid "1 generic PCIe host bridge"
msgstr ""

#: ../../../system/riscv/virt.rst:24
msgid "The fw_cfg device that allows a guest to obtain data from QEMU"
msgstr ""

#: ../../../system/riscv/virt.rst:26
msgid ""
"The hypervisor extension has been enabled for the default CPU, so virtual "
"machines with hypervisor extension can simply be used without explicitly "
"declaring."
msgstr ""

#: ../../../system/riscv/virt.rst:31
msgid "Hardware configuration information"
msgstr ""

#: ../../../system/riscv/virt.rst:33
msgid ""
"The ``virt`` machine automatically generates a device tree blob (\"dtb\") "
"which it passes to the guest, if there is no ``-dtb`` option. This provides "
"information about the addresses, interrupt lines and other configuration of "
"the various devices in the system. Guest software should discover the "
"devices that are present in the generated DTB."
msgstr ""

#: ../../../system/riscv/virt.rst:39
msgid ""
"If users want to provide their own DTB, they can use the ``-dtb`` option. "
"These DTBs should have the following requirements:"
msgstr ""

#: ../../../system/riscv/virt.rst:42
msgid ""
"The number of subnodes of the /cpus node should match QEMU's ``-smp`` option"
msgstr ""

#: ../../../system/riscv/virt.rst:43
msgid "The /memory reg size should match QEMUâ€™s selected ram_size via ``-m``"
msgstr ""

#: ../../../system/riscv/virt.rst:44
msgid ""
"Should contain a node for the CLINT device with a compatible string \"riscv,"
"clint0\" if using with OpenSBI BIOS images"
msgstr ""

#: ../../../system/riscv/virt.rst:48
msgid "Boot options"
msgstr ""

#: ../../../system/riscv/virt.rst:50
msgid ""
"The ``virt`` machine can start using the standard -kernel functionality for "
"loading a Linux kernel, a VxWorks kernel, an S-mode U-Boot bootloader with "
"the default OpenSBI firmware image as the -bios. It also supports the "
"recommended RISC-V bootflow: U-Boot SPL (M-mode) loads OpenSBI fw_dynamic "
"firmware and U-Boot proper (S-mode), using the standard -bios functionality."
msgstr ""

#: ../../../system/riscv/virt.rst:57
msgid "Machine-specific options"
msgstr ""

#: ../../../system/riscv/virt.rst:59
msgid "The following machine-specific options are supported:"
msgstr ""

#: ../../../system/riscv/virt.rst:61
msgid "aclint=[on|off]"
msgstr ""

#: ../../../system/riscv/virt.rst:63
msgid ""
"When this option is \"on\", ACLINT devices will be emulated instead of "
"SiFive CLINT. When not specified, this option is assumed to be \"off\"."
msgstr ""

#: ../../../system/riscv/virt.rst:66
msgid "aia=[none|aplic|aplic-imsic]"
msgstr ""

#: ../../../system/riscv/virt.rst:68
msgid ""
"This option allows selecting interrupt controller defined by the AIA "
"(advanced interrupt architecture) specification. The \"aia=aplic\" selects "
"APLIC (advanced platform level interrupt controller) to handle wired "
"interrupts whereas the \"aia=aplic-imsic\" selects APLIC and IMSIC (incoming "
"message signaled interrupt controller) to handle both wired interrupts and "
"MSIs. When not specified, this option is assumed to be \"none\" which "
"selects SiFive PLIC to handle wired interrupts."
msgstr ""

#: ../../../system/riscv/virt.rst:76
msgid "aia-guests=nnn"
msgstr ""

#: ../../../system/riscv/virt.rst:78
msgid ""
"The number of per-HART VS-level AIA IMSIC pages to be emulated for a guest "
"having AIA IMSIC (i.e. \"aia=aplic-imsic\" selected). When not specified, "
"the default number of per-HART VS-level AIA IMSIC pages is 0."
msgstr ""

#: ../../../system/riscv/virt.rst:83
msgid "Running Linux kernel"
msgstr ""

#: ../../../system/riscv/virt.rst:85
msgid ""
"Linux mainline v5.12 release is tested at the time of writing. To build a "
"Linux mainline kernel that can be booted by the ``virt`` machine in 64-bit "
"mode, simply configure the kernel using the defconfig configuration:"
msgstr ""

#: ../../../system/riscv/virt.rst:89
msgid ""
"$ export ARCH=riscv\n"
"$ export CROSS_COMPILE=riscv64-linux-\n"
"$ make defconfig\n"
"$ make"
msgstr ""

#: ../../../system/riscv/virt.rst:96
msgid "To boot the newly built Linux kernel in QEMU with the ``virt`` machine:"
msgstr ""

#: ../../../system/riscv/virt.rst:98
msgid ""
"$ qemu-system-riscv64 -M virt -smp 4 -m 2G \\\n"
"    -display none -serial stdio \\\n"
"    -kernel arch/riscv/boot/Image \\\n"
"    -initrd /path/to/rootfs.cpio \\\n"
"    -append \"root=/dev/ram\""
msgstr ""

#: ../../../system/riscv/virt.rst:106
msgid ""
"To build a Linux mainline kernel that can be booted by the ``virt`` machine "
"in 32-bit mode, use the rv32_defconfig configuration. A patch is required to "
"fix the 32-bit boot issue for Linux kernel v5.12."
msgstr ""

#: ../../../system/riscv/virt.rst:110
msgid ""
"$ export ARCH=riscv\n"
"$ export CROSS_COMPILE=riscv64-linux-\n"
"$ curl https://patchwork.kernel.org/project/linux-riscv/"
"patch/20210627135117.28641-1-bmeng.cn@gmail.com/mbox/ > riscv.patch\n"
"$ git am riscv.patch\n"
"$ make rv32_defconfig\n"
"$ make"
msgstr ""

#: ../../../system/riscv/virt.rst:119
msgid ""
"Replace ``qemu-system-riscv64`` with ``qemu-system-riscv32`` in the command "
"line above to boot the 32-bit Linux kernel. A rootfs image containing 32-bit "
"applications shall be used in order for kernel to boot to user space."
msgstr ""

#: ../../../system/riscv/virt.rst:124
msgid "Running U-Boot"
msgstr ""

#: ../../../system/riscv/virt.rst:126
msgid ""
"U-Boot mainline v2021.04 release is tested at the time of writing. To build "
"an S-mode U-Boot bootloader that can be booted by the ``virt`` machine, use "
"the qemu-riscv64_smode_defconfig with similar commands as described above "
"for Linux:"
msgstr ""

#: ../../../system/riscv/virt.rst:130
msgid ""
"$ export CROSS_COMPILE=riscv64-linux-\n"
"$ make qemu-riscv64_smode_defconfig"
msgstr ""

#: ../../../system/riscv/virt.rst:135
msgid "Boot the 64-bit U-Boot S-mode image directly:"
msgstr ""

#: ../../../system/riscv/virt.rst:137
msgid ""
"$ qemu-system-riscv64 -M virt -smp 4 -m 2G \\\n"
"    -display none -serial stdio \\\n"
"    -kernel /path/to/u-boot.bin"
msgstr ""

#: ../../../system/riscv/virt.rst:143
msgid ""
"To test booting U-Boot SPL which in M-mode, which in turn loads a FIT image "
"that bundles OpenSBI fw_dynamic firmware and U-Boot proper (S-mode) "
"together, build the U-Boot images using riscv64_spl_defconfig:"
msgstr ""

#: ../../../system/riscv/virt.rst:147
msgid ""
"$ export CROSS_COMPILE=riscv64-linux-\n"
"$ export OPENSBI=/path/to/opensbi-riscv64-generic-fw_dynamic.bin\n"
"$ make qemu-riscv64_spl_defconfig"
msgstr ""

#: ../../../system/riscv/virt.rst:153
msgid "The minimal QEMU commands to run U-Boot SPL are:"
msgstr ""

#: ../../../system/riscv/virt.rst:155
msgid ""
"$ qemu-system-riscv64 -M virt -smp 4 -m 2G \\\n"
"    -display none -serial stdio \\\n"
"    -bios /path/to/u-boot-spl \\\n"
"    -device loader,file=/path/to/u-boot.itb,addr=0x80200000"
msgstr ""

#: ../../../system/riscv/virt.rst:162
msgid ""
"To test 32-bit U-Boot images, switch to use qemu-riscv32_smode_defconfig and "
"riscv32_spl_defconfig builds, and replace ``qemu-system-riscv64`` with "
"``qemu-system-riscv32`` in the command lines above to boot the 32-bit U-Boot."
msgstr ""

#: ../../../system/riscv/virt.rst:167
msgid "Enabling TPM"
msgstr ""

#: ../../../system/riscv/virt.rst:169
msgid ""
"A TPM device can be connected to the virt board by following the steps below."
msgstr ""

#: ../../../system/riscv/virt.rst:171
msgid "First launch the TPM emulator:"
msgstr ""

#: ../../../system/riscv/virt.rst:173
msgid ""
"$ swtpm socket --tpm2 -t -d --tpmstate dir=/tmp/tpm \\\n"
"      --ctrl type=unixio,path=swtpm-sock"
msgstr ""

#: ../../../system/riscv/virt.rst:178
msgid ""
"Then launch QEMU with some additional arguments to link a TPM device to the "
"backend:"
msgstr ""

#: ../../../system/riscv/virt.rst:180
msgid ""
"$ qemu-system-riscv64 \\\n"
"  ... other args .... \\\n"
"  -chardev socket,id=chrtpm,path=swtpm-sock \\\n"
"  -tpmdev emulator,id=tpm0,chardev=chrtpm \\\n"
"  -device tpm-tis-device,tpmdev=tpm0"
msgstr ""

#: ../../../system/riscv/virt.rst:188
msgid ""
"The TPM device can be seen in the memory tree and the generated device tree "
"and should be accessible from the guest software."
msgstr ""
