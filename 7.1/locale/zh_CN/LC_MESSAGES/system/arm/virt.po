# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 7.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/arm/virt.rst:2
msgid "'virt' generic virtual platform (``virt``)"
msgstr ""

#: ../../../system/arm/virt.rst:4
msgid ""
"The ``virt`` board is a platform which does not correspond to any real "
"hardware; it is designed for use in virtual machines. It is the recommended "
"board type if you simply want to run a guest such as Linux and do not care "
"about reproducing the idiosyncrasies and limitations of a particular bit of "
"real-world hardware."
msgstr ""

#: ../../../system/arm/virt.rst:11
msgid ""
"This is a \"versioned\" board model, so as well as the ``virt`` machine type "
"itself (which may have improvements, bugfixes and other minor changes "
"between QEMU versions) a version is provided that guarantees to have the "
"same behaviour as that of previous QEMU releases, so that VM migration will "
"work between QEMU versions. For instance the ``virt-5.0`` machine type will "
"behave like the ``virt`` machine from the QEMU 5.0 release, and migration "
"should work between ``virt-5.0`` of the 5.0 release and ``virt-5.0`` of the "
"5.1 release. Migration is not guaranteed to work between different QEMU "
"releases for the non-versioned ``virt`` machine type."
msgstr ""

#: ../../../system/arm/virt.rst:23
msgid "Supported devices"
msgstr ""

#: ../../../system/arm/virt.rst:25
msgid "The virt board supports:"
msgstr ""

#: ../../../system/arm/virt.rst:27
msgid "PCI/PCIe devices"
msgstr ""

#: ../../../system/arm/virt.rst:28
msgid "Flash memory"
msgstr ""

#: ../../../system/arm/virt.rst:29
msgid "One PL011 UART"
msgstr ""

#: ../../../system/arm/virt.rst:30
msgid "An RTC"
msgstr ""

#: ../../../system/arm/virt.rst:31
msgid "The fw_cfg device that allows a guest to obtain data from QEMU"
msgstr ""

#: ../../../system/arm/virt.rst:32
msgid "A PL061 GPIO controller"
msgstr ""

#: ../../../system/arm/virt.rst:33
msgid "An optional SMMUv3 IOMMU"
msgstr ""

#: ../../../system/arm/virt.rst:34
msgid "hotpluggable DIMMs"
msgstr ""

#: ../../../system/arm/virt.rst:35
msgid "hotpluggable NVDIMMs"
msgstr ""

#: ../../../system/arm/virt.rst:36
msgid ""
"An MSI controller (GICv2M or ITS). GICv2M is selected by default along with "
"GICv2. ITS is selected by default with GICv3 (>= virt-2.7). Note that ITS is "
"not modeled in TCG mode."
msgstr ""

#: ../../../system/arm/virt.rst:39
msgid "32 virtio-mmio transport devices"
msgstr ""

#: ../../../system/arm/virt.rst:40
msgid "running guests using the KVM accelerator on aarch64 hardware"
msgstr ""

#: ../../../system/arm/virt.rst:41
msgid "large amounts of RAM (at least 255GB, and more if using highmem)"
msgstr ""

#: ../../../system/arm/virt.rst:42
msgid "many CPUs (up to 512 if using a GICv3 and highmem)"
msgstr ""

#: ../../../system/arm/virt.rst:43
msgid "Secure-World-only devices if the CPU has TrustZone:"
msgstr ""

#: ../../../system/arm/virt.rst:45
msgid "A second PL011 UART"
msgstr ""

#: ../../../system/arm/virt.rst:46
msgid ""
"A second PL061 GPIO controller, with GPIO lines for triggering a system "
"reset or system poweroff"
msgstr ""

#: ../../../system/arm/virt.rst:48
msgid "A secure flash memory"
msgstr ""

#: ../../../system/arm/virt.rst:49
msgid "16MB of secure RAM"
msgstr ""

#: ../../../system/arm/virt.rst:51
msgid "Supported guest CPU types:"
msgstr ""

#: ../../../system/arm/virt.rst:53
msgid "``cortex-a7`` (32-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:54
msgid "``cortex-a15`` (32-bit; the default)"
msgstr ""

#: ../../../system/arm/virt.rst:55
msgid "``cortex-a53`` (64-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:56
msgid "``cortex-a57`` (64-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:57
msgid "``cortex-a72`` (64-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:58
msgid "``cortex-a76`` (64-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:59
msgid "``a64fx`` (64-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:60
msgid "``host`` (with KVM only)"
msgstr ""

#: ../../../system/arm/virt.rst:61
msgid "``neoverse-n1`` (64-bit)"
msgstr ""

#: ../../../system/arm/virt.rst:62
msgid "``max`` (same as ``host`` for KVM; best possible emulation with TCG)"
msgstr ""

#: ../../../system/arm/virt.rst:64
msgid ""
"Note that the default is ``cortex-a15``, so for an AArch64 guest you must "
"specify a CPU type."
msgstr ""

#: ../../../system/arm/virt.rst:67
msgid ""
"Graphics output is available, but unlike the x86 PC machine types there is "
"no default display device enabled: you should select one from the Display "
"devices section of \"-device help\". The recommended option is ``virtio-gpu-"
"pci``; this is the only one which will work correctly with KVM. You may also "
"need to ensure your guest kernel is configured with support for this; see "
"below."
msgstr ""

#: ../../../system/arm/virt.rst:75
msgid "Machine-specific options"
msgstr ""

#: ../../../system/arm/virt.rst:77
msgid "The following machine-specific options are supported:"
msgstr ""

#: ../../../system/arm/virt.rst:79
msgid "secure"
msgstr ""

#: ../../../system/arm/virt.rst:80
msgid ""
"Set ``on``/``off`` to enable/disable emulating a guest CPU which implements "
"the Arm Security Extensions (TrustZone). The default is ``off``."
msgstr ""

#: ../../../system/arm/virt.rst:83
msgid "virtualization"
msgstr ""

#: ../../../system/arm/virt.rst:84
msgid ""
"Set ``on``/``off`` to enable/disable emulating a guest CPU which implements "
"the Arm Virtualization Extensions. The default is ``off``."
msgstr ""

#: ../../../system/arm/virt.rst:87
msgid "mte"
msgstr ""

#: ../../../system/arm/virt.rst:88
msgid ""
"Set ``on``/``off`` to enable/disable emulating a guest CPU which implements "
"the Arm Memory Tagging Extensions. The default is ``off``."
msgstr ""

#: ../../../system/arm/virt.rst:91
msgid "highmem"
msgstr ""

#: ../../../system/arm/virt.rst:92
msgid ""
"Set ``on``/``off`` to enable/disable placing devices and RAM in physical "
"address space above 32 bits. The default is ``on`` for machine types later "
"than ``virt-2.12``."
msgstr ""

#: ../../../system/arm/virt.rst:96
msgid "gic-version"
msgstr ""

#: ../../../system/arm/virt.rst:97
msgid ""
"Specify the version of the Generic Interrupt Controller (GIC) to provide. "
"Valid values are:"
msgstr ""

#: ../../../system/arm/virt.rst:100
msgid "``2``"
msgstr ""

#: ../../../system/arm/virt.rst:101
msgid "GICv2. Note that this limits the number of CPUs to 8."
msgstr ""

#: ../../../system/arm/virt.rst:102
msgid "``3``"
msgstr ""

#: ../../../system/arm/virt.rst:103
msgid "GICv3. This allows up to 512 CPUs."
msgstr ""

#: ../../../system/arm/virt.rst:104
msgid "``4``"
msgstr ""

#: ../../../system/arm/virt.rst:105
msgid "GICv4. Requires ``virtualization`` to be ``on``; allows up to 317 CPUs."
msgstr ""

#: ../../../system/arm/virt.rst:106
msgid "``host``"
msgstr ""

#: ../../../system/arm/virt.rst:107
msgid "Use the same GIC version the host provides, when using KVM"
msgstr ""

#: ../../../system/arm/virt.rst:108
msgid "``max``"
msgstr ""

#: ../../../system/arm/virt.rst:109
msgid ""
"Use the best GIC version possible (same as host when using KVM; with TCG "
"this is currently ``3`` if ``virtualization`` is ``off`` and ``4`` if "
"``virtualization`` is ``on``, but this may change in future)"
msgstr ""

#: ../../../system/arm/virt.rst:113
msgid "its"
msgstr ""

#: ../../../system/arm/virt.rst:114
msgid ""
"Set ``on``/``off`` to enable/disable ITS instantiation. The default is "
"``on`` for machine types later than ``virt-2.7``."
msgstr ""

#: ../../../system/arm/virt.rst:117
msgid "iommu"
msgstr ""

#: ../../../system/arm/virt.rst:118
msgid "Set the IOMMU type to create for the guest. Valid values are:"
msgstr ""

#: ../../../system/arm/virt.rst:120
msgid "``none``"
msgstr ""

#: ../../../system/arm/virt.rst:121
msgid "Don't create an IOMMU (the default)"
msgstr ""

#: ../../../system/arm/virt.rst:122
msgid "``smmuv3``"
msgstr ""

#: ../../../system/arm/virt.rst:123
msgid "Create an SMMUv3"
msgstr ""

#: ../../../system/arm/virt.rst:125
msgid "ras"
msgstr ""

#: ../../../system/arm/virt.rst:126
msgid ""
"Set ``on``/``off`` to enable/disable reporting host memory errors to a guest "
"using ACPI and guest external abort exceptions. The default is off."
msgstr ""

#: ../../../system/arm/virt.rst:129
msgid "dtb-randomness"
msgstr ""

#: ../../../system/arm/virt.rst:130
msgid ""
"Set ``on``/``off`` to pass random seeds via the guest DTB rng-seed and kaslr-"
"seed nodes (in both \"/chosen\" and \"/secure-chosen\") to use for features "
"like the random number generator and address space randomisation. The "
"default is ``on``. You will want to disable it if your trusted boot chain "
"will verify the DTB it is passed, since this option causes the DTB to be non-"
"deterministic. It would be the responsibility of the firmware to come up "
"with a seed and pass it on if it wants to."
msgstr ""

#: ../../../system/arm/virt.rst:139
msgid "dtb-kaslr-seed"
msgstr ""

#: ../../../system/arm/virt.rst:140
msgid "A deprecated synonym for dtb-randomness."
msgstr ""

#: ../../../system/arm/virt.rst:143
msgid "Linux guest kernel configuration"
msgstr ""

#: ../../../system/arm/virt.rst:145
msgid ""
"The 'defconfig' for Linux arm and arm64 kernels should include the right "
"device drivers for virtio and the PCI controller; however some older kernel "
"versions, especially for 32-bit Arm, did not have everything enabled by "
"default. If you're not seeing PCI devices that you expect, then check that "
"your guest config has::"
msgstr ""

#: ../../../system/arm/virt.rst:151
msgid ""
"CONFIG_PCI=y\n"
"CONFIG_VIRTIO_PCI=y\n"
"CONFIG_PCI_HOST_GENERIC=y"
msgstr ""

#: ../../../system/arm/virt.rst:155
msgid ""
"If you want to use the ``virtio-gpu-pci`` graphics device you will also "
"need::"
msgstr ""

#: ../../../system/arm/virt.rst:158
msgid ""
"CONFIG_DRM=y\n"
"CONFIG_DRM_VIRTIO_GPU=y"
msgstr ""

#: ../../../system/arm/virt.rst:162
msgid "Hardware configuration information for bare-metal programming"
msgstr ""

#: ../../../system/arm/virt.rst:164
msgid ""
"The ``virt`` board automatically generates a device tree blob (\"dtb\") "
"which it passes to the guest. This provides information about the addresses, "
"interrupt lines and other configuration of the various devices in the "
"system. Guest code can rely on and hard-code the following addresses:"
msgstr ""

#: ../../../system/arm/virt.rst:170
msgid "Flash memory starts at address 0x0000_0000"
msgstr ""

#: ../../../system/arm/virt.rst:172
msgid "RAM starts at 0x4000_0000"
msgstr ""

#: ../../../system/arm/virt.rst:174
msgid ""
"All other information about device locations may change between QEMU "
"versions, so guest code must look in the DTB."
msgstr ""

#: ../../../system/arm/virt.rst:177
msgid ""
"QEMU supports two types of guest image boot for ``virt``, and the way for "
"the guest code to locate the dtb binary differs:"
msgstr ""

#: ../../../system/arm/virt.rst:180
msgid ""
"For guests using the Linux kernel boot protocol (this means any non-ELF file "
"passed to the QEMU ``-kernel`` option) the address of the DTB is passed in a "
"register (``r2`` for 32-bit guests, or ``x0`` for 64-bit guests)"
msgstr ""

#: ../../../system/arm/virt.rst:185
msgid ""
"For guests booting as \"bare-metal\" (any other kind of boot), the DTB is at "
"the start of RAM (0x4000_0000)"
msgstr ""
