# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/devices/virtio-gpu.rst:5
msgid "virtio-gpu"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:7
msgid ""
"This document explains the setup and usage of the virtio-gpu device. The "
"virtio-gpu device paravirtualizes the GPU and display controller."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:11
msgid "Linux kernel support"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:13
msgid ""
"virtio-gpu requires a guest Linux kernel built with the "
"``CONFIG_DRM_VIRTIO_GPU`` option."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:17
msgid "QEMU virtio-gpu variants"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:19
msgid "QEMU virtio-gpu device variants come in the following form:"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:21
msgid "``virtio-vga[-BACKEND]``"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:22
msgid "``virtio-gpu[-BACKEND][-INTERFACE]``"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:23
msgid "``vhost-user-vga``"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:24
msgid "``vhost-user-pci``"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:26
msgid ""
"**Backends:** QEMU provides a 2D virtio-gpu backend, and two accelerated "
"backends: virglrenderer ('gl' device label) and rutabaga_gfx ('rutabaga' "
"device label).  There is a vhost-user backend that runs the graphics stack "
"in a separate process for improved isolation."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:31
msgid ""
"**Interfaces:** QEMU further categorizes virtio-gpu device variants based on "
"the interface exposed to the guest. The interfaces can be classified into "
"VGA and non-VGA variants. The VGA ones are prefixed with virtio-vga or vhost-"
"user-vga while the non-VGA ones are prefixed with virtio-gpu or vhost-user-"
"gpu."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:37
msgid ""
"The VGA ones always use the PCI interface, but for the non-VGA ones, the "
"user can further pick between MMIO or PCI. For MMIO, the user can suffix the "
"device name with -device, though vhost-user-gpu does not support MMIO. For "
"PCI, the user can suffix it with -pci. Without these suffixes, the platform "
"default will be chosen."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:44
msgid "virtio-gpu 2d"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:46
msgid ""
"The default 2D backend only performs 2D operations. The guest needs to "
"employ a software renderer for 3D graphics."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:49
msgid ""
"Typically, the software renderer is provided by `Mesa`_ or `SwiftShader`_. "
"Mesa's implementations (LLVMpipe, Lavapipe and virgl below) work out of box "
"on typical modern Linux distributions."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:54
msgid "-device virtio-gpu"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:60
msgid "virtio-gpu virglrenderer"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:62
msgid ""
"When using virgl accelerated graphics mode in the guest, OpenGL API calls "
"are translated into an intermediate representation (see `Gallium3D`_). The "
"intermediate representation is communicated to the host and the "
"`virglrenderer`_ library on the host translates the intermediate "
"representation back to OpenGL API calls."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:69
msgid "-device virtio-gpu-gl"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:74
msgid ""
"Translation of Vulkan API calls is supported since release of "
"`virglrenderer`_ v1.0.0 using `venus`_ protocol. ``Venus`` virtio-gpu "
"capability set (\"capset\") requires host blob support (``hostmem`` and "
"``blob`` fields) and should be enabled using ``venus`` field. The "
"``hostmem`` field specifies the size of virtio-gpu host memory window. This "
"is typically between 256M and 8G."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:81
msgid "-device virtio-gpu-gl,hostmem=8G,blob=true,venus=true"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:86
msgid "virtio-gpu rutabaga"
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:88
msgid ""
"virtio-gpu can also leverage rutabaga_gfx to provide `gfxstream`_ rendering "
"and `Wayland display passthrough`_.  With the gfxstream rendering mode, GLES "
"and Vulkan calls are forwarded to the host with minimal modification."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:93
msgid ""
"The crosvm book provides directions on how to build a `gfxstream-enabled "
"rutabaga`_ and launch a `guest Wayland proxy`_."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:96
msgid ""
"This device does require host blob support (``hostmem`` field below). The "
"``hostmem`` field specifies the size of virtio-gpu host memory window. This "
"is typically between 256M and 8G."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:100
msgid ""
"At least one virtio-gpu capability set (\"capset\") must be specified when "
"starting the device.  The currently capsets supported are ``gfxstream-"
"vulkan`` and ``cross-domain`` for Linux guests. For Android guests, the "
"experimental ``x-gfxstream-gles`` and ``x-gfxstream-composer`` capsets are "
"also supported."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:105
msgid ""
"The device will try to auto-detect the wayland socket path if the ``cross-"
"domain`` capset name is set.  The user may optionally specify ``wayland-"
"socket-path`` for non-standard paths."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:109
msgid ""
"The ``wsi`` option can be set to ``surfaceless`` or ``headless``. "
"Surfaceless doesn't create a native window surface, but does copy from the "
"render target to the Pixman buffer if a virtio-gpu 2D hypercall is issued. "
"Headless is like surfaceless, but doesn't copy to the Pixman buffer. "
"Surfaceless is the default if ``wsi`` is not specified."
msgstr ""

#: ../../../system/devices/virtio-gpu.rst:116
msgid ""
"-device virtio-gpu-rutabaga,gfxstream-vulkan=on,cross-domain=on,\n"
"   hostmem=8G,wayland-socket-path=/tmp/nonstandard/mock_wayland.sock,\n"
"   wsi=headless"
msgstr ""
