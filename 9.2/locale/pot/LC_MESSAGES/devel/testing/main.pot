# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/testing/main.rst:4
msgid "Testing in QEMU"
msgstr ""

#: ../../../devel/testing/main.rst:6
msgid ""
"QEMU's testing infrastructure is fairly complex as it covers everything from "
"unit testing and exercising specific sub-systems all the way to full blown "
"acceptance tests. To get an overview of the tests you can run ``make check-"
"help`` from either the source or build tree."
msgstr ""

#: ../../../devel/testing/main.rst:12
msgid ""
"Most (but not all) tests are also integrated into the meson build system so "
"can be run directly from the build tree, for example:"
msgstr ""

#: ../../../devel/testing/main.rst:15
msgid "[./pyvenv/bin/]meson test --suite qemu:softfloat"
msgstr ""

#: ../../../devel/testing/main.rst:19
msgid "will run just the softfloat tests."
msgstr ""

#: ../../../devel/testing/main.rst:21
msgid ""
"The rest of this document will cover the details for specific test groups."
msgstr ""

#: ../../../devel/testing/main.rst:25
msgid "Testing with \"make check\""
msgstr ""

#: ../../../devel/testing/main.rst:27
msgid ""
"The \"make check\" testing family includes most of the C based tests in QEMU."
msgstr ""

#: ../../../devel/testing/main.rst:29
msgid "The usual way to run these tests is:"
msgstr ""

#: ../../../devel/testing/main.rst:31
msgid "make check"
msgstr ""

#: ../../../devel/testing/main.rst:35
msgid ""
"which includes QAPI schema tests, unit tests, QTests and some iotests. "
"Different sub-types of \"make check\" tests will be explained below."
msgstr ""

#: ../../../devel/testing/main.rst:38
msgid ""
"Before running tests, it is best to build QEMU programs first. Some tests "
"expect the executables to exist and will fail with obscure messages if they "
"cannot find them."
msgstr ""

#: ../../../devel/testing/main.rst:43
msgid "Unit tests"
msgstr ""

#: ../../../devel/testing/main.rst:45
msgid ""
"Unit tests, which can be invoked with ``make check-unit``, are simple C "
"tests that typically link to individual QEMU object files and exercise them "
"by calling exported functions."
msgstr ""

#: ../../../devel/testing/main.rst:49
msgid ""
"If you are writing new code in QEMU, consider adding a unit test, especially "
"for utility modules that are relatively stateless or have few dependencies. "
"To add a new unit test:"
msgstr ""

#: ../../../devel/testing/main.rst:53
msgid "Create a new source file. For example, ``tests/unit/foo-test.c``."
msgstr ""

#: ../../../devel/testing/main.rst:55
msgid ""
"Write the test. Normally you would include the header file which exports the "
"module API, then verify the interface behaves as expected from your test. "
"The test code should be organized with the glib testing framework. Copying "
"and modifying an existing test is usually a good idea."
msgstr ""

#: ../../../devel/testing/main.rst:60
msgid ""
"Add the test to ``tests/unit/meson.build``. The unit tests are listed in a "
"dictionary called ``tests``.  The values are any additional sources and "
"dependencies to be linked with the test.  For a simple test whose source is "
"in ``tests/unit/foo-test.c``, it is enough to add an entry like::"
msgstr ""

#: ../../../devel/testing/main.rst:65
msgid ""
"{\n"
"  ...\n"
"  'foo-test': [],\n"
"  ...\n"
"}"
msgstr ""

#: ../../../devel/testing/main.rst:71
msgid ""
"Since unit tests don't require environment variables, the simplest way to "
"debug a unit test failure is often directly invoking it or even running it "
"under ``gdb``. However there can still be differences in behavior between "
"``make`` invocations and your manual run, due to ``$MALLOC_PERTURB_`` "
"environment variable (which affects memory reclamation and catches invalid "
"pointers better) and gtester options. If necessary, you can run"
msgstr ""

#: ../../../devel/testing/main.rst:78
msgid "make check-unit V=1"
msgstr ""

#: ../../../devel/testing/main.rst:82
msgid ""
"and copy the actual command line which executes the unit test, then run it "
"from the command line."
msgstr ""

#: ../../../devel/testing/main.rst:86
msgid "QTest"
msgstr ""

#: ../../../devel/testing/main.rst:88
msgid ""
"QTest is a device emulation testing framework.  It can be very useful to "
"test device models; it could also control certain aspects of QEMU (such as "
"virtual clock stepping), with a special purpose \"qtest\" protocol.  Refer "
"to :doc:`qtest` for more details."
msgstr ""

#: ../../../devel/testing/main.rst:93
msgid "QTest cases can be executed with"
msgstr ""

#: ../../../devel/testing/main.rst:95
msgid "make check-qtest"
msgstr ""

#: ../../../devel/testing/main.rst:100
msgid "Writing portable test cases"
msgstr ""

#: ../../../devel/testing/main.rst:101
msgid ""
"Both unit tests and qtests can run on POSIX hosts as well as Windows hosts. "
"Care must be taken when writing portable test cases that can be built and "
"run successfully on various hosts. The following list shows some best "
"practices:"
msgstr ""

#: ../../../devel/testing/main.rst:105
msgid ""
"Use portable APIs from glib whenever necessary, e.g.: g_setenv(), "
"g_mkdtemp(), g_mkdir()."
msgstr ""

#: ../../../devel/testing/main.rst:107
msgid ""
"Avoid using hardcoded /tmp for temporary file directory. Use g_get_tmp_dir() "
"instead."
msgstr ""

#: ../../../devel/testing/main.rst:109
msgid ""
"Bear in mind that Windows has different special string representation for "
"stdin/stdout/stderr and null devices. For example if your test case uses \"/"
"dev/fd/2\" and \"/dev/null\" on Linux, remember to use \"2\" and \"nul\" on "
"Windows instead. Also IO redirection does not work on Windows, so avoid "
"using \"2>nul\" whenever necessary."
msgstr ""

#: ../../../devel/testing/main.rst:114
msgid ""
"If your test cases uses the blkdebug feature, use relative path to pass the "
"config and image file paths in the command line as Windows absolute path "
"contains the delimiter \":\" which will confuse the blkdebug parser."
msgstr ""

#: ../../../devel/testing/main.rst:117
msgid ""
"Use double quotes in your extra QEMU command line in your test cases instead "
"of single quotes, as Windows does not drop single quotes when passing the "
"command line to QEMU."
msgstr ""

#: ../../../devel/testing/main.rst:120
msgid ""
"Windows opens a file in text mode by default, while a POSIX compliant "
"implementation treats text files and binary files the same. So if your test "
"cases opens a file to write some data and later wants to compare the written "
"data with the original one, be sure to pass the letter 'b' as part of the "
"mode string to fopen(), or O_BINARY flag for the open() call."
msgstr ""

#: ../../../devel/testing/main.rst:125
msgid ""
"If a certain test case can only run on POSIX or Linux hosts, use a proper "
"#ifdef in the codes. If the whole test suite cannot run on Windows, disable "
"the build in the meson.build file."
msgstr ""

#: ../../../devel/testing/main.rst:130
msgid "QAPI schema tests"
msgstr ""

#: ../../../devel/testing/main.rst:132
msgid ""
"The QAPI schema tests validate the QAPI parser used by QMP, by feeding "
"predefined input to the parser and comparing the result with the reference "
"output."
msgstr ""

#: ../../../devel/testing/main.rst:136
msgid ""
"The input/output data is managed under the ``tests/qapi-schema`` directory. "
"Each test case includes four files that have a common base name:"
msgstr ""

#: ../../../devel/testing/main.rst:139
msgid ""
"``${casename}.json`` - the file contains the JSON input for feeding the "
"parser"
msgstr ""

#: ../../../devel/testing/main.rst:141
msgid ""
"``${casename}.out`` - the file contains the expected stdout from the parser"
msgstr ""

#: ../../../devel/testing/main.rst:142
msgid ""
"``${casename}.err`` - the file contains the expected stderr from the parser"
msgstr ""

#: ../../../devel/testing/main.rst:143
msgid "``${casename}.exit`` - the expected error code"
msgstr ""

#: ../../../devel/testing/main.rst:145
msgid ""
"Consider adding a new QAPI schema test when you are making a change on the "
"QAPI parser (either fixing a bug or extending/modifying the syntax). To do "
"this:"
msgstr ""

#: ../../../devel/testing/main.rst:148
msgid "Add four files for the new case as explained above. For example:"
msgstr ""

#: ../../../devel/testing/main.rst:150
msgid "``$EDITOR tests/qapi-schema/foo.{json,out,err,exit}``."
msgstr ""

#: ../../../devel/testing/main.rst:152
msgid "Add the new test in ``tests/Makefile.include``. For example:"
msgstr ""

#: ../../../devel/testing/main.rst:154
msgid "``qapi-schema += foo.json``"
msgstr ""

#: ../../../devel/testing/main.rst:157
msgid "check-block"
msgstr ""

#: ../../../devel/testing/main.rst:159
msgid ""
"``make check-block`` runs a subset of the block layer iotests (the tests "
"that are in the \"auto\" group). See the \"QEMU iotests\" section below for "
"more information."
msgstr ""

#: ../../../devel/testing/main.rst:164
msgid "QEMU iotests"
msgstr ""

#: ../../../devel/testing/main.rst:166
msgid ""
"QEMU iotests, under the directory ``tests/qemu-iotests``, is the testing "
"framework widely used to test block layer related features. It is higher "
"level than \"make check\" tests and 99% of the code is written in bash or "
"Python scripts.  The testing success criteria is golden output comparison, "
"and the test files are named with numbers."
msgstr ""

#: ../../../devel/testing/main.rst:172
msgid ""
"To run iotests, make sure QEMU is built successfully, then switch to the "
"``tests/qemu-iotests`` directory under the build directory, and run ``./"
"check`` with desired arguments from there."
msgstr ""

#: ../../../devel/testing/main.rst:176
msgid ""
"By default, \"raw\" format and \"file\" protocol is used; all tests will be "
"executed, except the unsupported ones. You can override the format and "
"protocol with arguments:"
msgstr ""

#: ../../../devel/testing/main.rst:180
msgid ""
"# test with qcow2 format\n"
"./check -qcow2\n"
"# or test a different protocol\n"
"./check -nbd"
msgstr ""

#: ../../../devel/testing/main.rst:187
msgid "It's also possible to list test numbers explicitly:"
msgstr ""

#: ../../../devel/testing/main.rst:189
msgid ""
"# run selected cases with qcow2 format\n"
"./check -qcow2 001 030 153"
msgstr ""

#: ../../../devel/testing/main.rst:194
msgid ""
"Cache mode can be selected with the \"-c\" option, which may help reveal "
"bugs that are specific to certain cache mode."
msgstr ""

#: ../../../devel/testing/main.rst:197
msgid ""
"More options are supported by the ``./check`` script, run ``./check -h`` for "
"help."
msgstr ""

#: ../../../devel/testing/main.rst:201
msgid "Writing a new test case"
msgstr ""

#: ../../../devel/testing/main.rst:203
msgid ""
"Consider writing a tests case when you are making any changes to the block "
"layer. An iotest case is usually the choice for that. There are already many "
"test cases, so it is possible that extending one of them may achieve the "
"goal and save the boilerplate to create one.  (Unfortunately, there isn't a "
"100% reliable way to find a related one out of hundreds of tests.  One "
"approach is using ``git grep``.)"
msgstr ""

#: ../../../devel/testing/main.rst:210
msgid ""
"Usually an iotest case consists of two files. One is an executable that "
"produces output to stdout and stderr, the other is the expected reference "
"output. They are given the same number in file names. E.g. Test script "
"``055`` and reference output ``055.out``."
msgstr ""

#: ../../../devel/testing/main.rst:215
msgid ""
"In rare cases, when outputs differ between cache mode ``none`` and others, a "
"``.out.nocache`` file is added. In other cases, when outputs differ between "
"image formats, more than one ``.out`` files are created ending with the "
"respective format names, e.g. ``178.out.qcow2`` and ``178.out.raw``."
msgstr ""

#: ../../../devel/testing/main.rst:220
msgid ""
"There isn't a hard rule about how to write a test script, but a new test is "
"usually a (copy and) modification of an existing case.  There are a few "
"commonly used ways to create a test:"
msgstr ""

#: ../../../devel/testing/main.rst:224
msgid ""
"A Bash script. It will make use of several environmental variables related "
"to the testing procedure, and could source a group of ``common.*`` libraries "
"for some common helper routines."
msgstr ""

#: ../../../devel/testing/main.rst:228
msgid ""
"A Python unittest script. Import ``iotests`` and create a subclass of "
"``iotests.QMPTestCase``, then call ``iotests.main`` method. The downside of "
"this approach is that the output is too scarce, and the script is considered "
"harder to debug."
msgstr ""

#: ../../../devel/testing/main.rst:233
msgid ""
"A simple Python script without using unittest module. This could also import "
"``iotests`` for launching QEMU and utilities etc, but it doesn't inherit "
"from ``iotests.QMPTestCase`` therefore doesn't use the Python unittest "
"execution. This is a combination of 1 and 2."
msgstr ""

#: ../../../devel/testing/main.rst:238
msgid ""
"Pick the language per your preference since both Bash and Python have "
"comparable library support for invoking and interacting with QEMU programs. "
"If you opt for Python, it is strongly recommended to write Python 3 "
"compatible code."
msgstr ""

#: ../../../devel/testing/main.rst:243
msgid ""
"Both Python and Bash frameworks in iotests provide helpers to manage test "
"images. They can be used to create and clean up images under the test "
"directory. If no I/O or any protocol specific feature is needed, it is often "
"more convenient to use the pseudo block driver, ``null-co://``, as the test "
"image, which doesn't require image creation or cleaning up. Avoid system-"
"wide devices or files whenever possible, such as ``/dev/null`` or ``/dev/"
"zero``. Otherwise, image locking implications have to be considered.  For "
"example, another application on the host may have locked the file, possibly "
"leading to a test failure.  If using such devices are explicitly desired, "
"consider adding ``locking=off`` option to disable image locking."
msgstr ""

#: ../../../devel/testing/main.rst:255
msgid "Debugging a test case"
msgstr ""

#: ../../../devel/testing/main.rst:257
msgid ""
"The following options to the ``check`` script can be useful when debugging a "
"failing test:"
msgstr ""

#: ../../../devel/testing/main.rst:260
msgid ""
"``-gdb`` wraps every QEMU invocation in a ``gdbserver``, which waits for a "
"connection from a gdb client.  The options given to ``gdbserver`` (e.g. the "
"address on which to listen for connections) are taken from the "
"``$GDB_OPTIONS`` environment variable.  By default (if ``$GDB_OPTIONS`` is "
"empty), it listens on ``localhost:12345``. It is possible to connect to it "
"for example with ``gdb -iex \"target remote $addr\"``, where ``$addr`` is "
"the address ``gdbserver`` listens on. If the ``-gdb`` option is not used, "
"``$GDB_OPTIONS`` is ignored, regardless of whether it is set or not."
msgstr ""

#: ../../../devel/testing/main.rst:271
msgid ""
"``-valgrind`` attaches a valgrind instance to QEMU. If it detects warnings, "
"it will print and save the log in ``$TEST_DIR/<valgrind_pid>.valgrind``. The "
"final command line will be ``valgrind --log-file=$TEST_DIR/ <valgrind_pid>."
"valgrind --error-exitcode=99 $QEMU ...``"
msgstr ""

#: ../../../devel/testing/main.rst:277
msgid ""
"``-d`` (debug) just increases the logging verbosity, showing for example the "
"QMP commands and answers."
msgstr ""

#: ../../../devel/testing/main.rst:280
msgid ""
"``-p`` (print) redirects QEMU’s stdout and stderr to the test output, "
"instead of saving it into a log file in ``$TEST_DIR/qemu-machine-"
"<random_string>``."
msgstr ""

#: ../../../devel/testing/main.rst:285
msgid "Test case groups"
msgstr ""

#: ../../../devel/testing/main.rst:287
msgid ""
"\"Tests may belong to one or more test groups, which are defined in the form "
"of a comment in the test source file. By convention, test groups are listed "
"in the second line of the test file, after the \"#!/...\" line, like this:"
msgstr ""

#: ../../../devel/testing/main.rst:291
msgid ""
"#!/usr/bin/env python3\n"
"# group: auto quick\n"
"#\n"
"..."
msgstr ""

#: ../../../devel/testing/main.rst:298
msgid ""
"Another way of defining groups is creating the tests/qemu-iotests/group."
"local file. This should be used only for downstream (this file should never "
"appear in upstream). This file may be used for defining some downstream test "
"groups or for temporarily disabling tests, like this:"
msgstr ""

#: ../../../devel/testing/main.rst:303
msgid ""
"# groups for some company downstream process\n"
"#\n"
"# ci - tests to run on build\n"
"# down - our downstream tests, not for upstream\n"
"#\n"
"# Format of each line is:\n"
"# TEST_NAME TEST_GROUP [TEST_GROUP ]...\n"
"\n"
"013 ci\n"
"210 disabled\n"
"215 disabled\n"
"our-ugly-workaround-test down ci"
msgstr ""

#: ../../../devel/testing/main.rst:318
msgid "Note that the following group names have a special meaning:"
msgstr ""

#: ../../../devel/testing/main.rst:320
msgid "quick: Tests in this group should finish within a few seconds."
msgstr ""

#: ../../../devel/testing/main.rst:322
msgid ""
"auto: Tests in this group are used during \"make check\" and should be "
"runnable in any case. That means they should run with every QEMU binary "
"(also non-x86), with every QEMU configuration (i.e. must not fail if an "
"optional feature is not compiled in - but reporting a \"skip\" is ok), work "
"at least with the qcow2 file format, work with all kind of host filesystems "
"and users (e.g. \"nobody\" or \"root\") and must not take too much memory "
"and disk space (since CI pipelines tend to fail otherwise)."
msgstr ""

#: ../../../devel/testing/main.rst:330
msgid "disabled: Tests in this group are disabled and ignored by check."
msgstr ""

#: ../../../devel/testing/main.rst:335
msgid "Container based tests"
msgstr ""

#: ../../../devel/testing/main.rst:338
msgid "Introduction"
msgstr ""

#: ../../../devel/testing/main.rst:340
msgid ""
"The container testing framework in QEMU utilizes public images to build and "
"test QEMU in predefined and widely accessible Linux environments. This makes "
"it possible to expand the test coverage across distros, toolchain flavors "
"and library versions. The support was originally written for Docker although "
"we also support Podman as an alternative container runtime. Although many of "
"the target names and scripts are prefixed with \"docker\" the system will "
"automatically run on whichever is configured."
msgstr ""

#: ../../../devel/testing/main.rst:349
msgid ""
"The container images are also used to augment the generation of tests for "
"testing TCG. See :ref:`checktcg-ref` for more details."
msgstr ""

#: ../../../devel/testing/main.rst:353
msgid "Docker Prerequisites"
msgstr ""

#: ../../../devel/testing/main.rst:355
msgid ""
"Install \"docker\" with the system package manager and start the Docker "
"service on your development machine, then make sure you have the privilege "
"to run Docker commands. Typically it means setting up passwordless ``sudo "
"docker`` command or login as root. For example:"
msgstr ""

#: ../../../devel/testing/main.rst:360
msgid ""
"$ sudo yum install docker\n"
"$ # or `apt-get install docker` for Ubuntu, etc.\n"
"$ sudo systemctl start docker\n"
"$ sudo docker ps"
msgstr ""

#: ../../../devel/testing/main.rst:367 ../../../devel/testing/main.rst:393
msgid ""
"The last command should print an empty table, to verify the system is ready."
msgstr ""

#: ../../../devel/testing/main.rst:369
msgid ""
"An alternative method to set up permissions is by adding the current user to "
"\"docker\" group and making the docker daemon socket file (by default ``/var/"
"run/docker.sock``) accessible to the group:"
msgstr ""

#: ../../../devel/testing/main.rst:373
msgid ""
"$ sudo groupadd docker\n"
"$ sudo usermod $USER -a -G docker\n"
"$ sudo chown :docker /var/run/docker.sock"
msgstr ""

#: ../../../devel/testing/main.rst:379
msgid ""
"Note that any one of above configurations makes it possible for the user to "
"exploit the whole host with Docker bind mounting or other privileged "
"operations.  So only do it on development machines."
msgstr ""

#: ../../../devel/testing/main.rst:384
msgid "Podman Prerequisites"
msgstr ""

#: ../../../devel/testing/main.rst:386
msgid "Install \"podman\" with the system package manager."
msgstr ""

#: ../../../devel/testing/main.rst:388
msgid ""
"$ sudo dnf install podman\n"
"$ podman ps"
msgstr ""

#: ../../../devel/testing/main.rst:396 ../../../devel/testing/main.rst:771
msgid "Quickstart"
msgstr ""

#: ../../../devel/testing/main.rst:398
msgid ""
"From source tree, type ``make docker-help`` to see the help. Testing can be "
"started without configuring or building QEMU (``configure`` and ``make`` are "
"done in the container, with parameters defined by the make target):"
msgstr ""

#: ../../../devel/testing/main.rst:403
msgid "make docker-test-build@debian"
msgstr ""

#: ../../../devel/testing/main.rst:407
msgid ""
"This will create a container instance using the ``debian`` image (the image "
"is downloaded and initialized automatically), in which the ``test-build`` "
"job is executed."
msgstr ""

#: ../../../devel/testing/main.rst:412
msgid "Registry"
msgstr ""

#: ../../../devel/testing/main.rst:414
msgid ""
"The QEMU project has a container registry hosted by GitLab at ``registry."
"gitlab.com/qemu-project/qemu`` which will automatically be used to pull in "
"pre-built layers. This avoids unnecessary strain on the distro archives "
"created by multiple developers running the same container build steps over "
"and over again. This can be overridden locally by using the ``NOCACHE`` "
"build option:"
msgstr ""

#: ../../../devel/testing/main.rst:421
msgid "make docker-image-debian-arm64-cross NOCACHE=1"
msgstr ""

#: ../../../devel/testing/main.rst:426
msgid "Images"
msgstr ""

#: ../../../devel/testing/main.rst:428
msgid ""
"Along with many other images, the ``debian`` image is defined in a "
"Dockerfile in ``tests/docker/dockerfiles/``, called ``debian.docker``. "
"``make docker-help`` command will list all the available images."
msgstr ""

#: ../../../devel/testing/main.rst:432
msgid ""
"A ``.pre`` script can be added beside the ``.docker`` file, which will be "
"executed before building the image under the build context directory. This "
"is mainly used to do necessary host side setup. One such setup is "
"``binfmt_misc``, for example, to make qemu-user powered cross build "
"containers work."
msgstr ""

#: ../../../devel/testing/main.rst:437
msgid ""
"Most of the existing Dockerfiles were written by hand, simply by creating a "
"a new ``.docker`` file under the ``tests/docker/dockerfiles/`` directory. "
"This has led to an inconsistent set of packages being present across the "
"different containers."
msgstr ""

#: ../../../devel/testing/main.rst:442
msgid ""
"Thus going forward, QEMU is aiming to automatically generate the Dockerfiles "
"using the ``lcitool`` program provided by the ``libvirt-ci`` project:"
msgstr ""

#: ../../../devel/testing/main.rst:445
msgid "https://gitlab.com/libvirt/libvirt-ci"
msgstr ""

#: ../../../devel/testing/main.rst:447
msgid ""
"``libvirt-ci`` contains an ``lcitool`` program as well as a list of mappings "
"to distribution package names for a wide variety of third party projects.  "
"``lcitool`` applies the mappings to a list of build pre-requisites in "
"``tests/lcitool/projects/qemu.yml``, determines the list of native packages "
"to install on each distribution, and uses them to generate build "
"environments (dockerfiles and Cirrus CI variable files) that are consistent "
"across OS distribution."
msgstr ""

#: ../../../devel/testing/main.rst:457
msgid "Adding new build pre-requisites"
msgstr ""

#: ../../../devel/testing/main.rst:459
msgid ""
"When preparing a patch series that adds a new build pre-requisite to QEMU, "
"the prerequisites should to be added to ``tests/lcitool/projects/qemu.yml`` "
"in order to make the dependency available in the CI build environments."
msgstr ""

#: ../../../devel/testing/main.rst:464
msgid ""
"In the simple case where the pre-requisite is already known to ``libvirt-"
"ci`` the following steps are needed:"
msgstr ""

#: ../../../devel/testing/main.rst:467
msgid "Edit ``tests/lcitool/projects/qemu.yml`` and add the pre-requisite"
msgstr ""

#: ../../../devel/testing/main.rst:469
msgid ""
"Run ``make lcitool-refresh`` to re-generate all relevant build environment "
"manifests"
msgstr ""

#: ../../../devel/testing/main.rst:472
msgid ""
"It may be that ``libvirt-ci`` does not know about the new pre-requisite. If "
"that is the case, some extra preparation steps will be required first to "
"contribute the mapping to the ``libvirt-ci`` project:"
msgstr ""

#: ../../../devel/testing/main.rst:476 ../../../devel/testing/main.rst:532
msgid "Fork the ``libvirt-ci`` project on gitlab"
msgstr ""

#: ../../../devel/testing/main.rst:478
msgid ""
"Add an entry for the new build prerequisite to ``lcitool/facts/mappings."
"yml``, listing its native package name on as many OS distros as practical.  "
"Run ``python -m pytest --regenerate-output`` and check that the changes are "
"correct."
msgstr ""

#: ../../../devel/testing/main.rst:483
msgid ""
"Commit the ``mappings.yml`` change together with the regenerated test files, "
"and submit a merge request to the ``libvirt-ci`` project. Please note in the "
"description that this is a new build pre-requisite desired for use with QEMU."
msgstr ""

#: ../../../devel/testing/main.rst:488 ../../../devel/testing/main.rst:549
msgid ""
"CI pipeline will run to validate that the changes to ``mappings.yml`` are "
"correct, by attempting to install the newly listed package on all OS "
"distributions supported by ``libvirt-ci``."
msgstr ""

#: ../../../devel/testing/main.rst:492
msgid ""
"Once the merge request is accepted, go back to QEMU and update the ``tests/"
"lcitool/libvirt-ci`` submodule to point to a commit that contains the "
"``mappings.yml`` update.  Then add the prerequisite and run ``make lcitool-"
"refresh``."
msgstr ""

#: ../../../devel/testing/main.rst:497
msgid ""
"Please also trigger gitlab container generation pipelines on your change for "
"as many OS distros as practical to make sure that there are no obvious "
"breakages when adding the new pre-requisite. Please see `CI <https://www."
"qemu.org/docs/master/devel/ci.html>`__ documentation page on how to trigger "
"gitlab CI pipelines on your change."
msgstr ""

#: ../../../devel/testing/main.rst:503
msgid ""
"For enterprise distros that default to old, end-of-life versions of the "
"Python runtime, QEMU uses a separate set of mappings that work with more "
"recent versions.  These can be found in ``tests/lcitool/mappings.yml``. "
"Modifying this file should not be necessary unless the new pre-requisite is "
"a Python library or tool."
msgstr ""

#: ../../../devel/testing/main.rst:511
msgid "Adding new OS distros"
msgstr ""

#: ../../../devel/testing/main.rst:513
msgid ""
"In some cases ``libvirt-ci`` will not know about the OS distro that is "
"desired to be tested. Before adding a new OS distro, discuss the proposed "
"addition:"
msgstr ""

#: ../../../devel/testing/main.rst:517
msgid ""
"Send a mail to qemu-devel, copying people listed in the MAINTAINERS file for "
"``Build and test automation``."
msgstr ""

#: ../../../devel/testing/main.rst:520
msgid ""
"There are limited CI compute resources available to QEMU, so the cost/"
"benefit tradeoff of adding new OS distros needs to be considered."
msgstr ""

#: ../../../devel/testing/main.rst:523
msgid ""
"File an issue at https://gitlab.com/libvirt/libvirt-ci/-/issues pointing to "
"the qemu-devel mail thread in the archives."
msgstr ""

#: ../../../devel/testing/main.rst:526
msgid ""
"This alerts other people who might be interested in the work to avoid "
"duplication, as well as to get feedback from libvirt-ci maintainers on any "
"tips to ease the addition"
msgstr ""

#: ../../../devel/testing/main.rst:530
msgid "Assuming there is agreement to add a new OS distro then"
msgstr ""

#: ../../../devel/testing/main.rst:534
msgid ""
"Add metadata under ``lcitool/facts/targets/`` for the new OS distro. There "
"might be code changes required if the OS distro uses a package format not "
"currently known. The ``libvirt-ci`` maintainers can advise on this when the "
"issue is filed."
msgstr ""

#: ../../../devel/testing/main.rst:539
msgid ""
"Edit the ``lcitool/facts/mappings.yml`` change to add entries for the new "
"OS, listing the native package names for as many packages as practical.  Run "
"``python -m pytest --regenerate-output`` and check that the changes are "
"correct."
msgstr ""

#: ../../../devel/testing/main.rst:544
msgid ""
"Commit the changes to ``lcitool/facts`` and the regenerated test files, and "
"submit a merge request to the ``libvirt-ci`` project. Please note in the "
"description that this is a new build pre-requisite desired for use with QEMU"
msgstr ""

#: ../../../devel/testing/main.rst:553
msgid ""
"Once the merge request is accepted, go back to QEMU and update the ``libvirt-"
"ci`` submodule to point to a commit that contains the ``mappings.yml`` "
"update."
msgstr ""

#: ../../../devel/testing/main.rst:559
msgid "Tests"
msgstr ""

#: ../../../devel/testing/main.rst:561
msgid ""
"Different tests are added to cover various configurations to build and test "
"QEMU.  Docker tests are the executables under ``tests/docker`` named ``test-"
"*``. They are typically shell scripts and are built on top of a shell "
"library, ``tests/docker/common.rc``, which provides helpers to find the QEMU "
"source and build it."
msgstr ""

#: ../../../devel/testing/main.rst:567
msgid "The full list of tests is printed in the ``make docker-help`` help."
msgstr ""

#: ../../../devel/testing/main.rst:570
msgid "Debugging a Docker test failure"
msgstr ""

#: ../../../devel/testing/main.rst:572
msgid ""
"When CI tasks, maintainers or yourself report a Docker test failure, follow "
"the below steps to debug it:"
msgstr ""

#: ../../../devel/testing/main.rst:575
msgid ""
"Locally reproduce the failure with the reported command line. E.g. run "
"``make docker-test-mingw@fedora-win64-cross J=8``."
msgstr ""

#: ../../../devel/testing/main.rst:577
msgid "Add \"V=1\" to the command line, try again, to see the verbose output."
msgstr ""

#: ../../../devel/testing/main.rst:578
msgid ""
"Further add \"DEBUG=1\" to the command line. This will pause in a shell "
"prompt in the container right before testing starts. You could either "
"manually build QEMU and run tests from there, or press Ctrl-D to let the "
"Docker testing continue."
msgstr ""

#: ../../../devel/testing/main.rst:582
msgid ""
"If you press Ctrl-D, the same building and testing procedure will begin, and "
"will hopefully run into the error again. After that, you will be dropped to "
"the prompt for debug."
msgstr ""

#: ../../../devel/testing/main.rst:587
msgid "Options"
msgstr ""

#: ../../../devel/testing/main.rst:589
msgid ""
"Various options can be used to affect how Docker tests are done. The full "
"list is in the ``make docker`` help text. The frequently used ones are:"
msgstr ""

#: ../../../devel/testing/main.rst:592
msgid ""
"``V=1``: the same as in top level ``make``. It will be propagated to the "
"container and enable verbose output."
msgstr ""

#: ../../../devel/testing/main.rst:594
msgid ""
"``J=$N``: the number of parallel tasks in make commands in the container, "
"similar to the ``-j $N`` option in top level ``make``. (The ``-j`` option in "
"top level ``make`` will not be propagated into the container.)"
msgstr ""

#: ../../../devel/testing/main.rst:597
msgid ""
"``DEBUG=1``: enables debug. See the previous \"Debugging a Docker test "
"failure\" section."
msgstr ""

#: ../../../devel/testing/main.rst:601
msgid "Thread Sanitizer"
msgstr ""

#: ../../../devel/testing/main.rst:603
msgid ""
"Thread Sanitizer (TSan) is a tool which can detect data races.  QEMU "
"supports building and testing with this tool."
msgstr ""

#: ../../../devel/testing/main.rst:606
msgid "For more information on TSan:"
msgstr ""

#: ../../../devel/testing/main.rst:608
msgid "https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual"
msgstr ""

#: ../../../devel/testing/main.rst:611
msgid "Thread Sanitizer in Docker"
msgstr ""

#: ../../../devel/testing/main.rst:612
msgid "TSan is currently supported in the ubuntu2204 docker."
msgstr ""

#: ../../../devel/testing/main.rst:614
msgid "The test-tsan test will build using TSan and then run make check."
msgstr ""

#: ../../../devel/testing/main.rst:616
msgid "make docker-test-tsan@ubuntu2204"
msgstr ""

#: ../../../devel/testing/main.rst:620
msgid "TSan warnings under docker are placed in files located at build/tsan/."
msgstr ""

#: ../../../devel/testing/main.rst:622
msgid ""
"We recommend using DEBUG=1 to allow launching the test from inside the "
"docker, and to allow review of the warnings generated by TSan."
msgstr ""

#: ../../../devel/testing/main.rst:626
msgid "Building and Testing with TSan"
msgstr ""

#: ../../../devel/testing/main.rst:628
msgid ""
"It is possible to build and test with TSan, with a few additional steps. "
"These steps are normally done automatically in the docker."
msgstr ""

#: ../../../devel/testing/main.rst:631
msgid ""
"TSan is supported for clang and gcc. One particularity of sanitizers is that "
"all the code, including shared objects dependencies, should be built with "
"it. In the case of TSan, any synchronization primitive from glib (GMutex for "
"instance) will not be recognized, and will lead to false positives."
msgstr ""

#: ../../../devel/testing/main.rst:637
msgid "To build a tsan version of glib:"
msgstr ""

#: ../../../devel/testing/main.rst:639
msgid ""
"$ git clone --depth=1 --branch=2.81.0 https://github.com/GNOME/glib.git\n"
"$ cd glib\n"
"$ CFLAGS=\"-O2 -g -fsanitize=thread\" meson build\n"
"$ ninja -C build"
msgstr ""

#: ../../../devel/testing/main.rst:646
msgid "To configure the build for TSan:"
msgstr ""

#: ../../../devel/testing/main.rst:648
msgid ""
"../configure --enable-tsan \\\n"
"             --disable-werror --extra-cflags=\"-O0\""
msgstr ""

#: ../../../devel/testing/main.rst:653
msgid "When executing qemu, don't forget to point to tsan glib:"
msgstr ""

#: ../../../devel/testing/main.rst:655
msgid ""
"$ glib_dir=/path/to/glib\n"
"$ export LD_LIBRARY_PATH=$glib_dir/build/gio:$glib_dir/build/glib:$glib_dir/"
"build/gmodule:$glib_dir/build/gobject:$glib_dir/build/gthread\n"
"# check correct version is used\n"
"$ ldd build/qemu-x86_64 | grep glib\n"
"$ qemu-system-x86_64 ..."
msgstr ""

#: ../../../devel/testing/main.rst:663
msgid ""
"The runtime behavior of TSAN is controlled by the TSAN_OPTIONS environment "
"variable."
msgstr ""

#: ../../../devel/testing/main.rst:666
msgid "More information on the TSAN_OPTIONS can be found here:"
msgstr ""

#: ../../../devel/testing/main.rst:668 ../../../devel/testing/main.rst:706
msgid "https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags"
msgstr ""

#: ../../../devel/testing/main.rst:670
msgid "For example:"
msgstr ""

#: ../../../devel/testing/main.rst:672
msgid ""
"export TSAN_OPTIONS=suppressions=<path to qemu>/tests/tsan/suppressions.tsan "
"\\\n"
"                    detect_deadlocks=false history_size=7 exitcode=0 \\\n"
"                    log_path=<build path>/tsan/tsan_warning"
msgstr ""

#: ../../../devel/testing/main.rst:678
msgid ""
"The above exitcode=0 has TSan continue without error if any warnings are "
"found. This allows for running the test and then checking the warnings "
"afterwards. If you want TSan to stop and exit with error on warnings, use "
"exitcode=66."
msgstr ""

#: ../../../devel/testing/main.rst:683
msgid "TSan Suppressions"
msgstr ""

#: ../../../devel/testing/main.rst:684
msgid ""
"Keep in mind that for any data race warning, although there might be a data "
"race detected by TSan, there might be no actual bug here.  TSan provides "
"several different mechanisms for suppressing warnings.  In general it is "
"recommended to fix the code if possible to eliminate the data race rather "
"than suppress the warning."
msgstr ""

#: ../../../devel/testing/main.rst:690
msgid "A few important files for suppressing warnings are:"
msgstr ""

#: ../../../devel/testing/main.rst:692
msgid ""
"tests/tsan/suppressions.tsan - Has TSan warnings we wish to suppress at "
"runtime. The comment on each suppression will typically indicate why we are "
"suppressing it.  More information on the file format can be found here:"
msgstr ""

#: ../../../devel/testing/main.rst:696
msgid "https://github.com/google/sanitizers/wiki/ThreadSanitizerSuppressions"
msgstr ""

#: ../../../devel/testing/main.rst:698
msgid ""
"tests/tsan/ignore.tsan - Has TSan warnings we wish to disable at compile "
"time for test or debug. Add flags to configure to enable:"
msgstr ""

#: ../../../devel/testing/main.rst:702
msgid ""
"\"--extra-cflags=-fsanitize-blacklist=<src path>/tests/tsan/ignore.tsan\""
msgstr ""

#: ../../../devel/testing/main.rst:704
msgid ""
"More information on the file format can be found here under \"Blacklist "
"Format\":"
msgstr ""

#: ../../../devel/testing/main.rst:709
msgid "TSan Annotations"
msgstr ""

#: ../../../devel/testing/main.rst:710
msgid ""
"include/qemu/tsan.h defines annotations.  See this file for more "
"descriptions of the annotations themselves.  Annotations can be used to "
"suppress TSan warnings or give TSan more information so that it can detect "
"proper relationships between accesses of data."
msgstr ""

#: ../../../devel/testing/main.rst:715
msgid "Annotation examples can be found here:"
msgstr ""

#: ../../../devel/testing/main.rst:717
msgid "https://github.com/llvm/llvm-project/tree/master/compiler-rt/test/tsan/"
msgstr ""

#: ../../../devel/testing/main.rst:719
msgid ""
"Good files to start with are: annotate_happens_before.cpp and ignore_race.cpp"
msgstr ""

#: ../../../devel/testing/main.rst:721
msgid "The full set of annotations can be found here:"
msgstr ""

#: ../../../devel/testing/main.rst:723
msgid ""
"https://github.com/llvm/llvm-project/blob/master/compiler-rt/lib/tsan/rtl/"
"tsan_interface_ann.cpp"
msgstr ""

#: ../../../devel/testing/main.rst:726
msgid "docker-binfmt-image-debian-% targets"
msgstr ""

#: ../../../devel/testing/main.rst:728
msgid ""
"It is possible to combine Debian's bootstrap scripts with a configured "
"``binfmt_misc`` to bootstrap a number of Debian's distros including "
"experimental ports not yet supported by a released OS. This can simplify "
"setting up a rootfs by using docker to contain the foreign rootfs rather "
"than manually invoking chroot."
msgstr ""

#: ../../../devel/testing/main.rst:735
msgid "Setting up ``binfmt_misc``"
msgstr ""

#: ../../../devel/testing/main.rst:737
msgid ""
"You can use the script ``qemu-binfmt-conf.sh`` to configure a QEMU user "
"binary to automatically run binaries for the foreign architecture. While the "
"scripts will try their best to work with dynamically linked QEMU's a "
"statically linked one will present less potential complications when copying "
"into the docker image. Modern kernels support the ``F`` (fix binary) flag "
"which will open the QEMU executable on setup and avoids the need to find and "
"re-open in the chroot environment. This is triggered with the ``--"
"persistent`` flag."
msgstr ""

#: ../../../devel/testing/main.rst:747
msgid "Example invocation"
msgstr ""

#: ../../../devel/testing/main.rst:749
msgid "For example to setup the HPPA ports builds of Debian::"
msgstr ""

#: ../../../devel/testing/main.rst:751
msgid ""
"make docker-binfmt-image-debian-sid-hppa \\\n"
"  DEB_TYPE=sid DEB_ARCH=hppa \\\n"
"  DEB_URL=http://ftp.ports.debian.org/debian-ports/ \\\n"
"  DEB_KEYRING=/usr/share/keyrings/debian-ports-archive-keyring.gpg \\\n"
"  EXECUTABLE=(pwd)/qemu-hppa V=1"
msgstr ""

#: ../../../devel/testing/main.rst:757
msgid ""
"The ``DEB_`` variables are substitutions used by ``debian-bootstrap.pre`` "
"which is called to do the initial debootstrap of the rootfs before it is "
"copied into the container. The second stage is run as part of the build. The "
"final image will be tagged as ``qemu/debian-sid-hppa``."
msgstr ""

#: ../../../devel/testing/main.rst:764
msgid "VM testing"
msgstr ""

#: ../../../devel/testing/main.rst:766
msgid ""
"This test suite contains scripts that bootstrap various guest images that "
"have necessary packages to build QEMU. The basic usage is documented in "
"``Makefile`` help which is displayed with ``make vm-help``."
msgstr ""

#: ../../../devel/testing/main.rst:773
msgid ""
"Run ``make vm-help`` to list available make targets. Invoke a specific make "
"command to run build test in an image. For example, ``make vm-build-"
"freebsd`` will build the source tree in the FreeBSD image. The command can "
"be executed from either the source tree or the build dir; if the former, ``./"
"configure`` is not needed. The command will then generate the test image in "
"``./tests/vm/`` under the working directory."
msgstr ""

#: ../../../devel/testing/main.rst:780
msgid ""
"Note: images created by the scripts accept a well-known RSA key pair for SSH "
"access, so they SHOULD NOT be exposed to external interfaces if you are "
"concerned about attackers taking control of the guest and potentially "
"exploiting a QEMU security bug to compromise the host."
msgstr ""

#: ../../../devel/testing/main.rst:786
msgid "QEMU binaries"
msgstr ""

#: ../../../devel/testing/main.rst:788
msgid ""
"By default, ``qemu-system-x86_64`` is searched in $PATH to run the guest. If "
"there isn't one, or if it is older than 2.10, the test won't work. In this "
"case, provide the QEMU binary in env var: ``QEMU=/path/to/qemu-2.10+``."
msgstr ""

#: ../../../devel/testing/main.rst:792
msgid ""
"Likewise the path to ``qemu-img`` can be set in QEMU_IMG environment "
"variable."
msgstr ""

#: ../../../devel/testing/main.rst:795
msgid "Make jobs"
msgstr ""

#: ../../../devel/testing/main.rst:797
msgid ""
"The ``-j$X`` option in the make command line is not propagated into the VM, "
"specify ``J=$X`` to control the make jobs in the guest."
msgstr ""

#: ../../../devel/testing/main.rst:801
msgid "Debugging"
msgstr ""

#: ../../../devel/testing/main.rst:803
msgid ""
"Add ``DEBUG=1`` and/or ``V=1`` to the make command to allow interactive "
"debugging and verbose output. If this is not enough, see the next section. "
"``V=1`` will be propagated down into the make jobs in the guest."
msgstr ""

#: ../../../devel/testing/main.rst:808
msgid "Manual invocation"
msgstr ""

#: ../../../devel/testing/main.rst:810
msgid ""
"Each guest script is an executable script with the same command line "
"options. For example to work with the netbsd guest, use ``$QEMU_SRC/tests/vm/"
"netbsd``:"
msgstr ""

#: ../../../devel/testing/main.rst:813
msgid ""
"$ cd $QEMU_SRC/tests/vm\n"
"\n"
"# To bootstrap the image\n"
"$ ./netbsd --build-image --image /var/tmp/netbsd.img\n"
"<...>\n"
"\n"
"# To run an arbitrary command in guest (the output will not be echoed "
"unless\n"
"# --debug is added)\n"
"$ ./netbsd --debug --image /var/tmp/netbsd.img uname -a\n"
"\n"
"# To build QEMU in guest\n"
"$ ./netbsd --debug --image /var/tmp/netbsd.img --build-qemu $QEMU_SRC\n"
"\n"
"# To get to an interactive shell\n"
"$ ./netbsd --interactive --image /var/tmp/netbsd.img sh"
msgstr ""

#: ../../../devel/testing/main.rst:832
msgid "Adding new guests"
msgstr ""

#: ../../../devel/testing/main.rst:834
msgid "Please look at existing guest scripts for how to add new guests."
msgstr ""

#: ../../../devel/testing/main.rst:836
msgid ""
"Most importantly, create a subclass of BaseVM and implement "
"``build_image()`` method and define ``BUILD_SCRIPT``, then finally call "
"``basevm.main()`` from the script's ``main()``."
msgstr ""

#: ../../../devel/testing/main.rst:840
msgid ""
"Usually in ``build_image()``, a template image is downloaded from a "
"predefined URL. ``BaseVM._download_with_cache()`` takes care of the cache "
"and the checksum, so consider using it."
msgstr ""

#: ../../../devel/testing/main.rst:844
msgid ""
"Once the image is downloaded, users, SSH server and QEMU build deps should "
"be set up:"
msgstr ""

#: ../../../devel/testing/main.rst:847
msgid "Root password set to ``BaseVM.ROOT_PASS``"
msgstr ""

#: ../../../devel/testing/main.rst:848
msgid ""
"User ``BaseVM.GUEST_USER`` is created, and password set to ``BaseVM."
"GUEST_PASS``"
msgstr ""

#: ../../../devel/testing/main.rst:850
msgid ""
"SSH service is enabled and started on boot, ``$QEMU_SRC/tests/keys/id_rsa."
"pub`` is added to ssh's ``authorized_keys`` file of both root and the normal "
"user"
msgstr ""

#: ../../../devel/testing/main.rst:853
msgid ""
"DHCP client service is enabled and started on boot, so that it can "
"automatically configure the virtio-net-pci NIC and communicate with QEMU "
"user net (10.0.2.2)"
msgstr ""

#: ../../../devel/testing/main.rst:856
msgid ""
"Necessary packages are installed to untar the source tarball and build QEMU"
msgstr ""

#: ../../../devel/testing/main.rst:859
msgid ""
"Write a proper ``BUILD_SCRIPT`` template, which should be a shell script "
"that untars a raw virtio-blk block device, which is the tarball data blob of "
"the QEMU source tree, then configure/build it. Running \"make check\" is "
"also recommended."
msgstr ""

#: ../../../devel/testing/main.rst:865
msgid "Image fuzzer testing"
msgstr ""

#: ../../../devel/testing/main.rst:867
msgid ""
"An image fuzzer was added to exercise format drivers. Currently only qcow2 "
"is supported. To start the fuzzer, run"
msgstr ""

#: ../../../devel/testing/main.rst:870
msgid ""
"tests/image-fuzzer/runner.py -c '[[\"qemu-img\", \"info\", \"$test_img\"]]' /"
"tmp/test qcow2"
msgstr ""

#: ../../../devel/testing/main.rst:874
msgid ""
"Alternatively, some command different from ``qemu-img info`` can be tested, "
"by changing the ``-c`` option."
msgstr ""

#: ../../../devel/testing/main.rst:878
msgid "Functional tests using Python"
msgstr ""

#: ../../../devel/testing/main.rst:880
msgid ""
"The ``tests/functional`` directory hosts functional tests written in Python. "
"You can run the functional tests simply by executing:"
msgstr ""

#: ../../../devel/testing/main.rst:883
msgid "make check-functional"
msgstr ""

#: ../../../devel/testing/main.rst:887
msgid "See :ref:`checkfunctional-ref` for more details."
msgstr ""

#: ../../../devel/testing/main.rst:890
msgid "Integration tests using the Avocado Framework"
msgstr ""

#: ../../../devel/testing/main.rst:892
msgid ""
"The ``tests/avocado`` directory hosts integration tests. They're usually "
"higher level tests, and may interact with external resources and with "
"various guest operating systems."
msgstr ""

#: ../../../devel/testing/main.rst:896
msgid "You can run the avocado tests simply by executing:"
msgstr ""

#: ../../../devel/testing/main.rst:898
msgid "make check-avocado"
msgstr ""

#: ../../../devel/testing/main.rst:902
msgid "See :ref:`checkavocado-ref` for more details."
msgstr ""

#: ../../../devel/testing/main.rst:908
msgid "Testing with \"make check-tcg\""
msgstr ""

#: ../../../devel/testing/main.rst:910
msgid ""
"The check-tcg tests are intended for simple smoke tests of both linux-user "
"and softmmu TCG functionality. However to build test programs for guest "
"targets you need to have cross compilers available. If your distribution "
"supports cross compilers you can do something as simple as::"
msgstr ""

#: ../../../devel/testing/main.rst:916
msgid "apt install gcc-aarch64-linux-gnu"
msgstr ""

#: ../../../devel/testing/main.rst:918
msgid ""
"The configure script will automatically pick up their presence. Sometimes "
"compilers have slightly odd names so the availability of them can be "
"prompted by passing in the appropriate configure option for the architecture "
"in question, for example::"
msgstr ""

#: ../../../devel/testing/main.rst:923
msgid "$(configure) --cross-cc-aarch64=aarch64-cc"
msgstr ""

#: ../../../devel/testing/main.rst:925
msgid ""
"There is also a ``--cross-cc-cflags-ARCH`` flag in case additional compiler "
"flags are needed to build for a given target."
msgstr ""

#: ../../../devel/testing/main.rst:928
msgid ""
"If you have the ability to run containers as the user the build system will "
"automatically use them where no system compiler is available. For "
"architectures where we also support building QEMU we will generally use the "
"same container to build tests. However there are a number of additional "
"containers defined that have a minimal cross-build environment that is only "
"suitable for building test cases. Sometimes we may use a bleeding edge "
"distribution for compiler features needed for test cases that aren't yet in "
"the LTS distros we support for QEMU itself."
msgstr ""

#: ../../../devel/testing/main.rst:938
msgid "See :ref:`container-ref` for more details."
msgstr ""

#: ../../../devel/testing/main.rst:941
msgid "Running subset of tests"
msgstr ""

#: ../../../devel/testing/main.rst:943
msgid "You can build the tests for one architecture::"
msgstr ""

#: ../../../devel/testing/main.rst:945
msgid "make build-tcg-tests-$TARGET"
msgstr ""

#: ../../../devel/testing/main.rst:947
msgid "And run with::"
msgstr ""

#: ../../../devel/testing/main.rst:949
msgid "make run-tcg-tests-$TARGET"
msgstr ""

#: ../../../devel/testing/main.rst:951
msgid ""
"Adding ``V=1`` to the invocation will show the details of how to invoke QEMU "
"for the test which is useful for debugging tests."
msgstr ""

#: ../../../devel/testing/main.rst:955
msgid "Running individual tests"
msgstr ""

#: ../../../devel/testing/main.rst:957
msgid ""
"Tests can also be run directly from the test build directory. If you run "
"``make help`` from the test build directory you will get a list of all the "
"tests that can be run. Please note that same binaries are used in multiple "
"tests, for example::"
msgstr ""

#: ../../../devel/testing/main.rst:962
msgid "make run-plugin-test-mmap-with-libinline.so"
msgstr ""

#: ../../../devel/testing/main.rst:964
msgid ""
"will run the mmap test with the ``libinline.so`` TCG plugin. The gdbstub "
"tests also re-use the test binaries but while exercising gdb."
msgstr ""

#: ../../../devel/testing/main.rst:968
msgid "TCG test dependencies"
msgstr ""

#: ../../../devel/testing/main.rst:970
msgid ""
"The TCG tests are deliberately very light on dependencies and are either "
"totally bare with minimal gcc lib support (for system-mode tests) or just "
"glibc (for linux-user tests). This is because getting a cross compiler to "
"work with additional libraries can be challenging."
msgstr ""

#: ../../../devel/testing/main.rst:976
msgid "Other TCG Tests"
msgstr ""

#: ../../../devel/testing/main.rst:978
msgid ""
"There are a number of out-of-tree test suites that are used for more "
"extensive testing of processor features."
msgstr ""

#: ../../../devel/testing/main.rst:982
msgid "KVM Unit Tests"
msgstr ""

#: ../../../devel/testing/main.rst:984
msgid ""
"The KVM unit tests are designed to run as a Guest OS under KVM but there is "
"no reason why they can't exercise the TCG as well. It provides a minimal OS "
"kernel with hooks for enabling the MMU as well as reporting test results via "
"a special device::"
msgstr ""

#: ../../../devel/testing/main.rst:989
msgid "https://git.kernel.org/pub/scm/virt/kvm/kvm-unit-tests.git"
msgstr ""

#: ../../../devel/testing/main.rst:992
msgid "Linux Test Project"
msgstr ""

#: ../../../devel/testing/main.rst:994
msgid ""
"The LTP is focused on exercising the syscall interface of a Linux kernel. It "
"checks that syscalls behave as documented and strives to exercise as many "
"corner cases as possible. It is a useful test suite to run to exercise "
"QEMU's linux-user code::"
msgstr ""

#: ../../../devel/testing/main.rst:999
msgid "https://linux-test-project.github.io/"
msgstr ""

#: ../../../devel/testing/main.rst:1002
msgid "GCC gcov support"
msgstr ""

#: ../../../devel/testing/main.rst:1004
msgid ""
"``gcov`` is a GCC tool to analyze the testing coverage by instrumenting the "
"tested code. To use it, configure QEMU with ``--enable-gcov`` option and "
"build. Then run the tests as usual."
msgstr ""

#: ../../../devel/testing/main.rst:1008
msgid ""
"If you want to gather coverage information on a single test the ``make clean-"
"gcda`` target can be used to delete any existing coverage information before "
"running a single test."
msgstr ""

#: ../../../devel/testing/main.rst:1012
msgid ""
"You can generate a HTML coverage report by executing ``make coverage-html`` "
"which will create ``meson-logs/coveragereport/index.html``."
msgstr ""

#: ../../../devel/testing/main.rst:1016
msgid ""
"Further analysis can be conducted by running the ``gcov`` command directly "
"on the various .gcda output files. Please read the ``gcov`` documentation "
"for more information."
msgstr ""
