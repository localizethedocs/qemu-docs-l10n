# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/bitops.rst:3
msgid "Bitwise operations"
msgstr ""

#: ../../../devel/bitops.rst:5
msgid ""
"The header ``qemu/bitops.h`` provides utility functions for performing "
"bitwise operations."
msgstr ""

#: ../../../../include/qemu/bitops.h:1
msgid "**Functions operating on arrays of bits**"
msgstr ""

#: ../../../../include/qemu/bitops.h:32
msgid ""
"We provide a set of functions which work on arbitrary-length arrays of bits. "
"These come in several flavours which vary in what the type of the underlying "
"storage for the bits is:"
msgstr ""

#: ../../../../include/qemu/bitops.h:36
msgid "Bits stored in an array of 'unsigned long': set_bit(), clear_bit(), etc"
msgstr ""

#: ../../../../include/qemu/bitops.h:37
msgid "Bits stored in an array of 'uint32_t': set_bit32(), clear_bit32(), etc"
msgstr ""

#: ../../../../include/qemu/bitops.h:39
msgid ""
"Because the 'unsigned long' type has a size which varies between host "
"systems, the versions using 'uint32_t' are often preferable. This is "
"particularly the case in a device model where there may be some guest-"
"visible register view of the bit array."
msgstr ""

#: ../../../../include/qemu/bitops.h:44
msgid ""
"We do not currently implement uint32_t versions of find_last_bit(), "
"find_next_bit(), find_next_zero_bit(), find_first_bit() or "
"find_first_zero_bit(), because we haven't yet needed them. If you need them "
"you should implement them similarly to the 'unsigned long' versions."
msgstr ""

#: ../../../../include/qemu/bitops.h:50
msgid ""
"You can declare a bitmap to be used with these functions via the "
"DECLARE_BITMAP and DECLARE_BITMAP32 macros in bitmap.h."
msgstr ""

#: ../../../../include/qemu/bitops.h:53
msgid "**'unsigned long' bit array APIs**"
msgstr ""

#: ../../../../include/qemu/bitops.h:63 ../../../../include/qemu/bitops.h:266
msgid "Set a bit in memory"
msgstr ""

#: ../../../../include/qemu/bitops.h:65 ../../../../include/qemu/bitops.h:78
#: ../../../../include/qemu/bitops.h:91 ../../../../include/qemu/bitops.h:104
#: ../../../../include/qemu/bitops.h:117 ../../../../include/qemu/bitops.h:130
#: ../../../../include/qemu/bitops.h:145 ../../../../include/qemu/bitops.h:160
#: ../../../../include/qemu/bitops.h:175 ../../../../include/qemu/bitops.h:185
#: ../../../../include/qemu/bitops.h:196 ../../../../include/qemu/bitops.h:209
#: ../../../../include/qemu/bitops.h:223 ../../../../include/qemu/bitops.h:247
#: ../../../../include/qemu/bitops.h:268 ../../../../include/qemu/bitops.h:281
#: ../../../../include/qemu/bitops.h:294 ../../../../include/qemu/bitops.h:307
#: ../../../../include/qemu/bitops.h:320 ../../../../include/qemu/bitops.h:333
#: ../../../../include/qemu/bitops.h:348 ../../../../include/qemu/bitops.h:363
#: ../../../../include/qemu/bitops.h:378 ../../../../include/qemu/bitops.h:396
#: ../../../../include/qemu/bitops.h:406 ../../../../include/qemu/bitops.h:416
#: ../../../../include/qemu/bitops.h:426 ../../../../include/qemu/bitops.h:436
#: ../../../../include/qemu/bitops.h:446 ../../../../include/qemu/bitops.h:456
#: ../../../../include/qemu/bitops.h:466 ../../../../include/qemu/bitops.h:476
#: ../../../../include/qemu/bitops.h:485 ../../../../include/qemu/bitops.h:496
#: ../../../../include/qemu/bitops.h:504 ../../../../include/qemu/bitops.h:523
#: ../../../../include/qemu/bitops.h:542 ../../../../include/qemu/bitops.h:561
#: ../../../../include/qemu/bitops.h:580 ../../../../include/qemu/bitops.h:605
#: ../../../../include/qemu/bitops.h:630 ../../../../include/qemu/bitops.h:656
#: ../../../../include/qemu/bitops.h:682 ../../../../include/qemu/bitops.h:711
#: ../../../../include/qemu/bitops.h:741 ../../../../include/qemu/bitops.h:771
msgid "**Parameters**"
msgstr ""

#: ../../../../include/qemu/bitops.h:67 ../../../../include/qemu/bitops.h:80
#: ../../../../include/qemu/bitops.h:93 ../../../../include/qemu/bitops.h:106
#: ../../../../include/qemu/bitops.h:119 ../../../../include/qemu/bitops.h:132
#: ../../../../include/qemu/bitops.h:147 ../../../../include/qemu/bitops.h:162
#: ../../../../include/qemu/bitops.h:177 ../../../../include/qemu/bitops.h:270
#: ../../../../include/qemu/bitops.h:283 ../../../../include/qemu/bitops.h:296
#: ../../../../include/qemu/bitops.h:309 ../../../../include/qemu/bitops.h:322
#: ../../../../include/qemu/bitops.h:335 ../../../../include/qemu/bitops.h:350
#: ../../../../include/qemu/bitops.h:365 ../../../../include/qemu/bitops.h:380
msgid "``long nr``"
msgstr ""

#: ../../../../include/qemu/bitops.h:64 ../../../../include/qemu/bitops.h:77
#: ../../../../include/qemu/bitops.h:267 ../../../../include/qemu/bitops.h:280
msgid "the bit to set"
msgstr ""

#: ../../../../include/qemu/bitops.h:66 ../../../../include/qemu/bitops.h:79
#: ../../../../include/qemu/bitops.h:92 ../../../../include/qemu/bitops.h:105
#: ../../../../include/qemu/bitops.h:118 ../../../../include/qemu/bitops.h:131
#: ../../../../include/qemu/bitops.h:146 ../../../../include/qemu/bitops.h:161
msgid "``unsigned long *addr``"
msgstr ""

#: ../../../../include/qemu/bitops.h:65 ../../../../include/qemu/bitops.h:78
#: ../../../../include/qemu/bitops.h:268 ../../../../include/qemu/bitops.h:281
msgid "the address to start counting from"
msgstr ""

#: ../../../../include/qemu/bitops.h:76 ../../../../include/qemu/bitops.h:279
msgid "Set a bit in memory atomically"
msgstr ""

#: ../../../../include/qemu/bitops.h:89 ../../../../include/qemu/bitops.h:292
msgid "Clears a bit in memory"
msgstr ""

#: ../../../../include/qemu/bitops.h:90 ../../../../include/qemu/bitops.h:103
#: ../../../../include/qemu/bitops.h:144 ../../../../include/qemu/bitops.h:293
#: ../../../../include/qemu/bitops.h:306 ../../../../include/qemu/bitops.h:347
msgid "Bit to clear"
msgstr ""

#: ../../../../include/qemu/bitops.h:91 ../../../../include/qemu/bitops.h:104
#: ../../../../include/qemu/bitops.h:117 ../../../../include/qemu/bitops.h:175
#: ../../../../include/qemu/bitops.h:294 ../../../../include/qemu/bitops.h:307
#: ../../../../include/qemu/bitops.h:320 ../../../../include/qemu/bitops.h:378
msgid "Address to start counting from"
msgstr ""

#: ../../../../include/qemu/bitops.h:102 ../../../../include/qemu/bitops.h:305
msgid "Clears a bit in memory atomically"
msgstr ""

#: ../../../../include/qemu/bitops.h:115 ../../../../include/qemu/bitops.h:318
msgid "Toggle a bit in memory"
msgstr ""

#: ../../../../include/qemu/bitops.h:116 ../../../../include/qemu/bitops.h:159
#: ../../../../include/qemu/bitops.h:319 ../../../../include/qemu/bitops.h:362
msgid "Bit to change"
msgstr ""

#: ../../../../include/qemu/bitops.h:128 ../../../../include/qemu/bitops.h:331
msgid "Set a bit and return its old value"
msgstr ""

#: ../../../../include/qemu/bitops.h:129 ../../../../include/qemu/bitops.h:332
msgid "Bit to set"
msgstr ""

#: ../../../../include/qemu/bitops.h:130 ../../../../include/qemu/bitops.h:145
#: ../../../../include/qemu/bitops.h:160 ../../../../include/qemu/bitops.h:333
#: ../../../../include/qemu/bitops.h:348 ../../../../include/qemu/bitops.h:363
msgid "Address to count from"
msgstr ""

#: ../../../../include/qemu/bitops.h:143 ../../../../include/qemu/bitops.h:346
msgid "Clear a bit and return its old value"
msgstr ""

#: ../../../../include/qemu/bitops.h:158 ../../../../include/qemu/bitops.h:361
msgid "Change a bit and return its old value"
msgstr ""

#: ../../../../include/qemu/bitops.h:173 ../../../../include/qemu/bitops.h:376
msgid "Determine whether a bit is set"
msgstr ""

#: ../../../../include/qemu/bitops.h:174 ../../../../include/qemu/bitops.h:377
msgid "bit number to test"
msgstr ""

#: ../../../../include/qemu/bitops.h:176 ../../../../include/qemu/bitops.h:187
#: ../../../../include/qemu/bitops.h:198 ../../../../include/qemu/bitops.h:211
#: ../../../../include/qemu/bitops.h:225 ../../../../include/qemu/bitops.h:249
msgid "``const unsigned long *addr``"
msgstr ""

#: ../../../../include/qemu/bitops.h:183
msgid "find the last set bit in a memory region"
msgstr ""

#: ../../../../include/qemu/bitops.h:184 ../../../../include/qemu/bitops.h:222
#: ../../../../include/qemu/bitops.h:246
msgid "The address to start the search at"
msgstr ""

#: ../../../../include/qemu/bitops.h:186 ../../../../include/qemu/bitops.h:197
#: ../../../../include/qemu/bitops.h:210 ../../../../include/qemu/bitops.h:224
#: ../../../../include/qemu/bitops.h:248
msgid "``unsigned long size``"
msgstr ""

#: ../../../../include/qemu/bitops.h:185 ../../../../include/qemu/bitops.h:223
#: ../../../../include/qemu/bitops.h:247
msgid "The maximum size to search"
msgstr ""

#: ../../../../include/qemu/bitops.h:187 ../../../../include/qemu/bitops.h:198
#: ../../../../include/qemu/bitops.h:211 ../../../../include/qemu/bitops.h:225
#: ../../../../include/qemu/bitops.h:249 ../../../../include/qemu/bitops.h:508
#: ../../../../include/qemu/bitops.h:527 ../../../../include/qemu/bitops.h:546
#: ../../../../include/qemu/bitops.h:565 ../../../../include/qemu/bitops.h:584
#: ../../../../include/qemu/bitops.h:609 ../../../../include/qemu/bitops.h:635
#: ../../../../include/qemu/bitops.h:661 ../../../../include/qemu/bitops.h:684
#: ../../../../include/qemu/bitops.h:713 ../../../../include/qemu/bitops.h:743
#: ../../../../include/qemu/bitops.h:773
msgid "**Description**"
msgstr ""

#: ../../../../include/qemu/bitops.h:187
msgid ""
"Returns the bit number of the last set bit, or **size** if there is no set "
"bit in the bitmap."
msgstr ""

#: ../../../../include/qemu/bitops.h:194
msgid "find the next set bit in a memory region"
msgstr ""

#: ../../../../include/qemu/bitops.h:195 ../../../../include/qemu/bitops.h:208
msgid "The address to base the search on"
msgstr ""

#: ../../../../include/qemu/bitops.h:197 ../../../../include/qemu/bitops.h:210
msgid "The bitmap size in bits"
msgstr ""

#: ../../../../include/qemu/bitops.h:199 ../../../../include/qemu/bitops.h:212
msgid "``unsigned long offset``"
msgstr ""

#: ../../../../include/qemu/bitops.h:196 ../../../../include/qemu/bitops.h:209
msgid "The bitnumber to start searching at"
msgstr ""

#: ../../../../include/qemu/bitops.h:199
msgid ""
"Returns the bit number of the next set bit, or **size** if there are no "
"further set bits in the bitmap."
msgstr ""

#: ../../../../include/qemu/bitops.h:207
msgid "find the next cleared bit in a memory region"
msgstr ""

#: ../../../../include/qemu/bitops.h:212
msgid ""
"Returns the bit number of the next cleared bit, or **size** if there are no "
"further clear bits in the bitmap."
msgstr ""

#: ../../../../include/qemu/bitops.h:221
msgid "find the first set bit in a memory region"
msgstr ""

#: ../../../../include/qemu/bitops.h:225
msgid ""
"Returns the bit number of the first set bit, or **size** if there is no set "
"bit in the bitmap."
msgstr ""

#: ../../../../include/qemu/bitops.h:245
msgid "find the first cleared bit in a memory region"
msgstr ""

#: ../../../../include/qemu/bitops.h:249
msgid ""
"Returns the bit number of the first cleared bit, or **size** if there is no "
"clear bit in the bitmap."
msgstr ""

#: ../../../../include/qemu/bitops.h:253
msgid "**'uint32_t' bit array APIs**"
msgstr ""

#: ../../../../include/qemu/bitops.h:269 ../../../../include/qemu/bitops.h:282
#: ../../../../include/qemu/bitops.h:295 ../../../../include/qemu/bitops.h:308
#: ../../../../include/qemu/bitops.h:321 ../../../../include/qemu/bitops.h:334
#: ../../../../include/qemu/bitops.h:349 ../../../../include/qemu/bitops.h:364
msgid "``uint32_t *addr``"
msgstr ""

#: ../../../../include/qemu/bitops.h:379
msgid "``const uint32_t *addr``"
msgstr ""

#: ../../../../include/qemu/bitops.h:381
msgid "**Miscellaneous bit operations on single values**"
msgstr ""

#: ../../../../include/qemu/bitops.h:387
msgid ""
"These functions are a collection of useful operations (rotations, bit "
"extract, bit deposit, etc) on single integer values."
msgstr ""

#: ../../../../include/qemu/bitops.h:394
msgid "rotate an 8-bit value left"
msgstr ""

#: ../../../../include/qemu/bitops.h:398 ../../../../include/qemu/bitops.h:408
msgid "``uint8_t word``"
msgstr ""

#: ../../../../include/qemu/bitops.h:395 ../../../../include/qemu/bitops.h:405
#: ../../../../include/qemu/bitops.h:415 ../../../../include/qemu/bitops.h:425
#: ../../../../include/qemu/bitops.h:435 ../../../../include/qemu/bitops.h:445
#: ../../../../include/qemu/bitops.h:455 ../../../../include/qemu/bitops.h:465
msgid "value to rotate"
msgstr ""

#: ../../../../include/qemu/bitops.h:397 ../../../../include/qemu/bitops.h:407
#: ../../../../include/qemu/bitops.h:417 ../../../../include/qemu/bitops.h:427
#: ../../../../include/qemu/bitops.h:437 ../../../../include/qemu/bitops.h:447
#: ../../../../include/qemu/bitops.h:457 ../../../../include/qemu/bitops.h:467
msgid "``unsigned int shift``"
msgstr ""

#: ../../../../include/qemu/bitops.h:396 ../../../../include/qemu/bitops.h:406
#: ../../../../include/qemu/bitops.h:416 ../../../../include/qemu/bitops.h:426
#: ../../../../include/qemu/bitops.h:436 ../../../../include/qemu/bitops.h:446
#: ../../../../include/qemu/bitops.h:456 ../../../../include/qemu/bitops.h:466
msgid "bits to roll"
msgstr ""

#: ../../../../include/qemu/bitops.h:404
msgid "rotate an 8-bit value right"
msgstr ""

#: ../../../../include/qemu/bitops.h:414
msgid "rotate a 16-bit value left"
msgstr ""

#: ../../../../include/qemu/bitops.h:418 ../../../../include/qemu/bitops.h:428
msgid "``uint16_t word``"
msgstr ""

#: ../../../../include/qemu/bitops.h:424
msgid "rotate a 16-bit value right"
msgstr ""

#: ../../../../include/qemu/bitops.h:434
msgid "rotate a 32-bit value left"
msgstr ""

#: ../../../../include/qemu/bitops.h:438 ../../../../include/qemu/bitops.h:448
msgid "``uint32_t word``"
msgstr ""

#: ../../../../include/qemu/bitops.h:444
msgid "rotate a 32-bit value right"
msgstr ""

#: ../../../../include/qemu/bitops.h:454
msgid "rotate a 64-bit value left"
msgstr ""

#: ../../../../include/qemu/bitops.h:458 ../../../../include/qemu/bitops.h:468
msgid "``uint64_t word``"
msgstr ""

#: ../../../../include/qemu/bitops.h:464
msgid "rotate a 64-bit value right"
msgstr ""

#: ../../../../include/qemu/bitops.h:474
msgid "swap 16-bit halfwords within a 32-bit value"
msgstr ""

#: ../../../../include/qemu/bitops.h:478
msgid "``uint32_t h``"
msgstr ""

#: ../../../../include/qemu/bitops.h:475 ../../../../include/qemu/bitops.h:484
#: ../../../../include/qemu/bitops.h:495
msgid "value to swap"
msgstr ""

#: ../../../../include/qemu/bitops.h:483
msgid "swap 16-bit halfwords within a 64-bit value"
msgstr ""

#: ../../../../include/qemu/bitops.h:487 ../../../../include/qemu/bitops.h:498
msgid "``uint64_t h``"
msgstr ""

#: ../../../../include/qemu/bitops.h:494
msgid "swap 32-bit words within a 64-bit value"
msgstr ""

#: ../../../../include/qemu/bitops.h:506 ../../../../include/qemu/bitops.h:582
#: ../../../../include/qemu/bitops.h:632
msgid "``uint32_t value``"
msgstr ""

#: ../../../../include/qemu/bitops.h:504 ../../../../include/qemu/bitops.h:523
#: ../../../../include/qemu/bitops.h:542 ../../../../include/qemu/bitops.h:561
#: ../../../../include/qemu/bitops.h:580 ../../../../include/qemu/bitops.h:605
msgid "the value to extract the bit field from"
msgstr ""

#: ../../../../include/qemu/bitops.h:506 ../../../../include/qemu/bitops.h:525
#: ../../../../include/qemu/bitops.h:544 ../../../../include/qemu/bitops.h:563
#: ../../../../include/qemu/bitops.h:582 ../../../../include/qemu/bitops.h:607
#: ../../../../include/qemu/bitops.h:632 ../../../../include/qemu/bitops.h:658
msgid "``int start``"
msgstr ""

#: ../../../../include/qemu/bitops.h:505 ../../../../include/qemu/bitops.h:524
#: ../../../../include/qemu/bitops.h:543 ../../../../include/qemu/bitops.h:562
#: ../../../../include/qemu/bitops.h:581 ../../../../include/qemu/bitops.h:606
#: ../../../../include/qemu/bitops.h:631 ../../../../include/qemu/bitops.h:657
msgid "the lowest bit in the bit field (numbered from 0)"
msgstr ""

#: ../../../../include/qemu/bitops.h:507 ../../../../include/qemu/bitops.h:526
#: ../../../../include/qemu/bitops.h:545 ../../../../include/qemu/bitops.h:564
#: ../../../../include/qemu/bitops.h:583 ../../../../include/qemu/bitops.h:608
#: ../../../../include/qemu/bitops.h:633 ../../../../include/qemu/bitops.h:659
msgid "``int length``"
msgstr ""

#: ../../../../include/qemu/bitops.h:506 ../../../../include/qemu/bitops.h:525
#: ../../../../include/qemu/bitops.h:544 ../../../../include/qemu/bitops.h:563
#: ../../../../include/qemu/bitops.h:582 ../../../../include/qemu/bitops.h:607
#: ../../../../include/qemu/bitops.h:632 ../../../../include/qemu/bitops.h:658
msgid "the length of the bit field"
msgstr ""

#: ../../../../include/qemu/bitops.h:508
msgid ""
"Extract from the 32 bit input **value** the bit field specified by the "
"**start** and **length** parameters, and return it. The bit field must lie "
"entirely within the 32 bit word. It is valid to request that all 32 bits are "
"returned (ie **length** 32 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:513 ../../../../include/qemu/bitops.h:532
#: ../../../../include/qemu/bitops.h:551 ../../../../include/qemu/bitops.h:570
#: ../../../../include/qemu/bitops.h:591 ../../../../include/qemu/bitops.h:616
#: ../../../../include/qemu/bitops.h:643 ../../../../include/qemu/bitops.h:669
#: ../../../../include/qemu/bitops.h:695 ../../../../include/qemu/bitops.h:724
#: ../../../../include/qemu/bitops.h:754 ../../../../include/qemu/bitops.h:784
msgid "**Return**"
msgstr ""

#: ../../../../include/qemu/bitops.h:513 ../../../../include/qemu/bitops.h:532
#: ../../../../include/qemu/bitops.h:551 ../../../../include/qemu/bitops.h:570
msgid "the value of the bit field extracted from the input value."
msgstr ""

#: ../../../../include/qemu/bitops.h:525
msgid "``uint8_t value``"
msgstr ""

#: ../../../../include/qemu/bitops.h:527
msgid ""
"Extract from the 8 bit input **value** the bit field specified by the "
"**start** and **length** parameters, and return it. The bit field must lie "
"entirely within the 8 bit word. It is valid to request that all 8 bits are "
"returned (ie **length** 8 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:544
msgid "``uint16_t value``"
msgstr ""

#: ../../../../include/qemu/bitops.h:546
msgid ""
"Extract from the 16 bit input **value** the bit field specified by the "
"**start** and **length** parameters, and return it. The bit field must lie "
"entirely within the 16 bit word. It is valid to request that all 16 bits are "
"returned (ie **length** 16 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:563 ../../../../include/qemu/bitops.h:607
#: ../../../../include/qemu/bitops.h:658
msgid "``uint64_t value``"
msgstr ""

#: ../../../../include/qemu/bitops.h:565
msgid ""
"Extract from the 64 bit input **value** the bit field specified by the "
"**start** and **length** parameters, and return it. The bit field must lie "
"entirely within the 64 bit word. It is valid to request that all 64 bits are "
"returned (ie **length** 64 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:584
msgid ""
"Extract from the 32 bit input **value** the bit field specified by the "
"**start** and **length** parameters, and return it, sign extended to an "
"int32_t (ie with the most significant bit of the field propagated to all the "
"upper bits of the return value). The bit field must lie entirely within the "
"32 bit word. It is valid to request that all 32 bits are returned (ie "
"**length** 32 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:591 ../../../../include/qemu/bitops.h:616
msgid ""
"the sign extended value of the bit field extracted from the input value."
msgstr ""

#: ../../../../include/qemu/bitops.h:609
msgid ""
"Extract from the 64 bit input **value** the bit field specified by the "
"**start** and **length** parameters, and return it, sign extended to an "
"int64_t (ie with the most significant bit of the field propagated to all the "
"upper bits of the return value). The bit field must lie entirely within the "
"64 bit word. It is valid to request that all 64 bits are returned (ie "
"**length** 64 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:630 ../../../../include/qemu/bitops.h:656
msgid "initial value to insert bit field into"
msgstr ""

#: ../../../../include/qemu/bitops.h:634
msgid "``uint32_t fieldval``"
msgstr ""

#: ../../../../include/qemu/bitops.h:633 ../../../../include/qemu/bitops.h:659
msgid "the value to insert into the bit field"
msgstr ""

#: ../../../../include/qemu/bitops.h:635
msgid ""
"Deposit **fieldval** into the 32 bit **value** at the bit field specified by "
"the **start** and **length** parameters, and return the modified **value**. "
"Bits of **value** outside the bit field are not modified. Bits of "
"**fieldval** above the least significant **length** bits are ignored. The "
"bit field must lie entirely within the 32 bit word. It is valid to request "
"that all 32 bits are modified (ie **length** 32 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:643 ../../../../include/qemu/bitops.h:669
msgid "the modified **value**."
msgstr ""

#: ../../../../include/qemu/bitops.h:660
msgid "``uint64_t fieldval``"
msgstr ""

#: ../../../../include/qemu/bitops.h:661
msgid ""
"Deposit **fieldval** into the 64 bit **value** at the bit field specified by "
"the **start** and **length** parameters, and return the modified **value**. "
"Bits of **value** outside the bit field are not modified. Bits of "
"**fieldval** above the least significant **length** bits are ignored. The "
"bit field must lie entirely within the 64 bit word. It is valid to request "
"that all 64 bits are modified (ie **length** 64 and **start** 0)."
msgstr ""

#: ../../../../include/qemu/bitops.h:684 ../../../../include/qemu/bitops.h:743
msgid "``uint32_t x``"
msgstr ""

#: ../../../../include/qemu/bitops.h:682
msgid "32-bit value (of which only the bottom 16 bits are of interest)"
msgstr ""

#: ../../../../include/qemu/bitops.h:684 ../../../../include/qemu/bitops.h:713
#: ../../../../include/qemu/bitops.h:743 ../../../../include/qemu/bitops.h:773
msgid "Given an input value::"
msgstr ""

#: ../../../../include/qemu/bitops.h:686
msgid "xxxx xxxx xxxx xxxx ABCD EFGH IJKL MNOP"
msgstr ""

#: ../../../../include/qemu/bitops.h:688
msgid ""
"return the value where the bottom 16 bits are spread out into the odd bits "
"in the word, and the even bits are zeroed::"
msgstr ""

#: ../../../../include/qemu/bitops.h:691
msgid "0A0B 0C0D 0E0F 0G0H 0I0J 0K0L 0M0N 0O0P"
msgstr ""

#: ../../../../include/qemu/bitops.h:693 ../../../../include/qemu/bitops.h:722
msgid "Any bits set in the top half of the input are ignored."
msgstr ""

#: ../../../../include/qemu/bitops.h:695 ../../../../include/qemu/bitops.h:724
msgid "the shuffled bits."
msgstr ""

#: ../../../../include/qemu/bitops.h:713 ../../../../include/qemu/bitops.h:773
msgid "``uint64_t x``"
msgstr ""

#: ../../../../include/qemu/bitops.h:711
msgid "64-bit value (of which only the bottom 32 bits are of interest)"
msgstr ""

#: ../../../../include/qemu/bitops.h:715
msgid "xxxx xxxx xxxx .... xxxx xxxx ABCD EFGH IJKL MNOP QRST UVWX YZab cdef"
msgstr ""

#: ../../../../include/qemu/bitops.h:717
msgid ""
"return the value where the bottom 32 bits are spread out into the odd bits "
"in the word, and the even bits are zeroed::"
msgstr ""

#: ../../../../include/qemu/bitops.h:720
msgid "0A0B 0C0D 0E0F 0G0H 0I0J 0K0L 0M0N .... 0U0V 0W0X 0Y0Z 0a0b 0c0d 0e0f"
msgstr ""

#: ../../../../include/qemu/bitops.h:741
msgid "32-bit value (of which only the odd bits are of interest)"
msgstr ""

#: ../../../../include/qemu/bitops.h:745
msgid "xAxB xCxD xExF xGxH xIxJ xKxL xMxN xOxP"
msgstr ""

#: ../../../../include/qemu/bitops.h:747 ../../../../include/qemu/bitops.h:777
msgid ""
"return the value where all the odd bits are compressed down into the low "
"half of the word, and the high half is zeroed::"
msgstr ""

#: ../../../../include/qemu/bitops.h:750
msgid "0000 0000 0000 0000 ABCD EFGH IJKL MNOP"
msgstr ""

#: ../../../../include/qemu/bitops.h:752 ../../../../include/qemu/bitops.h:782
msgid "Any even bits set in the input are ignored."
msgstr ""

#: ../../../../include/qemu/bitops.h:754 ../../../../include/qemu/bitops.h:784
msgid "the unshuffled bits."
msgstr ""

#: ../../../../include/qemu/bitops.h:771
msgid "64-bit value (of which only the odd bits are of interest)"
msgstr ""

#: ../../../../include/qemu/bitops.h:775
msgid "xAxB xCxD xExF xGxH xIxJ xKxL xMxN .... xUxV xWxX xYxZ xaxb xcxd xexf"
msgstr ""

#: ../../../../include/qemu/bitops.h:780
msgid "0000 0000 0000 .... 0000 0000 ABCD EFGH IJKL MNOP QRST UVWX YZab cdef"
msgstr ""
