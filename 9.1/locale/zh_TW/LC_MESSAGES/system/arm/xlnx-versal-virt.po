# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/arm/xlnx-versal-virt.rst:2
msgid "Xilinx Versal Virt (``xlnx-versal-virt``)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:4
msgid ""
"Xilinx Versal is a family of heterogeneous multi-core SoCs (System on Chip) "
"that combine traditional hardened CPUs and I/O peripherals in a Processing "
"System (PS) with runtime programmable FPGA logic (PL) and an Artificial "
"Intelligence Engine (AIE)."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:9
msgid ""
"More details here: https://www.xilinx.com/products/silicon-devices/acap/"
"versal.html"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:12
msgid ""
"The family of Versal SoCs share a single architecture but come in different "
"parts with different speed grades, amounts of PL and other differences."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:16
msgid ""
"The Xilinx Versal Virt board in QEMU is a model of a virtual board (does not "
"exist in reality) with a virtual Versal SoC without I/O limitations. "
"Currently, we support the following cores and devices:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:20
msgid "Implemented CPU cores:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:22
msgid "2 ACPUs (ARM Cortex-A72)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:24
msgid "Implemented devices:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:26
msgid "Interrupt controller (ARM GICv3)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:27
msgid "2 UARTs (ARM PL011)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:28
msgid "An RTC (Versal built-in)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:29
msgid "2 GEMs (Cadence MACB Ethernet MACs)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:30
msgid "8 ADMA (Xilinx zDMA) channels"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:31
msgid "2 SD Controllers"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:32
msgid "OCM (256KB of On Chip Memory)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:33
msgid "XRAM (4MB of on chip Accelerator RAM)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:34
msgid "DDR memory"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:35
msgid "BBRAM (36 bytes of Battery-backed RAM)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:36
msgid "eFUSE (3072 bytes of one-time field-programmable bit array)"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:37
msgid "2 CANFDs"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:39
msgid ""
"QEMU does not yet model any other devices, including the PL and the AI "
"Engine."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:41
msgid "Other differences between the hardware and the QEMU model:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:43
msgid ""
"QEMU allows the amount of DDR memory provided to be specified with the ``-"
"m`` argument. If a DTB is provided on the command line then QEMU will edit "
"it to include suitable entries describing the Versal DDR memory ranges."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:47
msgid ""
"QEMU provides 8 virtio-mmio virtio transports; these start at address "
"``0xa0000000`` and have IRQs from 111 and upwards."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:51
msgid "Running"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:52
msgid ""
"If the user provides an Operating System to be loaded, we expect users to "
"use the ``-kernel`` command line option."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:55
msgid ""
"Users can load firmware or boot-loaders with the ``-device loader`` options."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:57
msgid ""
"When loading an OS, QEMU generates a DTB and selects an appropriate address "
"where it gets loaded. This DTB will be passed to the kernel in register x0."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:60
msgid ""
"If there's no ``-kernel`` option, we generate a DTB and place it at 0x1000 "
"for boot-loaders or firmware to pick it up."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:63
msgid ""
"If users want to provide their own DTB, they can use the ``-dtb`` option. "
"These DTBs will have their memory nodes modified to match QEMU's selected "
"ram_size option before they get passed to the kernel or FW."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:67
msgid ""
"When loading an OS, we turn on QEMU's PSCI implementation with SMC as the "
"PSCI conduit. When there's no ``-kernel`` option, we assume the user "
"provides EL3 firmware to handle PSCI."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:71
msgid "A few examples:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:73
msgid "Direct Linux boot of a generic ARM64 upstream Linux kernel:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:75
msgid ""
"$ qemu-system-aarch64 -M xlnx-versal-virt -m 2G \\\n"
"    -serial mon:stdio -display none \\\n"
"    -kernel arch/arm64/boot/Image \\\n"
"    -nic user -nic user \\\n"
"    -device virtio-rng-device,bus=virtio-mmio-bus.0 \\\n"
"    -drive if=none,index=0,file=hd0.qcow2,id=hd0,snapshot \\\n"
"    -drive file=qemu_sd.qcow2,if=sd,index=0,snapshot \\\n"
"    -device virtio-blk-device,drive=hd0 -append root=/dev/vda"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:86
msgid "Direct Linux boot of PetaLinux 2019.2:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:88
msgid ""
"$ qemu-system-aarch64  -M xlnx-versal-virt -m 2G \\\n"
"    -serial mon:stdio -display none \\\n"
"    -kernel petalinux-v2019.2/Image \\\n"
"    -append \"rdinit=/sbin/init console=ttyAMA0,115200n8 earlycon=pl011,"
"mmio,0xFF000000,115200n8\" \\\n"
"    -net nic,model=cadence_gem,netdev=net0 -netdev user,id=net0 \\\n"
"    -device virtio-rng-device,bus=virtio-mmio-bus.0,rng=rng0 \\\n"
"    -object rng-random,filename=/dev/urandom,id=rng0"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:98
msgid ""
"Boot PetaLinux 2019.2 via ARM Trusted Firmware (2018.3 because the 2019.2 "
"version of ATF tries to configure the CCI which we don't model) and U-boot:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:101
msgid ""
"$ qemu-system-aarch64 -M xlnx-versal-virt -m 2G \\\n"
"    -serial stdio -display none \\\n"
"    -device loader,file=petalinux-v2018.3/bl31.elf,cpu-num=0 \\\n"
"    -device loader,file=petalinux-v2019.2/u-boot.elf \\\n"
"    -device loader,addr=0x20000000,file=petalinux-v2019.2/Image \\\n"
"    -nic user -nic user \\\n"
"    -device virtio-rng-device,bus=virtio-mmio-bus.0,rng=rng0 \\\n"
"    -object rng-random,filename=/dev/urandom,id=rng0"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:112
#: ../../../system/arm/xlnx-versal-virt.rst:137
#: ../../../system/arm/xlnx-versal-virt.rst:166
msgid "Run the following at the U-Boot prompt:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:114
msgid ""
"Versal>\n"
"fdt addr $fdtcontroladdr\n"
"fdt move $fdtcontroladdr 0x40000000\n"
"fdt set /timer clock-frequency <0x3dfd240>\n"
"setenv bootargs \"rdinit=/sbin/init maxcpus=1 console=ttyAMA0,115200n8 "
"earlycon=pl011,mmio,0xFF000000,115200n8\"\n"
"booti 20000000 - 40000000\n"
"fdt addr $fdtcontroladdr"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:124
msgid "Boot Linux as DOM0 on Xen via U-Boot:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:126
msgid ""
"$ qemu-system-aarch64 -M xlnx-versal-virt -m 4G \\\n"
"    -serial stdio -display none \\\n"
"    -device loader,file=petalinux-v2019.2/u-boot.elf,cpu-num=0 \\\n"
"    -device loader,addr=0x30000000,file=linux/2018-04-24/xen \\\n"
"    -device loader,addr=0x40000000,file=petalinux-v2019.2/Image \\\n"
"    -nic user -nic user \\\n"
"    -device virtio-rng-device,bus=virtio-mmio-bus.0,rng=rng0 \\\n"
"    -object rng-random,filename=/dev/urandom,id=rng0"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:139
#: ../../../system/arm/xlnx-versal-virt.rst:168
msgid ""
"Versal>\n"
"fdt addr $fdtcontroladdr\n"
"fdt move $fdtcontroladdr 0x20000000\n"
"fdt set /timer clock-frequency <0x3dfd240>\n"
"fdt set /chosen xen,xen-bootargs \"console=dtuart dtuart=/uart@ff000000 "
"dom0_mem=640M bootscrub=0 maxcpus=1 timer_slop=0\"\n"
"fdt set /chosen xen,dom0-bootargs \"rdinit=/sbin/init clk_ignore_unused "
"console=hvc0 maxcpus=1\"\n"
"fdt mknode /chosen dom0\n"
"fdt set /chosen/dom0 compatible \"xen,multiboot-module\"\n"
"fdt set /chosen/dom0 reg <0x00000000 0x40000000 0x0 0x03100000>\n"
"booti 30000000 - 20000000"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:152
msgid "Boot Linux as Dom0 on Xen via ARM Trusted Firmware and U-Boot:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:154
msgid ""
"$ qemu-system-aarch64 -M xlnx-versal-virt -m 4G \\\n"
"    -serial stdio -display none \\\n"
"    -device loader,file=petalinux-v2018.3/bl31.elf,cpu-num=0 \\\n"
"    -device loader,file=petalinux-v2019.2/u-boot.elf \\\n"
"    -device loader,addr=0x30000000,file=linux/2018-04-24/xen \\\n"
"    -device loader,addr=0x40000000,file=petalinux-v2019.2/Image \\\n"
"    -nic user -nic user \\\n"
"    -device virtio-rng-device,bus=virtio-mmio-bus.0,rng=rng0 \\\n"
"    -object rng-random,filename=/dev/urandom,id=rng0"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:182
msgid "BBRAM File Backend"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:183
msgid ""
"BBRAM can have an optional file backend, which must be a seekable binary "
"file with a size of 36 bytes or larger. A file with all binary 0s is a "
"'blank'."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:187
msgid "To add a file-backend for the BBRAM:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:189
msgid "-drive if=pflash,index=0,file=versal-bbram.bin,format=raw"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:193
msgid "To use a different index value, N, from default of 0, add:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:195
msgid "-global driver=xlnx.bbram-ctrl,property=drive-index,value=N"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:200
msgid "eFUSE File Backend"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:201
msgid ""
"eFUSE can have an optional file backend, which must be a seekable binary "
"file with a size of 3072 bytes or larger. A file with all binary 0s is a "
"'blank'."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:205
msgid "To add a file-backend for the eFUSE:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:207
msgid "-drive if=pflash,index=1,file=versal-efuse.bin,format=raw"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:211
msgid "To use a different index value, N, from default of 1, add:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:213
msgid "-global xlnx-efuse.drive-index=N"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:218
msgid ""
"In actual physical Versal, BBRAM and eFUSE contain sensitive data. The QEMU "
"device models do **not** encrypt nor obfuscate any data when holding them in "
"models' memory or when writing them to their file backends."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:223
msgid ""
"Thus, a file backend should be used with caution, and 'format=luks' is "
"highly recommended (albeit with usage complexity)."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:226
msgid ""
"Better yet, do not use actual product data when running guest image on this "
"Xilinx Versal Virt board."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:230
msgid "Using CANFDs for Versal Virt"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:231
msgid ""
"Versal CANFD controller is developed based on SocketCAN and QEMU CAN bus "
"implementation. Bus connection and socketCAN connection for each CAN module "
"can be set through command lines."
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:235
msgid "To connect both CANFD0 and CANFD1 on the same bus:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:237
msgid ""
"-object can-bus,id=canbus -machine canbus0=canbus -machine canbus1=canbus"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:241
msgid "To connect CANFD0 and CANFD1 to separate buses:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:243
msgid ""
"-object can-bus,id=canbus0 -object can-bus,id=canbus1 \\\n"
"-machine canbus0=canbus0 -machine canbus1=canbus1"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:248
msgid ""
"The SocketCAN interface can connect to a Physical or a Virtual CAN "
"interfaces on the host machine. Please check this document to learn about "
"CAN interface on Linux: docs/system/devices/can.rst"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:252
msgid "To connect CANFD0 and CANFD1 to host machine's CAN interface can0:"
msgstr ""

#: ../../../system/arm/xlnx-versal-virt.rst:254
msgid ""
"-object can-bus,id=canbus -machine canbus0=canbus -machine canbus1=canbus\n"
"-object can-host-socketcan,id=canhost0,if=can0,canbus=canbus"
msgstr ""
