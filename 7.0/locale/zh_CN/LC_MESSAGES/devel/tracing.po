# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/tracing.rst:5
msgid "Tracing"
msgstr ""

#: ../../../devel/tracing.rst:8
msgid "Introduction"
msgstr ""

#: ../../../devel/tracing.rst:10
msgid ""
"This document describes the tracing infrastructure in QEMU and how to use it "
"for debugging, profiling, and observing execution."
msgstr ""

#: ../../../devel/tracing.rst:14
msgid "Quickstart"
msgstr ""

#: ../../../devel/tracing.rst:16
msgid ""
"Enable tracing of ``memory_region_ops_read`` and ``memory_region_ops_write`` "
"events::"
msgstr ""

#: ../../../devel/tracing.rst:19
msgid ""
"$ qemu --trace \"memory_region_ops_*\" ...\n"
"...\n"
"719585@1608130130.441188:memory_region_ops_read cpu 0 mr 0x562fdfbb3820 addr "
"0x3cc value 0x67 size 1\n"
"719585@1608130130.441190:memory_region_ops_write cpu 0 mr 0x562fdfbd2f00 "
"addr 0x3d4 value 0x70e size 2"
msgstr ""

#: ../../../devel/tracing.rst:24
msgid ""
"This output comes from the \"log\" trace backend that is enabled by default "
"when ``./configure --enable-trace-backends=BACKENDS`` was not explicitly "
"specified."
msgstr ""

#: ../../../devel/tracing.rst:27
msgid ""
"Multiple patterns can be specified by repeating the ``--trace`` option::"
msgstr ""

#: ../../../devel/tracing.rst:29
msgid "$ qemu --trace \"kvm_*\" --trace \"virtio_*\" ..."
msgstr ""

#: ../../../devel/tracing.rst:31
msgid ""
"When patterns are used frequently it is more convenient to store them in a "
"file to avoid long command-line options::"
msgstr ""

#: ../../../devel/tracing.rst:34
msgid ""
"$ echo \"memory_region_ops_*\" >/tmp/events\n"
"$ echo \"kvm_*\" >>/tmp/events\n"
"$ qemu --trace events=/tmp/events ..."
msgstr ""

#: ../../../devel/tracing.rst:39
msgid "Trace events"
msgstr ""

#: ../../../devel/tracing.rst:42
msgid "Sub-directory setup"
msgstr ""

#: ../../../devel/tracing.rst:44
msgid ""
"Each directory in the source tree can declare a set of trace events in a "
"local \"trace-events\" file. All directories which contain \"trace-events\" "
"files must be listed in the \"trace_events_subdirs\" variable in the top "
"level meson.build file. During build, the \"trace-events\" file in each "
"listed subdirectory will be processed by the \"tracetool\" script to "
"generate code for the trace events."
msgstr ""

#: ../../../devel/tracing.rst:50
msgid ""
"The individual \"trace-events\" files are merged into a \"trace-events-all\" "
"file, which is also installed into \"/usr/share/qemu\" with the name \"trace-"
"events\". This merged file is to be used by the \"simpletrace.py\" script to "
"later analyse traces in the simpletrace data format."
msgstr ""

#: ../../../devel/tracing.rst:55
msgid ""
"The following files are automatically generated in <builddir>/trace/ during "
"the build:"
msgstr ""

#: ../../../devel/tracing.rst:58
msgid "trace-<subdir>.c - the trace event state declarations"
msgstr ""

#: ../../../devel/tracing.rst:59
msgid "trace-<subdir>.h - the trace event enums and probe functions"
msgstr ""

#: ../../../devel/tracing.rst:60
msgid "trace-dtrace-<subdir>.h - DTrace event probe specification"
msgstr ""

#: ../../../devel/tracing.rst:61
msgid "trace-dtrace-<subdir>.dtrace - DTrace event probe helper declaration"
msgstr ""

#: ../../../devel/tracing.rst:62
msgid "trace-dtrace-<subdir>.o - binary DTrace provider (generated by dtrace)"
msgstr ""

#: ../../../devel/tracing.rst:63
msgid "trace-ust-<subdir>.h - UST event probe helper declarations"
msgstr ""

#: ../../../devel/tracing.rst:65
msgid ""
"Here <subdir> is the sub-directory path with '/' replaced by '_'. For "
"example, \"accel/kvm\" becomes \"accel_kvm\" and the final filename for "
"\"trace-<subdir>.c\" becomes \"trace-accel_kvm.c\"."
msgstr ""

#: ../../../devel/tracing.rst:69
msgid ""
"Source files in the source tree do not directly include generated files in "
"\"<builddir>/trace/\". Instead they #include the local \"trace.h\" file, "
"without any sub-directory path prefix. eg io/channel-buffer.c would do::"
msgstr ""

#: ../../../devel/tracing.rst:73
msgid "#include \"trace.h\""
msgstr ""

#: ../../../devel/tracing.rst:75
msgid ""
"The \"io/trace.h\" file must be created manually with an #include of the "
"corresponding \"trace/trace-<subdir>.h\" file that will be generated in the "
"builddir::"
msgstr ""

#: ../../../devel/tracing.rst:79
msgid "$ echo '#include \"trace/trace-io.h\"' >io/trace.h"
msgstr ""

#: ../../../devel/tracing.rst:81
msgid ""
"While it is possible to include a trace.h file from outside a source file's "
"own sub-directory, this is discouraged in general. It is strongly preferred "
"that all events be declared directly in the sub-directory that uses them. "
"The only exception is where there are some shared trace events defined in "
"the top level directory trace-events file.  The top level directory "
"generates trace files with a filename prefix of \"trace/trace-root\" instead "
"of just \"trace\". This is to avoid ambiguity between a trace.h in the "
"current directory, vs the top level directory."
msgstr ""

#: ../../../devel/tracing.rst:91
msgid "Using trace events"
msgstr ""

#: ../../../devel/tracing.rst:93
msgid "Trace events are invoked directly from source code like this::"
msgstr ""

#: ../../../devel/tracing.rst:95
msgid ""
"#include \"trace.h\"  /* needed for trace event prototype */\n"
"\n"
"void *qemu_vmalloc(size_t size)\n"
"{\n"
"    void *ptr;\n"
"    size_t align = QEMU_VMALLOC_ALIGN;\n"
"\n"
"    if (size < align) {\n"
"        align = getpagesize();\n"
"    }\n"
"    ptr = qemu_memalign(align, size);\n"
"    trace_qemu_vmalloc(size, ptr);\n"
"    return ptr;\n"
"}"
msgstr ""

#: ../../../devel/tracing.rst:111
msgid "Declaring trace events"
msgstr ""

#: ../../../devel/tracing.rst:113
msgid ""
"The \"tracetool\" script produces the trace.h header file which is included "
"by every source file that uses trace events.  Since many source files "
"include trace.h, it uses a minimum of types and other header files included "
"to keep the namespace clean and compile times and dependencies down."
msgstr ""

#: ../../../devel/tracing.rst:118
msgid "Trace events should use types as follows:"
msgstr ""

#: ../../../devel/tracing.rst:120
msgid ""
"Use stdint.h types for fixed-size types.  Most offsets and guest memory "
"addresses are best represented with uint32_t or uint64_t.  Use fixed-size "
"types over primitive types whose size may change depending on the host (32-"
"bit versus 64-bit) so trace events don't truncate values or break the build."
msgstr ""

#: ../../../devel/tracing.rst:126
msgid ""
"Use void * for pointers to structs or for arrays.  The trace.h header cannot "
"include all user-defined struct declarations and it is therefore necessary "
"to use void * for pointers to structs."
msgstr ""

#: ../../../devel/tracing.rst:130
msgid ""
"For everything else, use primitive scalar types (char, int, long) with the "
"appropriate signedness."
msgstr ""

#: ../../../devel/tracing.rst:133
msgid ""
"Avoid floating point types (float and double) because SystemTap does not "
"support them.  In most cases it is possible to round to an integer type "
"instead.  This may require scaling the value first by multiplying it by 1000 "
"or the like when digits after the decimal point need to be preserved."
msgstr ""

#: ../../../devel/tracing.rst:138
msgid ""
"Format strings should reflect the types defined in the trace event.  Take "
"special care to use PRId64 and PRIu64 for int64_t and uint64_t types, "
"respectively.  This ensures portability between 32- and 64-bit platforms. "
"Format strings must not end with a newline character.  It is the "
"responsibility of backends to adapt line ending for proper logging."
msgstr ""

#: ../../../devel/tracing.rst:144
msgid ""
"Each event declaration will start with the event name, then its arguments, "
"finally a format string for pretty-printing. For example::"
msgstr ""

#: ../../../devel/tracing.rst:147
msgid ""
"qemu_vmalloc(size_t size, void *ptr) \"size %zu ptr %p\"\n"
"qemu_vfree(void *ptr) \"ptr %p\""
msgstr ""

#: ../../../devel/tracing.rst:152
msgid "Hints for adding new trace events"
msgstr ""

#: ../../../devel/tracing.rst:154
msgid ""
"Trace state changes in the code.  Interesting points in the code usually "
"involve a state change like starting, stopping, allocating, freeing.  State "
"changes are good trace events because they can be used to understand the "
"execution of the system."
msgstr ""

#: ../../../devel/tracing.rst:159
msgid ""
"Trace guest operations.  Guest I/O accesses like reading device registers "
"are good trace events because they can be used to understand guest "
"interactions."
msgstr ""

#: ../../../devel/tracing.rst:163
msgid ""
"Use correlator fields so the context of an individual line of trace output "
"can be understood.  For example, trace the pointer returned by malloc and "
"used as an argument to free.  This way mallocs and frees can be matched up. "
"Trace events with no context are not very useful."
msgstr ""

#: ../../../devel/tracing.rst:168
msgid ""
"Name trace events after their function.  If there are multiple trace events "
"in one function, append a unique distinguisher at the end of the name."
msgstr ""

#: ../../../devel/tracing.rst:172
msgid "Generic interface and monitor commands"
msgstr ""

#: ../../../devel/tracing.rst:174
msgid ""
"You can programmatically query and control the state of trace events through "
"a backend-agnostic interface provided by the header \"trace/control.h\"."
msgstr ""

#: ../../../devel/tracing.rst:177
msgid ""
"Note that some of the backends do not provide an implementation for some "
"parts of this interface, in which case QEMU will just print a warning "
"(please refer to header \"trace/control.h\" to see which routines are "
"backend-dependent)."
msgstr ""

#: ../../../devel/tracing.rst:181
msgid ""
"The state of events can also be queried and modified through monitor "
"commands:"
msgstr ""

#: ../../../devel/tracing.rst:183
msgid ""
"``info trace-events`` View available trace events and their state.  State 1 "
"means enabled, state 0 means disabled."
msgstr ""

#: ../../../devel/tracing.rst:187
msgid ""
"``trace-event NAME on|off`` Enable/disable a given trace event or a group of "
"events (using wildcards)."
msgstr ""

#: ../../../devel/tracing.rst:190
msgid ""
"The \"--trace events=<file>\" command line argument can be used to enable "
"the events listed in <file> from the very beginning of the program. This "
"file must contain one event name per line."
msgstr ""

#: ../../../devel/tracing.rst:194
msgid ""
"If a line in the \"--trace events=<file>\" file begins with a '-', the trace "
"event will be disabled instead of enabled.  This is useful when a wildcard "
"was used to enable an entire family of events but one noisy event needs to "
"be disabled."
msgstr ""

#: ../../../devel/tracing.rst:198
msgid ""
"Wildcard matching is supported in both the monitor command \"trace-event\" "
"and the events list file. That means you can enable/disable the events "
"having a common prefix in a batch. For example, virtio-blk trace events "
"could be enabled using the following monitor command::"
msgstr ""

#: ../../../devel/tracing.rst:203
msgid "trace-event virtio_blk_* on"
msgstr ""

#: ../../../devel/tracing.rst:206
msgid "Trace backends"
msgstr ""

#: ../../../devel/tracing.rst:208
msgid ""
"The \"tracetool\" script automates tedious trace event code generation and "
"also keeps the trace event declarations independent of the trace backend.  "
"The trace events are not tightly coupled to a specific trace backend, such "
"as LTTng or SystemTap.  Support for trace backends can be added by extending "
"the \"tracetool\" script."
msgstr ""

#: ../../../devel/tracing.rst:214
msgid "The trace backends are chosen at configure time::"
msgstr ""

#: ../../../devel/tracing.rst:216
msgid "./configure --enable-trace-backends=simple,dtrace"
msgstr ""

#: ../../../devel/tracing.rst:218
msgid ""
"For a list of supported trace backends, try ./configure --help or see below. "
"If multiple backends are enabled, the trace is sent to them all."
msgstr ""

#: ../../../devel/tracing.rst:221
msgid ""
"If no backends are explicitly selected, configure will default to the "
"\"log\" backend."
msgstr ""

#: ../../../devel/tracing.rst:224
msgid "The following subsections describe the supported trace backends."
msgstr ""

#: ../../../devel/tracing.rst:227
msgid "Nop"
msgstr ""

#: ../../../devel/tracing.rst:229
msgid ""
"The \"nop\" backend generates empty trace event functions so that the "
"compiler can optimize out trace events completely.  This imposes no "
"performance penalty."
msgstr ""

#: ../../../devel/tracing.rst:233
msgid ""
"Note that regardless of the selected trace backend, events with the "
"\"disable\" property will be generated with the \"nop\" backend."
msgstr ""

#: ../../../devel/tracing.rst:237
msgid "Log"
msgstr ""

#: ../../../devel/tracing.rst:239
msgid ""
"The \"log\" backend sends trace events directly to standard error.  This "
"effectively turns trace events into debug printfs."
msgstr ""

#: ../../../devel/tracing.rst:242
msgid ""
"This is the simplest backend and can be used together with existing code "
"that uses DPRINTF()."
msgstr ""

#: ../../../devel/tracing.rst:245
msgid ""
"The -msg timestamp=on|off command-line option controls whether or not to "
"print the tid/timestamp prefix for each trace event."
msgstr ""

#: ../../../devel/tracing.rst:249
msgid "Simpletrace"
msgstr ""

#: ../../../devel/tracing.rst:251
msgid ""
"The \"simple\" backend writes binary trace logs to a file from a thread, "
"making it lower overhead than the \"log\" backend. A Python API is available "
"for writing offline trace file analysis scripts. It may not be as powerful "
"as platform-specific or third-party trace backends but it is portable and "
"has no special library dependencies."
msgstr ""

#: ../../../devel/tracing.rst:258
msgid "Monitor commands"
msgstr ""

#: ../../../devel/tracing.rst:260
msgid ""
"``trace-file on|off|flush|set <path>`` Enable/disable/flush the trace file "
"or set the trace file name."
msgstr ""

#: ../../../devel/tracing.rst:264
msgid "Analyzing trace files"
msgstr ""

#: ../../../devel/tracing.rst:266
msgid ""
"The \"simple\" backend produces binary trace files that can be formatted "
"with the simpletrace.py script.  The script takes the \"trace-events-all\" "
"file and the binary trace::"
msgstr ""

#: ../../../devel/tracing.rst:270
msgid "./scripts/simpletrace.py trace-events-all trace-12345"
msgstr ""

#: ../../../devel/tracing.rst:272
msgid ""
"You must ensure that the same \"trace-events-all\" file was used to build "
"QEMU, otherwise trace event declarations may have changed and output will "
"not be consistent."
msgstr ""

#: ../../../devel/tracing.rst:277
msgid "Ftrace"
msgstr ""

#: ../../../devel/tracing.rst:279
msgid ""
"The \"ftrace\" backend writes trace data to ftrace marker. This effectively "
"sends trace events to ftrace ring buffer, and you can compare qemu trace "
"data and kernel(especially kvm.ko when using KVM) trace data."
msgstr ""

#: ../../../devel/tracing.rst:283
msgid "if you use KVM, enable kvm events in ftrace::"
msgstr ""

#: ../../../devel/tracing.rst:285
msgid "# echo 1 > /sys/kernel/debug/tracing/events/kvm/enable"
msgstr ""

#: ../../../devel/tracing.rst:287
msgid "After running qemu by root user, you can get the trace::"
msgstr ""

#: ../../../devel/tracing.rst:289
msgid "# cat /sys/kernel/debug/tracing/trace"
msgstr ""

#: ../../../devel/tracing.rst:291
msgid "Restriction: \"ftrace\" backend is restricted to Linux only."
msgstr ""

#: ../../../devel/tracing.rst:294
msgid "Syslog"
msgstr ""

#: ../../../devel/tracing.rst:296
msgid ""
"The \"syslog\" backend sends trace events using the POSIX syslog API. The "
"log is opened specifying the LOG_DAEMON facility and LOG_PID option (so "
"events are tagged with the pid of the particular QEMU process that generated "
"them). All events are logged at LOG_INFO level."
msgstr ""

#: ../../../devel/tracing.rst:301
msgid ""
"NOTE: syslog may squash duplicate consecutive trace events and apply rate"
msgstr ""

#: ../../../devel/tracing.rst:302
msgid "limiting."
msgstr ""

#: ../../../devel/tracing.rst:304
msgid "Restriction: \"syslog\" backend is restricted to POSIX compliant OS."
msgstr ""

#: ../../../devel/tracing.rst:307
msgid "LTTng Userspace Tracer"
msgstr ""

#: ../../../devel/tracing.rst:309
msgid ""
"The \"ust\" backend uses the LTTng Userspace Tracer library.  There are no "
"monitor commands built into QEMU, instead UST utilities should be used to "
"list, enable/disable, and dump traces."
msgstr ""

#: ../../../devel/tracing.rst:313
msgid ""
"Package lttng-tools is required for userspace tracing. You must ensure that "
"the current user belongs to the \"tracing\" group, or manually launch the "
"lttng-sessiond daemon for the current user prior to running any instance of "
"QEMU."
msgstr ""

#: ../../../devel/tracing.rst:318
msgid ""
"While running an instrumented QEMU, LTTng should be able to list all "
"available events::"
msgstr ""

#: ../../../devel/tracing.rst:321
msgid "lttng list -u"
msgstr ""

#: ../../../devel/tracing.rst:323
msgid "Create tracing session::"
msgstr ""

#: ../../../devel/tracing.rst:325
msgid "lttng create mysession"
msgstr ""

#: ../../../devel/tracing.rst:327
msgid "Enable events::"
msgstr ""

#: ../../../devel/tracing.rst:329
msgid "lttng enable-event qemu:g_malloc -u"
msgstr ""

#: ../../../devel/tracing.rst:331
msgid ""
"Where the events can either be a comma-separated list of events, or \"-a\" "
"to enable all tracepoint events. Start and stop tracing as needed::"
msgstr ""

#: ../../../devel/tracing.rst:334
msgid ""
"lttng start\n"
"lttng stop"
msgstr ""

#: ../../../devel/tracing.rst:337
msgid "View the trace::"
msgstr ""

#: ../../../devel/tracing.rst:339
msgid "lttng view"
msgstr ""

#: ../../../devel/tracing.rst:341
msgid "Destroy tracing session::"
msgstr ""

#: ../../../devel/tracing.rst:343
msgid "lttng destroy"
msgstr ""

#: ../../../devel/tracing.rst:345
msgid "Babeltrace can be used at any later time to view the trace::"
msgstr ""

#: ../../../devel/tracing.rst:347
msgid "babeltrace $HOME/lttng-traces/mysession-<date>-<time>"
msgstr ""

#: ../../../devel/tracing.rst:350
msgid "SystemTap"
msgstr ""

#: ../../../devel/tracing.rst:352
msgid ""
"The \"dtrace\" backend uses DTrace sdt probes but has only been tested with "
"SystemTap.  When SystemTap support is detected a .stp file with wrapper "
"probes is generated to make use in scripts more convenient.  This step can "
"also be performed manually after a build in order to change the binary name "
"in the .stp probes::"
msgstr ""

#: ../../../devel/tracing.rst:358
msgid ""
"scripts/tracetool.py --backends=dtrace --format=stap \\\n"
"                     --binary path/to/qemu-binary \\\n"
"                     --target-type system \\\n"
"                     --target-name x86_64 \\\n"
"                     --group=all \\\n"
"                     trace-events-all \\\n"
"                     qemu.stp"
msgstr ""

#: ../../../devel/tracing.rst:366
msgid ""
"To facilitate simple usage of systemtap where there merely needs to be "
"printf logging of certain probes, a helper script \"qemu-trace-stap\" is "
"provided. Consult its manual page for guidance on its usage."
msgstr ""

#: ../../../devel/tracing.rst:371
msgid "Trace event properties"
msgstr ""

#: ../../../devel/tracing.rst:373
msgid ""
"Each event in the \"trace-events-all\" file can be prefixed with a space-"
"separated list of zero or more of the following event properties."
msgstr ""

#: ../../../devel/tracing.rst:377
msgid "\"disable\""
msgstr ""

#: ../../../devel/tracing.rst:379
msgid ""
"If a specific trace event is going to be invoked a huge number of times, "
"this might have a noticeable performance impact even when the event is "
"programmatically disabled."
msgstr ""

#: ../../../devel/tracing.rst:383
msgid ""
"In this case you should declare such event with the \"disable\" property. "
"This will effectively disable the event at compile time (by using the "
"\"nop\" backend), thus having no performance impact at all on regular builds "
"(i.e., unless you edit the \"trace-events-all\" file)."
msgstr ""

#: ../../../devel/tracing.rst:388
msgid ""
"In addition, there might be cases where relatively complex computations must "
"be performed to generate values that are only used as arguments for a trace "
"function. In these cases you can use 'trace_event_get_state_backends()' to "
"guard such computations, so they are skipped if the event has been either "
"compile-time disabled or run-time disabled. If the event is compile-time "
"disabled, this check will have no performance impact."
msgstr ""

#: ../../../devel/tracing.rst:397
msgid ""
"#include \"trace.h\"  /* needed for trace event prototype */\n"
"\n"
"void *qemu_vmalloc(size_t size)\n"
"{\n"
"    void *ptr;\n"
"    size_t align = QEMU_VMALLOC_ALIGN;\n"
"\n"
"    if (size < align) {\n"
"        align = getpagesize();\n"
"    }\n"
"    ptr = qemu_memalign(align, size);\n"
"    if (trace_event_get_state_backends(TRACE_QEMU_VMALLOC)) {\n"
"        void *complex;\n"
"        /* some complex computations to produce the 'complex' value */\n"
"        trace_qemu_vmalloc(size, ptr, complex);\n"
"    }\n"
"    return ptr;\n"
"}"
msgstr ""
