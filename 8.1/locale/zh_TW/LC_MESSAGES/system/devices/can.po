# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 8.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../system/devices/can.rst:2
msgid "CAN Bus Emulation Support"
msgstr ""

#: ../../../system/devices/can.rst:3
msgid ""
"The CAN bus emulation provides mechanism to connect multiple emulated CAN "
"controller chips together by one or multiple CAN busses (the controller "
"device \"canbus\"  parameter). The individual busses can be connected to "
"host system CAN API (at this time only Linux SocketCAN is supported)."
msgstr ""

#: ../../../system/devices/can.rst:9
msgid ""
"The concept of busses is generic and different CAN controllers can be "
"implemented."
msgstr ""

#: ../../../system/devices/can.rst:12
msgid ""
"The initial submission implemented SJA1000 controller which is common and "
"well supported by by drivers for the most operating systems."
msgstr ""

#: ../../../system/devices/can.rst:16
msgid ""
"The PCI addon card hardware has been selected as the first CAN interface to "
"implement because such device can be easily connected to systems with "
"different CPU architectures (x86, PowerPC, Arm, etc.)."
msgstr ""

#: ../../../system/devices/can.rst:20
msgid ""
"In 2020, CTU CAN FD controller model has been added as part of the bachelor "
"thesis of Jan Charvat. This controller is complete open-source/design/"
"hardware solution. The core designer of the project is Ondrej Ille, the "
"financial support has been provided by CTU, and more companies including "
"Volkswagen subsidiaries."
msgstr ""

#: ../../../system/devices/can.rst:26
msgid ""
"The project has been initially started in frame of RTEMS GSoC 2013 slot by "
"Jin Yang under our mentoring  The initial idea was to provide generic CAN "
"subsystem for RTEMS. But lack of common environment for code and RTEMS "
"testing lead to goal change to provide environment which provides complete "
"emulated environment for testing and RTEMS GSoC slot has been donated to "
"work on CAN hardware emulation on QEMU."
msgstr ""

#: ../../../system/devices/can.rst:34
msgid "Examples how to use CAN emulation for SJA1000 based boards"
msgstr ""

#: ../../../system/devices/can.rst:35
msgid ""
"When QEMU with CAN PCI support is compiled then one of the next CAN boards "
"can be selected"
msgstr ""

#: ../../../system/devices/can.rst:38
msgid ""
"CAN bus Kvaser PCI CAN-S (single SJA1000 channel) board. QEMU startup "
"options::"
msgstr ""

#: ../../../system/devices/can.rst:40
msgid ""
"-object can-bus,id=canbus0\n"
"-device kvaser_pci,canbus=canbus0"
msgstr ""

#: ../../../system/devices/can.rst:43
msgid ""
"Add \"can-host-socketcan\" object to connect device to host system CAN bus::"
msgstr ""

#: ../../../system/devices/can.rst:45
msgid "-object can-host-socketcan,id=canhost0,if=can0,canbus=canbus0"
msgstr ""

#: ../../../system/devices/can.rst:47
msgid "CAN bus PCM-3680I PCI (dual SJA1000 channel) emulation::"
msgstr ""

#: ../../../system/devices/can.rst:49
msgid ""
"-object can-bus,id=canbus0\n"
"-device pcm3680_pci,canbus0=canbus0,canbus1=canbus0"
msgstr ""

#: ../../../system/devices/can.rst:52
msgid "Another example::"
msgstr ""

#: ../../../system/devices/can.rst:54
msgid ""
"-object can-bus,id=canbus0\n"
"-object can-bus,id=canbus1\n"
"-device pcm3680_pci,canbus0=canbus0,canbus1=canbus1"
msgstr ""

#: ../../../system/devices/can.rst:58
msgid "CAN bus MIOe-3680 PCI (dual SJA1000 channel) emulation::"
msgstr ""

#: ../../../system/devices/can.rst:60
msgid "-device mioe3680_pci,canbus0=canbus0"
msgstr ""

#: ../../../system/devices/can.rst:62
msgid ""
"The ''kvaser_pci'' board/device model is compatible with and has been tested "
"with the ''kvaser_pci'' driver included in mainline Linux kernel. The tested "
"setup was Linux 4.9 kernel on the host and guest side."
msgstr ""

#: ../../../system/devices/can.rst:66
msgid "Example for qemu-system-x86_64::"
msgstr ""

#: ../../../system/devices/can.rst:68
msgid ""
"qemu-system-x86_64 -accel kvm -kernel /boot/vmlinuz-4.9.0-4-amd64 \\\n"
"  -initrd ramdisk.cpio \\\n"
"  -virtfs local,path=shareddir,security_model=none,mount_tag=shareddir \\\n"
"  -object can-bus,id=canbus0 \\\n"
"  -object can-host-socketcan,id=canhost0,if=can0,canbus=canbus0 \\\n"
"  -device kvaser_pci,canbus=canbus0 \\\n"
"  -nographic -append \"console=ttyS0\""
msgstr ""

#: ../../../system/devices/can.rst:76
msgid "Example for qemu-system-arm::"
msgstr ""

#: ../../../system/devices/can.rst:78
msgid ""
"qemu-system-arm -cpu arm1176 -m 256 -M versatilepb \\\n"
"  -kernel kernel-qemu-arm1176-versatilepb \\\n"
"  -hda rpi-wheezy-overlay \\\n"
"  -append \"console=ttyAMA0 root=/dev/sda2 ro init=/sbin/init-overlay\" \\\n"
"  -nographic \\\n"
"  -virtfs local,path=shareddir,security_model=none,mount_tag=shareddir \\\n"
"  -object can-bus,id=canbus0 \\\n"
"  -object can-host-socketcan,id=canhost0,if=can0,canbus=canbus0 \\\n"
"  -device kvaser_pci,canbus=canbus0,host=can0 \\"
msgstr ""

#: ../../../system/devices/can.rst:88
msgid ""
"The CAN interface of the host system has to be configured for proper bitrate "
"and set up. Configuration is not propagated from emulated devices through "
"bus to the physical host device. Example configuration for 1 Mbit/s::"
msgstr ""

#: ../../../system/devices/can.rst:93
msgid ""
"ip link set can0 type can bitrate 1000000\n"
"ip link set can0 up"
msgstr ""

#: ../../../system/devices/can.rst:96
msgid ""
"Virtual (host local only) can interface can be used on the host side instead "
"of physical interface::"
msgstr ""

#: ../../../system/devices/can.rst:99
msgid "ip link add dev can0 type vcan"
msgstr ""

#: ../../../system/devices/can.rst:101
msgid ""
"The CAN interface on the host side can be used to analyze CAN traffic with "
"\"candump\" command which is included in \"can-utils\"::"
msgstr ""

#: ../../../system/devices/can.rst:104
msgid "candump can0"
msgstr ""

#: ../../../system/devices/can.rst:107
msgid "CTU CAN FD support examples"
msgstr ""

#: ../../../system/devices/can.rst:108
msgid ""
"This open-source core provides CAN FD support. CAN FD drames are delivered "
"even to the host systems when SocketCAN interface is found CAN FD capable."
msgstr ""

#: ../../../system/devices/can.rst:112
msgid ""
"The PCIe board emulation is provided for now (the device identifier is "
"ctucan_pci). The default build defines two CTU CAN FD cores on the board."
msgstr ""

#: ../../../system/devices/can.rst:116
msgid ""
"Example how to connect the canbus0-bus (virtual wire) to the host Linux "
"system (SocketCAN used) and to both CTU CAN FD cores emulated on the "
"corresponding PCI card expects that host system CAN bus is setup according "
"to the previous SJA1000 section::"
msgstr ""

#: ../../../system/devices/can.rst:121
msgid ""
"qemu-system-x86_64 -enable-kvm -kernel /boot/vmlinuz-4.19.52+ \\\n"
"    -initrd ramdisk.cpio \\\n"
"    -virtfs local,path=shareddir,security_model=none,mount_tag=shareddir \\\n"
"    -vga cirrus \\\n"
"    -append \"console=ttyS0\" \\\n"
"    -object can-bus,id=canbus0-bus \\\n"
"    -object can-host-socketcan,if=can0,canbus=canbus0-bus,id=canbus0-"
"socketcan \\\n"
"    -device ctucan_pci,canbus0=canbus0-bus,canbus1=canbus0-bus \\\n"
"    -nographic"
msgstr ""

#: ../../../system/devices/can.rst:131
msgid "Setup of CTU CAN FD controller in a guest Linux system::"
msgstr ""

#: ../../../system/devices/can.rst:133
msgid ""
"insmod ctucanfd.ko || modprobe ctucanfd\n"
"insmod ctucanfd_pci.ko || modprobe ctucanfd_pci\n"
"\n"
"for ifc in /sys/class/net/can* ; do\n"
"  if [ -e  $ifc/device/vendor ] ; then\n"
"    if ! grep -q 0x1760 $ifc/device/vendor ; then\n"
"      continue;\n"
"    fi\n"
"  else\n"
"    continue;\n"
"  fi\n"
"  if [ -e  $ifc/device/device ] ; then\n"
"     if ! grep -q 0xff00 $ifc/device/device ; then\n"
"       continue;\n"
"     fi\n"
"  else\n"
"    continue;\n"
"  fi\n"
"  ifc=$(basename $ifc)\n"
"  /bin/ip link set $ifc type can bitrate 1000000 dbitrate 10000000 fd on\n"
"  /bin/ip link set $ifc up\n"
"done"
msgstr ""

#: ../../../system/devices/can.rst:156
msgid "The test can run for example::"
msgstr ""

#: ../../../system/devices/can.rst:158
msgid "candump can1"
msgstr ""

#: ../../../system/devices/can.rst:160
msgid ""
"in the guest system and next commands in the host system for basic CAN::"
msgstr ""

#: ../../../system/devices/can.rst:162
msgid "cangen can0"
msgstr ""

#: ../../../system/devices/can.rst:164
msgid "for CAN FD without bitrate switch::"
msgstr ""

#: ../../../system/devices/can.rst:166
msgid "cangen can0 -f"
msgstr ""

#: ../../../system/devices/can.rst:168
msgid "and with bitrate switch::"
msgstr ""

#: ../../../system/devices/can.rst:170
msgid "cangen can0 -b"
msgstr ""

#: ../../../system/devices/can.rst:172
msgid ""
"The test can also be run the other way around, generating messages in the "
"guest system and capturing them in the host system. Other combinations are "
"also possible."
msgstr ""

#: ../../../system/devices/can.rst:177
msgid "Links to other resources"
msgstr ""

#: ../../../system/devices/can.rst:179
msgid ""
"`CAN related projects at Czech Technical University, Faculty of Electrical "
"Engineering <http://canbus.pages.fel.cvut.cz>`_"
msgstr ""

#: ../../../system/devices/can.rst:180
msgid ""
"`Repository with development can-pci branch at Czech Technical University "
"<https://gitlab.fel.cvut.cz/canbus/qemu-canbus>`_"
msgstr ""

#: ../../../system/devices/can.rst:181
msgid ""
"`RTEMS page describing project <https://devel.rtems.org/wiki/Developer/"
"Simulators/QEMU/CANEmulation>`_"
msgstr ""

#: ../../../system/devices/can.rst:182
msgid ""
"`RTLWS 2015 article about the project and its use with CANopen emulation "
"<http://cmp.felk.cvut.cz/~pisa/can/doc/rtlws-17-pisa-qemu-can.pdf>`_"
msgstr ""

#: ../../../system/devices/can.rst:183
msgid ""
"`GNU/Linux, CAN and CANopen in Real-time Control Applications Slides from "
"LinuxDays 2017 (include updated RTLWS 2015 content) <https://www.linuxdays."
"cz/2017/video/Pavel_Pisa-CAN_canopen.pdf>`_"
msgstr ""

#: ../../../system/devices/can.rst:184
msgid "`Linux SocketCAN utilities <https://github.com/linux-can/can-utils>`_"
msgstr ""

#: ../../../system/devices/can.rst:185
msgid ""
"`CTU CAN FD project including core VHDL design, Linux driver, test utilities "
"etc. <https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core>`_"
msgstr ""

#: ../../../system/devices/can.rst:186
msgid ""
"`CTU CAN FD Core Datasheet Documentation <http://canbus.pages.fel.cvut.cz/"
"ctucanfd_ip_core/doc/Datasheet.pdf>`_"
msgstr ""

#: ../../../system/devices/can.rst:187
msgid ""
"`CTU CAN FD Core System Architecture Documentation <http://canbus.pages.fel."
"cvut.cz/ctucanfd_ip_core/doc/System_Architecture.pdf>`_"
msgstr ""

#: ../../../system/devices/can.rst:188
msgid ""
"`CTU CAN FD Driver Documentation <https://canbus.pages.fel.cvut.cz/"
"ctucanfd_ip_core/doc/linux_driver/build/ctucanfd-driver.html>`_"
msgstr ""

#: ../../../system/devices/can.rst:189
msgid ""
"`Integration with PCIe interfacing for Intel/Altera Cyclone IV based board "
"<https://gitlab.fel.cvut.cz/canbus/pcie-ctu_can_fd>`_"
msgstr ""
