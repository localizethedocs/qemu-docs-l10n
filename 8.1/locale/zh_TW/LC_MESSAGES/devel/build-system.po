# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, The QEMU Project Developers
# This file is distributed under the same license as the QEMU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QEMU 8.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 10:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devel/build-system.rst:3
msgid "The QEMU build system architecture"
msgstr ""

#: ../../../devel/build-system.rst:5
msgid ""
"This document aims to help developers understand the architecture of the "
"QEMU build system. As with projects using GNU autotools, the QEMU build "
"system has two stages; first the developer runs the \"configure\" script to "
"determine the local build environment characteristics, then they run "
"\"make\" to build the project.  This is about where the similarities with "
"GNU autotools end, so try to forget what you know about them."
msgstr ""

#: ../../../devel/build-system.rst:12
msgid "The two general ways to perform a build are as follows:"
msgstr ""

#: ../../../devel/build-system.rst:14
msgid "build artifacts outside of QEMU source tree entirely::"
msgstr ""

#: ../../../devel/build-system.rst:16
msgid ""
"cd ../\n"
"mkdir build\n"
"cd build\n"
"../qemu/configure\n"
"make"
msgstr ""

#: ../../../devel/build-system.rst:22
msgid "build artifacts in a subdir of QEMU source tree::"
msgstr ""

#: ../../../devel/build-system.rst:24
msgid ""
"mkdir build\n"
"cd build\n"
"../configure\n"
"make"
msgstr ""

#: ../../../devel/build-system.rst:29
msgid ""
"Most of the actual build process uses Meson under the hood, therefore build "
"artifacts cannot be placed in the source tree itself."
msgstr ""

#: ../../../devel/build-system.rst:34
msgid "Stage 1: configure"
msgstr ""

#: ../../../devel/build-system.rst:36
msgid "The configure script has five tasks:"
msgstr ""

#: ../../../devel/build-system.rst:38
msgid "detect the host architecture"
msgstr ""

#: ../../../devel/build-system.rst:40
msgid ""
"list the targets for which to build emulators; the list of targets also "
"affects which firmware binaries and tests to build"
msgstr ""

#: ../../../devel/build-system.rst:43
msgid ""
"find the compilers (native and cross) used to build executables, firmware "
"and tests.  The results are written as either Makefile fragments (``config-"
"host.mak``) or a Meson machine file (``config-meson.cross``)"
msgstr ""

#: ../../../devel/build-system.rst:48
msgid ""
"create a virtual environment in which all Python code runs during the build, "
"and possibly install packages into it from PyPI"
msgstr ""

#: ../../../devel/build-system.rst:51
msgid ""
"invoke Meson in the virtual environment, to perform the actual configuration "
"step for the emulator build"
msgstr ""

#: ../../../devel/build-system.rst:54
msgid ""
"The configure script automatically recognizes command line options for which "
"a same-named Meson option exists; dashes in the command line are replaced "
"with underscores."
msgstr ""

#: ../../../devel/build-system.rst:58
msgid ""
"Almost all QEMU developers that need to modify the build system will only be "
"concerned with Meson, and therefore can skip the rest of this section."
msgstr ""

#: ../../../devel/build-system.rst:64
msgid "Modifying ``configure``"
msgstr ""

#: ../../../devel/build-system.rst:66
msgid ""
"``configure`` is a shell script; it uses ``#!/bin/sh`` and therefore should "
"be compatible with any POSIX shell. It is important to avoid using bash-isms "
"to avoid breaking development platforms where bash is the primary host."
msgstr ""

#: ../../../devel/build-system.rst:71
msgid ""
"The configure script provides a variety of functions to help writing "
"portable shell code and providing consistent behavior across architectures "
"and operating systems:"
msgstr ""

#: ../../../devel/build-system.rst:75
msgid "``error_exit $MESSAGE $MORE...``"
msgstr ""

#: ../../../devel/build-system.rst:76
msgid ""
"Print $MESSAGE to stderr, followed by $MORE... and then exit from the "
"configure script with non-zero status."
msgstr ""

#: ../../../devel/build-system.rst:79
msgid "``has $COMMAND``"
msgstr ""

#: ../../../devel/build-system.rst:80
msgid ""
"Determine if $COMMAND exists in the current environment, either as a shell "
"builtin, or executable binary, returning 0 on success.  The replacement in "
"Meson is ``find_program()``."
msgstr ""

#: ../../../devel/build-system.rst:84
msgid "``probe_target_compiler $TARGET``"
msgstr ""

#: ../../../devel/build-system.rst:85
msgid ""
"Detect a cross compiler and cross tools for the QEMU target $TARGET (e.g., "
"``$CPU-softmmu``, ``$CPU-linux-user``, ``$CPU-bsd-user``).  If a working "
"compiler is present, return success and set variables ``$target_cc``, "
"``$target_ar``, etc. to non-empty values."
msgstr ""

#: ../../../devel/build-system.rst:90
msgid "``write_target_makefile``"
msgstr ""

#: ../../../devel/build-system.rst:91
msgid ""
"Write a Makefile fragment to stdout, exposing the result of the most "
"``probe_target_compiler`` call as the usual Make variables (``CC``, ``AR``, "
"``LD``, etc.)."
msgstr ""

#: ../../../devel/build-system.rst:96
msgid ""
"Configure does not generally perform tests for compiler options beyond basic "
"checks to detect the host platform and ensure the compiler is functioning.  "
"These are performed using a few more helper functions:"
msgstr ""

#: ../../../devel/build-system.rst:100
msgid "``compile_object $CFLAGS``"
msgstr ""

#: ../../../devel/build-system.rst:101
msgid ""
"Attempt to compile a test program with the system C compiler using $CFLAGS. "
"The test program must have been previously written to a file called $TMPC."
msgstr ""

#: ../../../devel/build-system.rst:105
msgid "``compile_prog $CFLAGS $LDFLAGS``"
msgstr ""

#: ../../../devel/build-system.rst:106
msgid ""
"Attempt to compile a test program with the system C compiler using $CFLAGS "
"and link it with the system linker using $LDFLAGS. The test program must "
"have been previously written to a file called $TMPC."
msgstr ""

#: ../../../devel/build-system.rst:110
msgid "``check_define $NAME``"
msgstr ""

#: ../../../devel/build-system.rst:111
msgid "Determine if the macro $NAME is defined by the system C compiler."
msgstr ""

#: ../../../devel/build-system.rst:113
msgid "``do_compiler $CC $ARGS...``"
msgstr ""

#: ../../../devel/build-system.rst:114
msgid ""
"Attempt to run the C compiler $CC, passing it $ARGS...  This function does "
"not use flags passed via options such as ``--extra-cflags``, and therefore "
"can be used to check for cross compilers.  However, most such checks are "
"done at ``make`` time instead (see for example the ``cc-option`` macro in "
"``pc-bios/option-rom/Makefile``)."
msgstr ""

#: ../../../devel/build-system.rst:120
msgid "``write_c_skeleton``"
msgstr ""

#: ../../../devel/build-system.rst:121
msgid ""
"Write a minimal C program main() function to the temporary file indicated by "
"$TMPC."
msgstr ""

#: ../../../devel/build-system.rst:126
msgid "Python virtual environments and the QEMU build system"
msgstr ""

#: ../../../devel/build-system.rst:128
msgid "TBD"
msgstr ""

#: ../../../devel/build-system.rst:131
msgid "Stage 2: Meson"
msgstr ""

#: ../../../devel/build-system.rst:133
msgid "The Meson build system describes the build and install process for:"
msgstr ""

#: ../../../devel/build-system.rst:135
msgid "executables, which include:"
msgstr ""

#: ../../../devel/build-system.rst:137
msgid "Tools - ``qemu-img``, ``qemu-nbd``, ``qemu-ga`` (guest agent), etc"
msgstr ""

#: ../../../devel/build-system.rst:139
msgid "System emulators - ``qemu-system-$ARCH``"
msgstr ""

#: ../../../devel/build-system.rst:141
msgid "Userspace emulators - ``qemu-$ARCH``"
msgstr ""

#: ../../../devel/build-system.rst:143
msgid "Unit tests"
msgstr ""

#: ../../../devel/build-system.rst:145
msgid "documentation"
msgstr ""

#: ../../../devel/build-system.rst:147
msgid ""
"ROMs, whether provided as binary blobs in the QEMU distributions or cross "
"compiled under the direction of the configure script"
msgstr ""

#: ../../../devel/build-system.rst:150
msgid "other data files, such as icons or desktop files"
msgstr ""

#: ../../../devel/build-system.rst:152
msgid ""
"All executables are built by default, except for some ``contrib/`` binaries "
"that are known to fail to build on some platforms (for example 32-bit or big-"
"endian platforms).  Tests are also built by default, though that might "
"change in the future."
msgstr ""

#: ../../../devel/build-system.rst:157
msgid ""
"The source code is highly modularized, split across many files to facilitate "
"building of all of these components with as little duplicated compilation as "
"possible. Using the Meson \"sourceset\" functionality, ``meson.build`` files "
"group the source files in rules that are enabled according to the available "
"system libraries and to various configuration symbols.  Sourcesets belong to "
"one of four groups:"
msgstr ""

#: ../../../devel/build-system.rst:164
msgid "Subsystem sourcesets:"
msgstr ""

#: ../../../devel/build-system.rst:165
msgid ""
"Various subsystems that are common to both tools and emulators have their "
"own sourceset, for example ``block_ss`` for the block device subsystem, "
"``chardev_ss`` for the character device subsystem, etc.  These sourcesets "
"are then turned into static libraries as follows::"
msgstr ""

#: ../../../devel/build-system.rst:170
msgid ""
"libchardev = static_library('chardev', chardev_ss.sources(),\n"
"                            name_suffix: 'fa',\n"
"                            build_by_default: false)\n"
"\n"
"chardev = declare_dependency(link_whole: libchardev)"
msgstr ""

#: ../../../devel/build-system.rst:176
msgid ""
"As of Meson 0.55.1, the special ``.fa`` suffix should be used for everything "
"that is used with ``link_whole``, to ensure that the link flags are placed "
"correctly in the command line."
msgstr ""

#: ../../../devel/build-system.rst:180
msgid "Target-independent emulator sourcesets:"
msgstr ""

#: ../../../devel/build-system.rst:181
msgid ""
"Various general purpose helper code is compiled only once and the .o files "
"are linked into all output binaries that need it. This includes error "
"handling infrastructure, standard data structures, platform portability "
"wrapper functions, etc."
msgstr ""

#: ../../../devel/build-system.rst:186
msgid ""
"Target-independent code lives in the ``common_ss``, ``system_ss`` and "
"``user_ss`` sourcesets.  ``common_ss`` is linked into all emulators, "
"``system_ss`` only in system emulators, ``user_ss`` only in user-mode "
"emulators."
msgstr ""

#: ../../../devel/build-system.rst:191
msgid ""
"Target-independent sourcesets must exercise particular care when using "
"``if_false`` rules.  The ``if_false`` rule will be used correctly when "
"linking emulator binaries; however, when *compiling* target-independent "
"files into .o files, Meson may need to pick *both* the ``if_true`` and "
"``if_false`` sides to cater for targets that want either side.  To achieve "
"that, you can add a special rule using the ``CONFIG_ALL`` symbol::"
msgstr ""

#: ../../../devel/build-system.rst:199
msgid ""
"# Some targets have CONFIG_ACPI, some don't, so this is not enough\n"
"system_ss.add(when: 'CONFIG_ACPI', if_true: files('acpi.c'),\n"
"                                    if_false: files('acpi-stub.c'))\n"
"\n"
"# This is required as well:\n"
"system_ss.add(when: 'CONFIG_ALL', if_true: files('acpi-stub.c'))"
msgstr ""

#: ../../../devel/build-system.rst:206
msgid "Target-dependent emulator sourcesets:"
msgstr ""

#: ../../../devel/build-system.rst:207
msgid ""
"In the target-dependent set lives CPU emulation, some device emulation and "
"much glue code. This sometimes also has to be compiled multiple times, once "
"for each target being built.  Target-dependent files are included in the "
"``specific_ss`` sourceset."
msgstr ""

#: ../../../devel/build-system.rst:212
msgid ""
"Each emulator also includes sources for files in the ``hw/`` and ``target/`` "
"subdirectories.  The subdirectory used for each emulator comes from the "
"target's definition of ``TARGET_BASE_ARCH`` or (if missing) ``TARGET_ARCH``, "
"as found in ``default-configs/targets/*.mak``."
msgstr ""

#: ../../../devel/build-system.rst:217
msgid ""
"Each subdirectory in ``hw/`` adds one sourceset to the ``hw_arch`` "
"dictionary, for example::"
msgstr ""

#: ../../../devel/build-system.rst:220
msgid ""
"arm_ss = ss.source_set()\n"
"arm_ss.add(files('boot.c'), fdt)\n"
"...\n"
"hw_arch += {'arm': arm_ss}"
msgstr ""

#: ../../../devel/build-system.rst:225
msgid "The sourceset is only used for system emulators."
msgstr ""

#: ../../../devel/build-system.rst:227
msgid ""
"Each subdirectory in ``target/`` instead should add one sourceset to each of "
"the ``target_arch`` and ``target_softmmu_arch``, which are used respectively "
"for all emulators and for system emulators only.  For example::"
msgstr ""

#: ../../../devel/build-system.rst:231
msgid ""
"arm_ss = ss.source_set()\n"
"arm_system_ss = ss.source_set()\n"
"...\n"
"target_arch += {'arm': arm_ss}\n"
"target_softmmu_arch += {'arm': arm_system_ss}"
msgstr ""

#: ../../../devel/build-system.rst:237
msgid "Module sourcesets:"
msgstr ""

#: ../../../devel/build-system.rst:238
msgid ""
"There are two dictionaries for modules: ``modules`` is used for target-"
"independent modules and ``target_modules`` is used for target-dependent "
"modules.  When modules are disabled the ``module`` source sets are added to "
"``system_ss`` and the ``target_modules`` source sets are added to "
"``specific_ss``."
msgstr ""

#: ../../../devel/build-system.rst:244
msgid ""
"Both dictionaries are nested.  One dictionary is created per subdirectory, "
"and these per-subdirectory dictionaries are added to the toplevel "
"dictionaries.  For example::"
msgstr ""

#: ../../../devel/build-system.rst:248
msgid ""
"hw_display_modules = {}\n"
"qxl_ss = ss.source_set()\n"
"...\n"
"hw_display_modules += { 'qxl': qxl_ss }\n"
"modules += { 'hw-display': hw_display_modules }"
msgstr ""

#: ../../../devel/build-system.rst:254
msgid "Utility sourcesets:"
msgstr ""

#: ../../../devel/build-system.rst:255
msgid ""
"All binaries link with a static library ``libqemuutil.a``.  This library is "
"built from several sourcesets; most of them however host generated code, and "
"the only two of general interest are ``util_ss`` and ``stub_ss``."
msgstr ""

#: ../../../devel/build-system.rst:259
msgid ""
"The separation between these two is purely for documentation purposes. "
"``util_ss`` contains generic utility files.  Even though this code is only "
"linked in some binaries, sometimes it requires hooks only in some of these "
"and depend on other functions that are not fully implemented by all QEMU "
"binaries.  ``stub_ss`` links dummy stubs that will only be linked into the "
"binary if the real implementation is not present.  In a way, the stubs can "
"be thought of as a portable implementation of the weak symbols concept."
msgstr ""

#: ../../../devel/build-system.rst:269
msgid ""
"The following files concur in the definition of which files are linked into "
"each emulator:"
msgstr ""

#: ../../../devel/build-system.rst:272
msgid "``default-configs/devices/*.mak``"
msgstr ""

#: ../../../devel/build-system.rst:273
msgid ""
"The files under ``default-configs/devices/`` control the boards and devices "
"that are built into each QEMU system emulation targets. They merely contain "
"a list of config variable definitions such as::"
msgstr ""

#: ../../../devel/build-system.rst:277
msgid ""
"include arm-softmmu.mak\n"
"CONFIG_XLNX_ZYNQMP_ARM=y\n"
"CONFIG_XLNX_VERSAL=y"
msgstr ""

#: ../../../devel/build-system.rst:281
msgid "``*/Kconfig``"
msgstr ""

#: ../../../devel/build-system.rst:282
msgid ""
"These files are processed together with ``default-configs/devices/*.mak`` "
"and describe the dependencies between various features, subsystems and "
"device models.  They are described in :ref:`kconfig`"
msgstr ""

#: ../../../devel/build-system.rst:286
msgid "``default-configs/targets/*.mak``"
msgstr ""

#: ../../../devel/build-system.rst:287
msgid ""
"These files mostly define symbols that appear in the ``*-config-target.h`` "
"file for each emulator [#cfgtarget]_.  However, the ``TARGET_ARCH`` and "
"``TARGET_BASE_ARCH`` will also be used to select the ``hw/`` and ``target/`` "
"subdirectories that are compiled into each target."
msgstr ""

#: ../../../devel/build-system.rst:292
msgid ""
"This header is included by ``qemu/osdep.h`` when compiling files from the "
"target-specific sourcesets."
msgstr ""

#: ../../../devel/build-system.rst:295
msgid ""
"These files rarely need changing unless you are adding a completely new "
"target, or enabling new devices or hardware for a particular system/"
"userspace emulation target"
msgstr ""

#: ../../../devel/build-system.rst:301
msgid "Adding checks"
msgstr ""

#: ../../../devel/build-system.rst:303
msgid "Compiler checks can be as simple as the following::"
msgstr ""

#: ../../../devel/build-system.rst:305
msgid "config_host_data.set('HAVE_BTRFS_H', cc.has_header('linux/btrfs.h'))"
msgstr ""

#: ../../../devel/build-system.rst:307
msgid ""
"A more complex task such as adding a new dependency usually comprises the "
"following tasks:"
msgstr ""

#: ../../../devel/build-system.rst:310
msgid "Add a Meson build option to meson_options.txt."
msgstr ""

#: ../../../devel/build-system.rst:312
msgid "Add code to perform the actual feature check."
msgstr ""

#: ../../../devel/build-system.rst:314
msgid "Add code to include the feature status in ``config-host.h``"
msgstr ""

#: ../../../devel/build-system.rst:316
msgid ""
"Add code to print out the feature status in the configure summary upon "
"completion."
msgstr ""

#: ../../../devel/build-system.rst:319
msgid ""
"Taking the probe for SDL2_Image as an example, we have the following in "
"``meson_options.txt``::"
msgstr ""

#: ../../../devel/build-system.rst:322
msgid ""
"option('sdl_image', type : 'feature', value : 'auto',\n"
"       description: 'SDL Image support for icons')"
msgstr ""

#: ../../../devel/build-system.rst:325
msgid ""
"Unless the option was given a non-``auto`` value (on the configure command "
"line), the detection code must be performed only if the dependency will be "
"used::"
msgstr ""

#: ../../../devel/build-system.rst:329
msgid ""
"sdl_image = not_found\n"
"if not get_option('sdl_image').auto() or have_system\n"
"  sdl_image = dependency('SDL2_image', required: get_option('sdl_image'),\n"
"                         method: 'pkg-config')\n"
"endif"
msgstr ""

#: ../../../devel/build-system.rst:335
msgid ""
"This avoids warnings on static builds of user-mode emulators, for example. "
"Most of the libraries used by system-mode emulators are not available for "
"static linking."
msgstr ""

#: ../../../devel/build-system.rst:339
msgid "The other supporting code is generally simple::"
msgstr ""

#: ../../../devel/build-system.rst:341
msgid ""
"# Create config-host.h (if applicable)\n"
"config_host_data.set('CONFIG_SDL_IMAGE', sdl_image.found())\n"
"\n"
"# Summary\n"
"summary_info += {'SDL image support': sdl_image.found()}"
msgstr ""

#: ../../../devel/build-system.rst:347
msgid ""
"For the configure script to parse the new option, the ``scripts/meson-"
"buildoptions.sh`` file must be up-to-date; ``make update-buildoptions`` (or "
"just ``make``) will take care of updating it."
msgstr ""

#: ../../../devel/build-system.rst:353
msgid "Support scripts"
msgstr ""

#: ../../../devel/build-system.rst:355
msgid ""
"Meson has a special convention for invoking Python scripts: if their first "
"line is ``#! /usr/bin/env python3`` and the file is *not* executable, "
"find_program() arranges to invoke the script under the same Python "
"interpreter that was used to invoke Meson.  This is the most common and "
"preferred way to invoke support scripts from Meson build files, because it "
"automatically uses the value of configure's --python= option."
msgstr ""

#: ../../../devel/build-system.rst:362
msgid ""
"In case the script is not written in Python, use a ``#! /usr/bin/env ...`` "
"line and make the script executable."
msgstr ""

#: ../../../devel/build-system.rst:365
msgid ""
"Scripts written in Python, where it is desirable to make the script "
"executable (for example for test scripts that developers may want to invoke "
"from the command line, such as tests/qapi-schema/test-qapi.py), should be "
"invoked through the ``python`` variable in meson.build. For example::"
msgstr ""

#: ../../../devel/build-system.rst:371
msgid ""
"test('QAPI schema regression tests', python,\n"
"     args: files('test-qapi.py'),\n"
"     env: test_env, suite: ['qapi-schema', 'qapi-frontend'])"
msgstr ""

#: ../../../devel/build-system.rst:375
msgid ""
"This is needed to obey the --python= option passed to the configure script, "
"which may point to something other than the first python3 binary on the path."
msgstr ""

#: ../../../devel/build-system.rst:381
msgid "Stage 3: Make"
msgstr ""

#: ../../../devel/build-system.rst:383
msgid ""
"The next step in building QEMU is to invoke make.  GNU Make is required to "
"build QEMU, and may be installed as ``gmake`` on some hosts."
msgstr ""

#: ../../../devel/build-system.rst:386
msgid ""
"The output of Meson is a ``build.ninja`` file, which is used with the Ninja "
"build tool.  However, QEMU's build comprises other components than just the "
"emulators (namely firmware and the tests in ``tests/tcg``) which need "
"different cross compilers.  The QEMU Makefile wraps both Ninja and the "
"smaller build systems for firmware and tests; it also takes care of running "
"``configure`` again when the script changes.  Apart from invoking these sub-"
"Makefiles, the resulting build is largely non-recursive."
msgstr ""

#: ../../../devel/build-system.rst:394
msgid ""
"Tests, whether defined in ``meson.build`` or not, are also ran by the "
"Makefile with the traditional ``make check`` phony target, while benchmarks "
"are run with ``make bench``.  Meson test suites such as ``unit`` can be ran "
"with ``make check-unit``, and ``make check-tcg`` builds and runs \"non-"
"Meson\" tests for all targets."
msgstr ""

#: ../../../devel/build-system.rst:400
msgid ""
"If desired, it is also possible to use ``ninja`` and ``meson test``, "
"respectively to build emulators and run tests defined in meson.build. The "
"main difference is that ``make`` needs the ``-jN`` flag in order to enable "
"parallel builds or tests."
msgstr ""

#: ../../../devel/build-system.rst:406
msgid "Useful make targets"
msgstr ""

#: ../../../devel/build-system.rst:408
msgid "``help``"
msgstr ""

#: ../../../devel/build-system.rst:409
msgid "Print a help message for the most common build targets."
msgstr ""

#: ../../../devel/build-system.rst:411
msgid "``print-VAR``"
msgstr ""

#: ../../../devel/build-system.rst:412
msgid ""
"Print the value of the variable VAR. Useful for debugging the build system."
msgstr ""

#: ../../../devel/build-system.rst:417
msgid "Important files for the build system"
msgstr ""

#: ../../../devel/build-system.rst:420
msgid "Statically defined files"
msgstr ""

#: ../../../devel/build-system.rst:422
msgid ""
"The following key files are statically defined in the source tree, with the "
"rules needed to build QEMU. Their behaviour is influenced by a number of "
"dynamically created files listed later."
msgstr ""

#: ../../../devel/build-system.rst:426
msgid "``Makefile``"
msgstr ""

#: ../../../devel/build-system.rst:427
msgid ""
"The main entry point used when invoking make to build all the components of "
"QEMU. The default 'all' target will naturally result in the build of every "
"component."
msgstr ""

#: ../../../devel/build-system.rst:431
msgid "``*/meson.build``"
msgstr ""

#: ../../../devel/build-system.rst:432
msgid ""
"The meson.build file in the root directory is the main entry point for the "
"Meson build system, and it coordinates the configuration and build of all "
"executables.  Build rules for various subdirectories are included in other "
"meson.build files spread throughout the QEMU source tree."
msgstr ""

#: ../../../devel/build-system.rst:437
msgid "``tests/Makefile.include``"
msgstr ""

#: ../../../devel/build-system.rst:438
msgid ""
"Rules for external test harnesses. These include the TCG tests and the "
"Avocado-based integration tests."
msgstr ""

#: ../../../devel/build-system.rst:441
msgid "``tests/docker/Makefile.include``"
msgstr ""

#: ../../../devel/build-system.rst:442
msgid ""
"Rules for Docker tests. Like ``tests/Makefile.include``, this file is "
"included directly by the top level Makefile, anything defined in this file "
"will influence the entire build system."
msgstr ""

#: ../../../devel/build-system.rst:446
msgid "``tests/vm/Makefile.include``"
msgstr ""

#: ../../../devel/build-system.rst:447
msgid ""
"Rules for VM-based tests. Like ``tests/Makefile.include``, this file is "
"included directly by the top level Makefile, anything defined in this file "
"will influence the entire build system."
msgstr ""

#: ../../../devel/build-system.rst:452
msgid "Dynamically created files"
msgstr ""

#: ../../../devel/build-system.rst:454
msgid ""
"The following files are generated at run-time in order to control the "
"behaviour of the Makefiles. This avoids the need for QEMU makefiles to go "
"through any pre-processing as seen with autotools, where configure generates "
"``Makefile`` from ``Makefile.in``."
msgstr ""

#: ../../../devel/build-system.rst:459
msgid "Built by configure:"
msgstr ""

#: ../../../devel/build-system.rst:461
msgid "``config-host.mak``"
msgstr ""

#: ../../../devel/build-system.rst:462
msgid ""
"When configure has determined the characteristics of the build host it will "
"write them to this file for use in ``Makefile`` and to a smaller extent "
"``meson.build``. These include the paths to various tools and a variety of "
"``CONFIG_*`` variables related to optionally enabled features."
msgstr ""

#: ../../../devel/build-system.rst:467
msgid ""
"``config-host.mak`` is also used as a dependency checking mechanism. If make "
"sees that the modification timestamp on configure is newer than that on "
"``config-host.mak``, then configure will be re-run."
msgstr ""

#: ../../../devel/build-system.rst:471
msgid "The variables defined here apply to all QEMU build outputs."
msgstr ""

#: ../../../devel/build-system.rst:474
msgid "``config-meson.cross``"
msgstr ""

#: ../../../devel/build-system.rst:476
msgid ""
"A Meson \"cross file\" (or native file) used to communicate the paths to the "
"toolchain and other configuration options."
msgstr ""

#: ../../../devel/build-system.rst:479
msgid "``config.status``"
msgstr ""

#: ../../../devel/build-system.rst:481
msgid ""
"A small shell script that will invoke configure again with the same "
"environment variables that were set during the first run.  It's used to "
"rerun configure after changes to the source code, but it can also be "
"inspected manually to check the contents of the environment."
msgstr ""

#: ../../../devel/build-system.rst:486
msgid "``Makefile.prereqs``"
msgstr ""

#: ../../../devel/build-system.rst:488
msgid ""
"A set of Makefile dependencies that order the build and execution of "
"firmware and tests after the container images and emulators that they need."
msgstr ""

#: ../../../devel/build-system.rst:492
msgid ""
"``pc-bios/*/config.mak``, ``tests/tcg/config-host.mak``, ``tests/tcg/*/"
"config-target.mak``"
msgstr ""

#: ../../../devel/build-system.rst:494
msgid ""
"Configuration variables used to build the firmware and TCG tests, including "
"paths to cross compilation toolchains."
msgstr ""

#: ../../../devel/build-system.rst:497
msgid "``pyvenv``"
msgstr ""

#: ../../../devel/build-system.rst:499
msgid ""
"A Python virtual environment that is used for all Python code running during "
"the build.  Using a virtual environment ensures that even code that is run "
"via ``sphinx-build``, ``meson`` etc. uses the same interpreter and packages."
msgstr ""

#: ../../../devel/build-system.rst:504
msgid "Built by Meson:"
msgstr ""

#: ../../../devel/build-system.rst:506
msgid "``config-host.h``"
msgstr ""

#: ../../../devel/build-system.rst:507
msgid ""
"Used by C code to determine the properties of the build environment and the "
"set of enabled features for the entire build."
msgstr ""

#: ../../../devel/build-system.rst:510
msgid "``${TARGET-NAME}-config-devices.mak``"
msgstr ""

#: ../../../devel/build-system.rst:511
msgid ""
"TARGET-NAME is the name of a system emulator. The file is generated by Meson "
"using files under ``configs/devices`` as input."
msgstr ""

#: ../../../devel/build-system.rst:514
msgid "``${TARGET-NAME}-config-target.mak``"
msgstr ""

#: ../../../devel/build-system.rst:515
msgid ""
"TARGET-NAME is the name of a system or usermode emulator. The file is "
"generated by Meson using files under ``configs/targets`` as input."
msgstr ""

#: ../../../devel/build-system.rst:518
msgid "``$TARGET_NAME-config-target.h``, ``$TARGET_NAME-config-devices.h``"
msgstr ""

#: ../../../devel/build-system.rst:519
msgid ""
"Used by C code to determine the properties and enabled features for each "
"target.  enabled.  They are generated from the contents of the corresponding "
"``*.mak`` files using Meson's ``configure_file()`` function; each target can "
"include them using the ``CONFIG_TARGET`` and ``CONFIG_DEVICES`` macro "
"respectively."
msgstr ""

#: ../../../devel/build-system.rst:525
msgid "``build.ninja``"
msgstr ""

#: ../../../devel/build-system.rst:526
msgid "The build rules."
msgstr ""

#: ../../../devel/build-system.rst:529
msgid "Built by Makefile:"
msgstr ""

#: ../../../devel/build-system.rst:531
msgid "``Makefile.ninja``"
msgstr ""

#: ../../../devel/build-system.rst:532
msgid ""
"A Makefile include that bridges to ninja for the actual build.  The Makefile "
"is mostly a list of targets that Meson included in build.ninja."
msgstr ""

#: ../../../devel/build-system.rst:535
msgid "``Makefile.mtest``"
msgstr ""

#: ../../../devel/build-system.rst:536
msgid ""
"The Makefile definitions that let \"make check\" run tests defined in meson."
"build.  The rules are produced from Meson's JSON description of tests "
"(obtained with \"meson introspect --tests\") through the script scripts/"
"mtest2make.py."
msgstr ""
